/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FundWalletInterface extends ethers.utils.Interface {
  functions: {
    "adaptor()": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "balanceOf(address,bytes32)": FunctionFragment;
    "billHash(address,uint64,bytes32,bytes)": FunctionFragment;
    "billTypedHash()": FunctionFragment;
    "decodeBill(bytes)": FunctionFragment;
    "encodeBill((uint256,tuple[]))": FunctionFragment;
    "hashTypedDataV4ForBill(address,uint64,bytes32,bytes)": FunctionFragment;
    "hashTypedDataV4ForRecharge(address,uint64,address,bytes32,uint256)": FunctionFragment;
    "initialize(address,address,address,address,address,string,string,string,string)": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "nonces(address,bytes32,uint64)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerOf(address,bytes32)": FunctionFragment;
    "ownerWithdrawERC20(address,address,uint256)": FunctionFragment;
    "ownerWithdrawNative(address,uint256)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "providers()": FunctionFragment;
    "recharge(address,uint64,address,bytes32,uint256,bytes)": FunctionFragment;
    "rechargeHash(address,uint64,address,bytes32,uint256)": FunctionFragment;
    "rechargeTypedHash()": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "setBillTypedHash(string)": FunctionFragment;
    "setRechargeTypedHash(string)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "spend(address,uint64,bytes32,bytes,bytes)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferWalletOwner(address,bytes32,address,bytes)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(address,uint64,bytes32,address,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adaptor", values?: undefined): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "billHash",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "billTypedHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeBill",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBill",
    values: [
      {
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTypedDataV4ForBill",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTypedDataV4ForRecharge",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawERC20",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ownerWithdrawNative",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(functionFragment: "providers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recharge",
    values: [string, BigNumberish, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rechargeHash",
    values: [string, BigNumberish, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rechargeTypedHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBillTypedHash",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRechargeTypedHash",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(
    functionFragment: "spend",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferWalletOwner",
    values: [string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BytesLike, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "adaptor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "billHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "billTypedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeBill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeBill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashTypedDataV4ForBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashTypedDataV4ForRecharge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ownerWithdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recharge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rechargeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rechargeTypedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBillTypedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRechargeTypedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferWalletOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BillTypedHashUpdated(bytes32)": EventFragment;
    "Billing(address,uint64,bytes32,bytes,uint256)": EventFragment;
    "Charge(address,uint64,address,bytes32,uint256)": EventFragment;
    "NativeWithdrawal(address,uint256)": EventFragment;
    "NonceUpdated(address,bytes32,uint64,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "ProvidersUpdated(address)": EventFragment;
    "RechargeTypedHashUpdated(bytes32)": EventFragment;
    "ResourceAdaptorUpdated(address)": EventFragment;
    "Spend(address,uint64,bytes32,uint256)": EventFragment;
    "TokenUpdated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "WalletOwnerTransferred(address,bytes32,address)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
    "Withdrawn(address,uint64,bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BillTypedHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Billing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RechargeTypedHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceAdaptorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Spend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletOwnerTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type BillTypedHashUpdatedEvent = TypedEvent<[string] & { hash: string }>;

export type BillingEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    bill: string;
    amount: BigNumber;
  }
>;

export type ChargeEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    owner: string;
    account: string;
    amount: BigNumber;
  }
>;

export type NativeWithdrawalEvent = TypedEvent<
  [string, BigNumber] & { to: string; value: BigNumber }
>;

export type NonceUpdatedEvent = TypedEvent<
  [string, string, BigNumber, number] & {
    provider: string;
    account: string;
    nonce: BigNumber;
    purpose: number;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PauserAddedEvent = TypedEvent<[string] & { account: string }>;

export type PauserRemovedEvent = TypedEvent<[string] & { account: string }>;

export type ProvidersUpdatedEvent = TypedEvent<
  [string] & { providers: string }
>;

export type RechargeTypedHashUpdatedEvent = TypedEvent<
  [string] & { hash: string }
>;

export type ResourceAdaptorUpdatedEvent = TypedEvent<
  [string] & { adaptor: string }
>;

export type SpendEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    fee: BigNumber;
  }
>;

export type TokenUpdatedEvent = TypedEvent<[string] & { token: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WalletOwnerTransferredEvent = TypedEvent<
  [string, string, string] & {
    provider: string;
    account: string;
    newOwner: string;
  }
>;

export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; value: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    to: string;
    amount: BigNumber;
  }
>;

export class FundWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FundWalletInterface;

  functions: {
    adaptor(overrides?: CallOverrides): Promise<[string]>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    billTypedHash(overrides?: CallOverrides): Promise<[string]>;

    decodeBill(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          ([
            BigNumber,
            ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[]
          ] & {
            indexBlock: BigNumber;
            entries: ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[];
          })[]
        ] & {
          totalValue: BigNumber;
          payloads: ([
            BigNumber,
            ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[]
          ] & {
            indexBlock: BigNumber;
            entries: ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[];
          })[];
        }
      ]
    >;

    encodeBill(
      bill: {
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTypedDataV4ForRecharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      owner: string,
      pauser: string,
      adaptor: string,
      _providers: string,
      _token: string,
      name: string,
      version: string,
      rechargeTypes: string,
      billTypes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonces(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    providers(overrides?: CallOverrides): Promise<[string]>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rechargeHash(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    rechargeTypedHash(overrides?: CallOverrides): Promise<[string]>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBillTypedHash(
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRechargeTypedHash(
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adaptor(overrides?: CallOverrides): Promise<string>;

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    provider: string,
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  billHash(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    bill: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  billTypedHash(overrides?: CallOverrides): Promise<string>;

  decodeBill(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      ([
        BigNumber,
        ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
      ] & {
        indexBlock: BigNumber;
        entries: ([number, BigNumber] & {
          resourceType: number;
          amount: BigNumber;
        })[];
      })[]
    ] & {
      totalValue: BigNumber;
      payloads: ([
        BigNumber,
        ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
      ] & {
        indexBlock: BigNumber;
        entries: ([number, BigNumber] & {
          resourceType: number;
          amount: BigNumber;
        })[];
      })[];
    }
  >;

  encodeBill(
    bill: {
      totalValue: BigNumberish;
      payloads: {
        indexBlock: BigNumberish;
        entries: { resourceType: BigNumberish; amount: BigNumberish }[];
      }[];
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashTypedDataV4ForBill(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    bill: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  hashTypedDataV4ForRecharge(
    provider: string,
    nonce: BigNumberish,
    owner: string,
    account: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    owner: string,
    pauser: string,
    adaptor: string,
    _providers: string,
    _token: string,
    name: string,
    version: string,
    rechargeTypes: string,
    billTypes: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  nonces(
    arg0: string,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    provider: string,
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  ownerWithdrawERC20(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ownerWithdrawNative(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  providers(overrides?: CallOverrides): Promise<string>;

  recharge(
    provider: string,
    nonce: BigNumberish,
    owner: string,
    account: BytesLike,
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rechargeHash(
    provider: string,
    nonce: BigNumberish,
    owner: string,
    account: BytesLike,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  rechargeTypedHash(overrides?: CallOverrides): Promise<string>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBillTypedHash(
    types: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRechargeTypedHash(
    types: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spend(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    bill: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferWalletOwner(
    provider: string,
    account: BytesLike,
    newOwner: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    to: string,
    bill: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adaptor(overrides?: CallOverrides): Promise<string>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    billTypedHash(overrides?: CallOverrides): Promise<string>;

    decodeBill(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        ([
          BigNumber,
          ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
        ] & {
          indexBlock: BigNumber;
          entries: ([number, BigNumber] & {
            resourceType: number;
            amount: BigNumber;
          })[];
        })[]
      ] & {
        totalValue: BigNumber;
        payloads: ([
          BigNumber,
          ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
        ] & {
          indexBlock: BigNumber;
          entries: ([number, BigNumber] & {
            resourceType: number;
            amount: BigNumber;
          })[];
        })[];
      }
    >;

    encodeBill(
      bill: {
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    hashTypedDataV4ForRecharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      owner: string,
      pauser: string,
      adaptor: string,
      _providers: string,
      _token: string,
      name: string,
      version: string,
      rechargeTypes: string,
      billTypes: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    nonces(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    providers(overrides?: CallOverrides): Promise<string>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    rechargeHash(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    rechargeTypedHash(overrides?: CallOverrides): Promise<string>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    setBillTypedHash(types: string, overrides?: CallOverrides): Promise<void>;

    setRechargeTypedHash(
      types: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(_token: string, overrides?: CallOverrides): Promise<void>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BillTypedHashUpdated(bytes32)"(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    BillTypedHashUpdated(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    "Billing(address,uint64,bytes32,bytes,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      bill?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        bill: string;
        amount: BigNumber;
      }
    >;

    Billing(
      provider?: null,
      nonce?: null,
      account?: null,
      bill?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        bill: string;
        amount: BigNumber;
      }
    >;

    "Charge(address,uint64,address,bytes32,uint256)"(
      provider?: null,
      nonce?: null,
      owner?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        owner: string;
        account: string;
        amount: BigNumber;
      }
    >;

    Charge(
      provider?: null,
      nonce?: null,
      owner?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        owner: string;
        account: string;
        amount: BigNumber;
      }
    >;

    "NativeWithdrawal(address,uint256)"(
      to?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    NativeWithdrawal(
      to?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    "NonceUpdated(address,bytes32,uint64,uint8)"(
      provider?: null,
      account?: null,
      nonce?: null,
      purpose?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number],
      { provider: string; account: string; nonce: BigNumber; purpose: number }
    >;

    NonceUpdated(
      provider?: null,
      account?: null,
      nonce?: null,
      purpose?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number],
      { provider: string; account: string; nonce: BigNumber; purpose: number }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PauserAdded(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "PauserRemoved(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "ProvidersUpdated(address)"(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    ProvidersUpdated(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    "RechargeTypedHashUpdated(bytes32)"(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    RechargeTypedHashUpdated(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    "ResourceAdaptorUpdated(address)"(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    ResourceAdaptorUpdated(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    "Spend(address,uint64,bytes32,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { provider: string; nonce: BigNumber; account: string; fee: BigNumber }
    >;

    Spend(
      provider?: null,
      nonce?: null,
      account?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { provider: string; nonce: BigNumber; account: string; fee: BigNumber }
    >;

    "TokenUpdated(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenUpdated(token?: null): TypedEventFilter<[string], { token: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "WalletOwnerTransferred(address,bytes32,address)"(
      provider?: null,
      account?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string, string],
      { provider: string; account: string; newOwner: string }
    >;

    WalletOwnerTransferred(
      provider?: null,
      account?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string, string],
      { provider: string; account: string; newOwner: string }
    >;

    "Withdrawal(address,address,uint256)"(
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; value: BigNumber }
    >;

    Withdrawal(
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; value: BigNumber }
    >;

    "Withdrawn(address,uint64,bytes32,address,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        to: string;
        amount: BigNumber;
      }
    >;

    Withdrawn(
      provider?: null,
      nonce?: null,
      account?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        to: string;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    adaptor(overrides?: CallOverrides): Promise<BigNumber>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    billTypedHash(overrides?: CallOverrides): Promise<BigNumber>;

    decodeBill(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    encodeBill(
      bill: {
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTypedDataV4ForRecharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      owner: string,
      pauser: string,
      adaptor: string,
      _providers: string,
      _token: string,
      name: string,
      version: string,
      rechargeTypes: string,
      billTypes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    providers(overrides?: CallOverrides): Promise<BigNumber>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rechargeHash(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rechargeTypedHash(overrides?: CallOverrides): Promise<BigNumber>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBillTypedHash(
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRechargeTypedHash(
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adaptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    billTypedHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeBill(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBill(
      bill: {
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTypedDataV4ForRecharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      owner: string,
      pauser: string,
      adaptor: string,
      _providers: string,
      _token: string,
      name: string,
      version: string,
      rechargeTypes: string,
      billTypes: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ownerWithdrawERC20(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ownerWithdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rechargeHash(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rechargeTypedHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBillTypedHash(
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRechargeTypedHash(
      types: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
