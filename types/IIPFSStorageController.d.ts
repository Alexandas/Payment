/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IIPFSStorageControllerInterface extends ethers.utils.Interface {
  functions: {
    "adaptor()": FunctionFragment;
    "availableExpiration(bytes32)": FunctionFragment;
    "balanceOf(bytes32)": FunctionFragment;
    "expand(bytes32,uint256,uint256)": FunctionFragment;
    "expandedFee(bytes32,uint256,uint256)": FunctionFragment;
    "expansions(bytes32,uint256,uint256)": FunctionFragment;
    "expiration(bytes32)": FunctionFragment;
    "expiredAt(bytes32)": FunctionFragment;
    "getAmountOf(uint256)": FunctionFragment;
    "getValueOf(uint256)": FunctionFragment;
    "isExpired(bytes32)": FunctionFragment;
    "price()": FunctionFragment;
    "resourceType()": FunctionFragment;
    "startTime(bytes32)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adaptor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "availableExpiration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expand",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expandedFee",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expansions",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expiredAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resourceType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "startTime",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "adaptor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "availableExpiration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expand", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expandedFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expansions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiredAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValueOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourceType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;

  events: {
    "Expanded(bytes32,uint256,uint256)": EventFragment;
    "ResourceAdaptorUpdated(address)": EventFragment;
    "ResourceTypeUpdated(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Expanded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceAdaptorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceTypeUpdated"): EventFragment;
}

export type ExpandedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    account: string;
    expandedStorageFee: BigNumber;
    expandedExpirationFee: BigNumber;
  }
>;

export type ResourceAdaptorUpdatedEvent = TypedEvent<
  [string] & { adaptor: string }
>;

export type ResourceTypeUpdatedEvent = TypedEvent<
  [number] & { resourceType: number }
>;

export class IIPFSStorageController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IIPFSStorageControllerInterface;

  functions: {
    adaptor(overrides?: CallOverrides): Promise<[string]>;

    availableExpiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOf(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expand(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expandedFee(
      account: BytesLike,
      expandedStorage: BigNumberish,
      expandedExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expandedStorageFee: BigNumber;
        expandedExpirationFee: BigNumber;
      }
    >;

    expansions(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expandedStorage: BigNumber;
        expandedExpiration: BigNumber;
      }
    >;

    expiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expiredAt(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAmountOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isExpired(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    resourceType(overrides?: CallOverrides): Promise<[number]>;

    startTime(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  adaptor(overrides?: CallOverrides): Promise<string>;

  availableExpiration(
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOf(account: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  expand(
    account: BytesLike,
    expandedStorageFee: BigNumberish,
    expandedExpirationFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expandedFee(
    account: BytesLike,
    expandedStorage: BigNumberish,
    expandedExpiration: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expandedStorageFee: BigNumber;
      expandedExpirationFee: BigNumber;
    }
  >;

  expansions(
    account: BytesLike,
    expandedStorageFee: BigNumberish,
    expandedExpirationFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      expandedStorage: BigNumber;
      expandedExpiration: BigNumber;
    }
  >;

  expiration(account: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  expiredAt(account: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  getAmountOf(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValueOf(
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isExpired(account: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  resourceType(overrides?: CallOverrides): Promise<number>;

  startTime(account: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    adaptor(overrides?: CallOverrides): Promise<string>;

    availableExpiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expand(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expandedFee(
      account: BytesLike,
      expandedStorage: BigNumberish,
      expandedExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expandedStorageFee: BigNumber;
        expandedExpirationFee: BigNumber;
      }
    >;

    expansions(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        expandedStorage: BigNumber;
        expandedExpiration: BigNumber;
      }
    >;

    expiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiredAt(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpired(account: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    resourceType(overrides?: CallOverrides): Promise<number>;

    startTime(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Expanded(bytes32,uint256,uint256)"(
      account?: null,
      expandedStorageFee?: null,
      expandedExpirationFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        account: string;
        expandedStorageFee: BigNumber;
        expandedExpirationFee: BigNumber;
      }
    >;

    Expanded(
      account?: null,
      expandedStorageFee?: null,
      expandedExpirationFee?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      {
        account: string;
        expandedStorageFee: BigNumber;
        expandedExpirationFee: BigNumber;
      }
    >;

    "ResourceAdaptorUpdated(address)"(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    ResourceAdaptorUpdated(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    "ResourceTypeUpdated(uint8)"(
      resourceType?: null
    ): TypedEventFilter<[number], { resourceType: number }>;

    ResourceTypeUpdated(
      resourceType?: null
    ): TypedEventFilter<[number], { resourceType: number }>;
  };

  estimateGas: {
    adaptor(overrides?: CallOverrides): Promise<BigNumber>;

    availableExpiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOf(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expand(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expandedFee(
      account: BytesLike,
      expandedStorage: BigNumberish,
      expandedExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expansions(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expiredAt(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpired(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    resourceType(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adaptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    availableExpiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expand(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expandedFee(
      account: BytesLike,
      expandedStorage: BigNumberish,
      expandedExpiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expansions(
      account: BytesLike,
      expandedStorageFee: BigNumberish,
      expandedExpirationFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiration(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiredAt(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOf(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueOf(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExpired(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resourceType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
