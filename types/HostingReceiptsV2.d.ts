/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HostingReceiptsV2Interface extends ethers.utils.Interface {
  functions: {
    "boughtTime(bytes28)": FunctionFragment;
    "cost(bytes28)": FunctionFragment;
    "expiration(bytes28)": FunctionFragment;
    "expirationAt(bytes28)": FunctionFragment;
    "isExpired(bytes28)": FunctionFragment;
    "level(bytes28)": FunctionFragment;
    "receipts(bytes28)": FunctionFragment;
    "to(bytes28)": FunctionFragment;
    "token(bytes28)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boughtTime",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "cost", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "expiration",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expirationAt",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExpired",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "level", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "receipts", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "to", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "token", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "boughtTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "expiration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "expirationAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isExpired", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "level", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "receipts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "to", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {};
}

export class HostingReceiptsV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HostingReceiptsV2Interface;

  functions: {
    boughtTime(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cost(uuid: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    expiration(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    level(uuid: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          to: string;
          token: string;
          level: BigNumber;
          boughtTime: BigNumber;
          expiration: BigNumber;
          cost: BigNumber;
        }
      ]
    >;

    to(uuid: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    token(uuid: BytesLike, overrides?: CallOverrides): Promise<[string]>;
  };

  boughtTime(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  cost(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  expiration(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  expirationAt(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  level(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  receipts(
    uuid: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      to: string;
      token: string;
      level: BigNumber;
      boughtTime: BigNumber;
      expiration: BigNumber;
      cost: BigNumber;
    }
  >;

  to(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

  token(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    boughtTime(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    cost(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    expiration(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    level(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        to: string;
        token: string;
        level: BigNumber;
        boughtTime: BigNumber;
        expiration: BigNumber;
        cost: BigNumber;
      }
    >;

    to(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;

    token(uuid: BytesLike, overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    boughtTime(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    cost(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    expiration(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isExpired(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    level(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    receipts(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    to(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    token(uuid: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    boughtTime(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cost(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiration(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expirationAt(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isExpired(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    level(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    receipts(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    to(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(
      uuid: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
