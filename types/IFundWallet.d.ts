/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IFundWalletInterface extends ethers.utils.Interface {
  functions: {
    "adaptor()": FunctionFragment;
    "ownerOf(address,bytes32)": FunctionFragment;
    "providers()": FunctionFragment;
    "recharge(address,uint64,address,bytes32,uint256,bytes)": FunctionFragment;
    "spend(address,uint64,bytes32,bytes,bytes)": FunctionFragment;
    "token()": FunctionFragment;
    "transferWalletOwner(address,bytes32,address,bytes)": FunctionFragment;
    "withdraw(address,uint64,bytes32,address,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adaptor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "providers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recharge",
    values: [string, BigNumberish, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "spend",
    values: [string, BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferWalletOwner",
    values: [string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish, BytesLike, string, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "adaptor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recharge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "spend", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferWalletOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BillTypedHashUpdated(bytes32)": EventFragment;
    "Billing(address,uint64,bytes32,bytes,uint256)": EventFragment;
    "Charge(address,uint64,address,bytes32,uint256)": EventFragment;
    "NonceUpdated(address,bytes32,uint64,uint8)": EventFragment;
    "ProvidersUpdated(address)": EventFragment;
    "RechargeTypedHashUpdated(bytes32)": EventFragment;
    "ResourceAdaptorUpdated(address)": EventFragment;
    "Spend(address,uint64,bytes32,uint256)": EventFragment;
    "TokenUpdated(address)": EventFragment;
    "WalletOwnerTransferred(address,bytes32,address)": EventFragment;
    "Withdrawn(address,uint64,bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BillTypedHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Billing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Charge"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NonceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RechargeTypedHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceAdaptorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Spend"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WalletOwnerTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type BillTypedHashUpdatedEvent = TypedEvent<[string] & { hash: string }>;

export type BillingEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    bill: string;
    amount: BigNumber;
  }
>;

export type ChargeEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    owner: string;
    account: string;
    amount: BigNumber;
  }
>;

export type NonceUpdatedEvent = TypedEvent<
  [string, string, BigNumber, number] & {
    provider: string;
    account: string;
    nonce: BigNumber;
    purpose: number;
  }
>;

export type ProvidersUpdatedEvent = TypedEvent<
  [string] & { providers: string }
>;

export type RechargeTypedHashUpdatedEvent = TypedEvent<
  [string] & { hash: string }
>;

export type ResourceAdaptorUpdatedEvent = TypedEvent<
  [string] & { adaptor: string }
>;

export type SpendEvent = TypedEvent<
  [string, BigNumber, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    fee: BigNumber;
  }
>;

export type TokenUpdatedEvent = TypedEvent<[string] & { token: string }>;

export type WalletOwnerTransferredEvent = TypedEvent<
  [string, string, string] & {
    provider: string;
    account: string;
    newOwner: string;
  }
>;

export type WithdrawnEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    to: string;
    amount: BigNumber;
  }
>;

export class IFundWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IFundWalletInterface;

  functions: {
    adaptor(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    providers(overrides?: CallOverrides): Promise<[string]>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      billMessage: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  adaptor(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    provider: string,
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  providers(overrides?: CallOverrides): Promise<string>;

  recharge(
    provider: string,
    nonce: BigNumberish,
    owner: string,
    account: BytesLike,
    amount: BigNumberish,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spend(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    bill: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferWalletOwner(
    provider: string,
    account: BytesLike,
    newOwner: string,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    to: string,
    billMessage: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    adaptor(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    providers(overrides?: CallOverrides): Promise<string>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      billMessage: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "BillTypedHashUpdated(bytes32)"(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    BillTypedHashUpdated(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    "Billing(address,uint64,bytes32,bytes,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      bill?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        bill: string;
        amount: BigNumber;
      }
    >;

    Billing(
      provider?: null,
      nonce?: null,
      account?: null,
      bill?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        bill: string;
        amount: BigNumber;
      }
    >;

    "Charge(address,uint64,address,bytes32,uint256)"(
      provider?: null,
      nonce?: null,
      owner?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        owner: string;
        account: string;
        amount: BigNumber;
      }
    >;

    Charge(
      provider?: null,
      nonce?: null,
      owner?: null,
      account?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        owner: string;
        account: string;
        amount: BigNumber;
      }
    >;

    "NonceUpdated(address,bytes32,uint64,uint8)"(
      provider?: null,
      account?: null,
      nonce?: null,
      purpose?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number],
      { provider: string; account: string; nonce: BigNumber; purpose: number }
    >;

    NonceUpdated(
      provider?: null,
      account?: null,
      nonce?: null,
      purpose?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number],
      { provider: string; account: string; nonce: BigNumber; purpose: number }
    >;

    "ProvidersUpdated(address)"(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    ProvidersUpdated(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    "RechargeTypedHashUpdated(bytes32)"(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    RechargeTypedHashUpdated(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    "ResourceAdaptorUpdated(address)"(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    ResourceAdaptorUpdated(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    "Spend(address,uint64,bytes32,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { provider: string; nonce: BigNumber; account: string; fee: BigNumber }
    >;

    Spend(
      provider?: null,
      nonce?: null,
      account?: null,
      fee?: null
    ): TypedEventFilter<
      [string, BigNumber, string, BigNumber],
      { provider: string; nonce: BigNumber; account: string; fee: BigNumber }
    >;

    "TokenUpdated(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenUpdated(token?: null): TypedEventFilter<[string], { token: string }>;

    "WalletOwnerTransferred(address,bytes32,address)"(
      provider?: null,
      account?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string, string],
      { provider: string; account: string; newOwner: string }
    >;

    WalletOwnerTransferred(
      provider?: null,
      account?: null,
      newOwner?: null
    ): TypedEventFilter<
      [string, string, string],
      { provider: string; account: string; newOwner: string }
    >;

    "Withdrawn(address,uint64,bytes32,address,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        to: string;
        amount: BigNumber;
      }
    >;

    Withdrawn(
      provider?: null,
      nonce?: null,
      account?: null,
      to?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        to: string;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    adaptor(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providers(overrides?: CallOverrides): Promise<BigNumber>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      billMessage: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    adaptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recharge(
      provider: string,
      nonce: BigNumberish,
      owner: string,
      account: BytesLike,
      amount: BigNumberish,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spend(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferWalletOwner(
      provider: string,
      account: BytesLike,
      newOwner: string,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      to: string,
      billMessage: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
