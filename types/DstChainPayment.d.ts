/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DstChainPaymentInterface extends ethers.utils.Interface {
  functions: {
    "Init_Payment(address,address,address,address,address)": FunctionFragment;
    "addPauser(address)": FunctionFragment;
    "arStorageController()": FunctionFragment;
    "bandwidthController()": FunctionFragment;
    "buildingTimeController()": FunctionFragment;
    "convertSourceChainPayloads(uint256,tuple[])": FunctionFragment;
    "decodeSourceChainMessage(bytes)": FunctionFragment;
    "ipfsStorageController()": FunctionFragment;
    "isPauser(address)": FunctionFragment;
    "messageReceiver()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausers(address)": FunctionFragment;
    "pay((address,uint64,bytes32,tuple[]))": FunctionFragment;
    "payFromSourceChain(address,uint256,bytes)": FunctionFragment;
    "providerBalances(address)": FunctionFragment;
    "providerWithdraw(address,address,uint256)": FunctionFragment;
    "providers()": FunctionFragment;
    "removePauser(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renouncePauser()": FunctionFragment;
    "setARStorageController(address)": FunctionFragment;
    "setBandwidthController(address)": FunctionFragment;
    "setBuildingTimeController(address)": FunctionFragment;
    "setIPFSStorageController(address)": FunctionFragment;
    "setMessageReceiver(address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "token()": FunctionFragment;
    "totalValue(tuple[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
    "withdrawNative(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Init_Payment",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "addPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "arStorageController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bandwidthController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buildingTimeController",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convertSourceChainPayloads",
    values: [
      BigNumberish,
      { resourceType: BigNumberish; values: BigNumberish[] }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "decodeSourceChainMessage",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "ipfsStorageController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isPauser", values: [string]): string;
  encodeFunctionData(
    functionFragment: "messageReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pausers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pay",
    values: [
      {
        provider: string;
        nonce: BigNumberish;
        account: BytesLike;
        payloads: { resourceType: BigNumberish; values: BigNumberish[] }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payFromSourceChain",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "providerBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "providerWithdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "providers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removePauser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePauser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setARStorageController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBandwidthController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuildingTimeController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIPFSStorageController",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageReceiver",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setToken", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalValue",
    values: [{ resourceType: BigNumberish; values: BigNumberish[] }[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "Init_Payment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "arStorageController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bandwidthController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buildingTimeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertSourceChainPayloads",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decodeSourceChainMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ipfsStorageController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "messageReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pausers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "payFromSourceChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "providerWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setARStorageController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBandwidthController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuildingTimeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIPFSStorageController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;

  events: {
    "ARStorageControllerUpdated(address)": EventFragment;
    "BandwidthControllerUpdated(address)": EventFragment;
    "BuildingTimeControllerUpdated(address)": EventFragment;
    "IPFSStorageControllerUpdated(address)": EventFragment;
    "MessageReceiverUpdated(address)": EventFragment;
    "NativeWithdrawal(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paid(address,address,tuple)": EventFragment;
    "Paused(address)": EventFragment;
    "PauserAdded(address)": EventFragment;
    "PauserRemoved(address)": EventFragment;
    "ProvidersUpdated(address)": EventFragment;
    "ProvidetWithdraw(address,address,address,uint256)": EventFragment;
    "TokenUpdated(address)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ARStorageControllerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BandwidthControllerUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BuildingTimeControllerUpdated"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IPFSStorageControllerUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MessageReceiverUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NativeWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidetWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export type ARStorageControllerUpdatedEvent = TypedEvent<
  [string] & { _arStorageController: string }
>;

export type BandwidthControllerUpdatedEvent = TypedEvent<
  [string] & { _bandwidthController: string }
>;

export type BuildingTimeControllerUpdatedEvent = TypedEvent<
  [string] & { _buildingTimeController: string }
>;

export type IPFSStorageControllerUpdatedEvent = TypedEvent<
  [string] & { _ipfsStorageController: string }
>;

export type MessageReceiverUpdatedEvent = TypedEvent<
  [string] & { messageReceiver: string }
>;

export type NativeWithdrawalEvent = TypedEvent<
  [string, BigNumber] & { to: string; value: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PaidEvent = TypedEvent<
  [
    string,
    string,
    [
      string,
      BigNumber,
      string,
      ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[]
    ] & {
      provider: string;
      nonce: BigNumber;
      account: string;
      payloads: ([number, BigNumber[]] & {
        resourceType: number;
        values: BigNumber[];
      })[];
    }
  ] & {
    payer: string;
    token: string;
    payload: [
      string,
      BigNumber,
      string,
      ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[]
    ] & {
      provider: string;
      nonce: BigNumber;
      account: string;
      payloads: ([number, BigNumber[]] & {
        resourceType: number;
        values: BigNumber[];
      })[];
    };
  }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PauserAddedEvent = TypedEvent<[string] & { account: string }>;

export type PauserRemovedEvent = TypedEvent<[string] & { account: string }>;

export type ProvidersUpdatedEvent = TypedEvent<
  [string] & { providers: string }
>;

export type ProvidetWithdrawEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    provider: string;
    token: string;
    to: string;
    value: BigNumber;
  }
>;

export type TokenUpdatedEvent = TypedEvent<[string] & { token: string }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber] & { token: string; to: string; value: BigNumber }
>;

export class DstChainPayment extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DstChainPaymentInterface;

  functions: {
    Init_Payment(
      owner: string,
      pauser: string,
      providers: string,
      messageReceiver: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    arStorageController(overrides?: CallOverrides): Promise<[string]>;

    bandwidthController(overrides?: CallOverrides): Promise<[string]>;

    buildingTimeController(overrides?: CallOverrides): Promise<[string]>;

    convertSourceChainPayloads(
      amount: BigNumberish,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<
      [
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[]
      ]
    >;

    decodeSourceChainMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[]
      ] & {
        provider: string;
        nonce: BigNumber;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
      }
    >;

    ipfsStorageController(overrides?: CallOverrides): Promise<[string]>;

    isPauser(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    messageReceiver(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pay(
      payload: {
        provider: string;
        nonce: BigNumberish;
        account: BytesLike;
        payloads: { resourceType: BigNumberish; values: BigNumberish[] }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payFromSourceChain(
      _token: string,
      dstAmount: BigNumberish,
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    providerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    providerWithdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    providers(overrides?: CallOverrides): Promise<[string]>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setARStorageController(
      _arStorageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBandwidthController(
      _bandwidthController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuildingTimeController(
      _buildingTimeController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIPFSStorageController(
      _ipfsStorageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMessageReceiver(
      _messageReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalValue(
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { value: BigNumber }>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Init_Payment(
    owner: string,
    pauser: string,
    providers: string,
    messageReceiver: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  arStorageController(overrides?: CallOverrides): Promise<string>;

  bandwidthController(overrides?: CallOverrides): Promise<string>;

  buildingTimeController(overrides?: CallOverrides): Promise<string>;

  convertSourceChainPayloads(
    amount: BigNumberish,
    payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
    overrides?: CallOverrides
  ): Promise<
    ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[]
  >;

  decodeSourceChainMessage(
    message: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      string,
      ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[]
    ] & {
      provider: string;
      nonce: BigNumber;
      account: string;
      payloads: ([number, BigNumber[]] & {
        resourceType: number;
        values: BigNumber[];
      })[];
    }
  >;

  ipfsStorageController(overrides?: CallOverrides): Promise<string>;

  isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

  messageReceiver(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pay(
    payload: {
      provider: string;
      nonce: BigNumberish;
      account: BytesLike;
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payFromSourceChain(
    _token: string,
    dstAmount: BigNumberish,
    message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  providerBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  providerWithdraw(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  providers(overrides?: CallOverrides): Promise<string>;

  removePauser(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renouncePauser(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setARStorageController(
    _arStorageController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBandwidthController(
    _bandwidthController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuildingTimeController(
    _buildingTimeController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIPFSStorageController(
    _ipfsStorageController: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMessageReceiver(
    _messageReceiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  totalValue(
    payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    token: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Init_Payment(
      owner: string,
      pauser: string,
      providers: string,
      messageReceiver: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addPauser(account: string, overrides?: CallOverrides): Promise<void>;

    arStorageController(overrides?: CallOverrides): Promise<string>;

    bandwidthController(overrides?: CallOverrides): Promise<string>;

    buildingTimeController(overrides?: CallOverrides): Promise<string>;

    convertSourceChainPayloads(
      amount: BigNumberish,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<
      ([number, BigNumber[]] & { resourceType: number; values: BigNumber[] })[]
    >;

    decodeSourceChainMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        string,
        ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[]
      ] & {
        provider: string;
        nonce: BigNumber;
        account: string;
        payloads: ([number, BigNumber[]] & {
          resourceType: number;
          values: BigNumber[];
        })[];
      }
    >;

    ipfsStorageController(overrides?: CallOverrides): Promise<string>;

    isPauser(account: string, overrides?: CallOverrides): Promise<boolean>;

    messageReceiver(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pay(
      payload: {
        provider: string;
        nonce: BigNumberish;
        account: BytesLike;
        payloads: { resourceType: BigNumberish; values: BigNumberish[] }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    payFromSourceChain(
      _token: string,
      dstAmount: BigNumberish,
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerWithdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    providers(overrides?: CallOverrides): Promise<string>;

    removePauser(account: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renouncePauser(overrides?: CallOverrides): Promise<void>;

    setARStorageController(
      _arStorageController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBandwidthController(
      _bandwidthController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuildingTimeController(
      _buildingTimeController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIPFSStorageController(
      _ipfsStorageController: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMessageReceiver(
      _messageReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(_token: string, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    totalValue(
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ARStorageControllerUpdated(address)"(
      _arStorageController?: null
    ): TypedEventFilter<[string], { _arStorageController: string }>;

    ARStorageControllerUpdated(
      _arStorageController?: null
    ): TypedEventFilter<[string], { _arStorageController: string }>;

    "BandwidthControllerUpdated(address)"(
      _bandwidthController?: null
    ): TypedEventFilter<[string], { _bandwidthController: string }>;

    BandwidthControllerUpdated(
      _bandwidthController?: null
    ): TypedEventFilter<[string], { _bandwidthController: string }>;

    "BuildingTimeControllerUpdated(address)"(
      _buildingTimeController?: null
    ): TypedEventFilter<[string], { _buildingTimeController: string }>;

    BuildingTimeControllerUpdated(
      _buildingTimeController?: null
    ): TypedEventFilter<[string], { _buildingTimeController: string }>;

    "IPFSStorageControllerUpdated(address)"(
      _ipfsStorageController?: null
    ): TypedEventFilter<[string], { _ipfsStorageController: string }>;

    IPFSStorageControllerUpdated(
      _ipfsStorageController?: null
    ): TypedEventFilter<[string], { _ipfsStorageController: string }>;

    "MessageReceiverUpdated(address)"(
      messageReceiver?: null
    ): TypedEventFilter<[string], { messageReceiver: string }>;

    MessageReceiverUpdated(
      messageReceiver?: null
    ): TypedEventFilter<[string], { messageReceiver: string }>;

    "NativeWithdrawal(address,uint256)"(
      to?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    NativeWithdrawal(
      to?: null,
      value?: null
    ): TypedEventFilter<[string, BigNumber], { to: string; value: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paid(address,address,tuple)"(
      payer?: null,
      token?: null,
      payload?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [
          string,
          BigNumber,
          string,
          ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[]
        ] & {
          provider: string;
          nonce: BigNumber;
          account: string;
          payloads: ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[];
        }
      ],
      {
        payer: string;
        token: string;
        payload: [
          string,
          BigNumber,
          string,
          ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[]
        ] & {
          provider: string;
          nonce: BigNumber;
          account: string;
          payloads: ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[];
        };
      }
    >;

    Paid(
      payer?: null,
      token?: null,
      payload?: null
    ): TypedEventFilter<
      [
        string,
        string,
        [
          string,
          BigNumber,
          string,
          ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[]
        ] & {
          provider: string;
          nonce: BigNumber;
          account: string;
          payloads: ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[];
        }
      ],
      {
        payer: string;
        token: string;
        payload: [
          string,
          BigNumber,
          string,
          ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[]
        ] & {
          provider: string;
          nonce: BigNumber;
          account: string;
          payloads: ([number, BigNumber[]] & {
            resourceType: number;
            values: BigNumber[];
          })[];
        };
      }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PauserAdded(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserAdded(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "PauserRemoved(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    PauserRemoved(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    "ProvidersUpdated(address)"(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    ProvidersUpdated(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    "ProvidetWithdraw(address,address,address,uint256)"(
      provider?: null,
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { provider: string; token: string; to: string; value: BigNumber }
    >;

    ProvidetWithdraw(
      provider?: null,
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { provider: string; token: string; to: string; value: BigNumber }
    >;

    "TokenUpdated(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenUpdated(token?: null): TypedEventFilter<[string], { token: string }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Withdrawal(address,address,uint256)"(
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; value: BigNumber }
    >;

    Withdrawal(
      token?: null,
      to?: null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { token: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    Init_Payment(
      owner: string,
      pauser: string,
      providers: string,
      messageReceiver: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    arStorageController(overrides?: CallOverrides): Promise<BigNumber>;

    bandwidthController(overrides?: CallOverrides): Promise<BigNumber>;

    buildingTimeController(overrides?: CallOverrides): Promise<BigNumber>;

    convertSourceChainPayloads(
      amount: BigNumberish,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decodeSourceChainMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ipfsStorageController(overrides?: CallOverrides): Promise<BigNumber>;

    isPauser(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    messageReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pausers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pay(
      payload: {
        provider: string;
        nonce: BigNumberish;
        account: BytesLike;
        payloads: { resourceType: BigNumberish; values: BigNumberish[] }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payFromSourceChain(
      _token: string,
      dstAmount: BigNumberish,
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    providerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providerWithdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    providers(overrides?: CallOverrides): Promise<BigNumber>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setARStorageController(
      _arStorageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBandwidthController(
      _bandwidthController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuildingTimeController(
      _buildingTimeController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIPFSStorageController(
      _ipfsStorageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMessageReceiver(
      _messageReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalValue(
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Init_Payment(
      owner: string,
      pauser: string,
      providers: string,
      messageReceiver: string,
      token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    arStorageController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bandwidthController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buildingTimeController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertSourceChainPayloads(
      amount: BigNumberish,
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decodeSourceChainMessage(
      message: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ipfsStorageController(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPauser(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    messageReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pay(
      payload: {
        provider: string;
        nonce: BigNumberish;
        account: BytesLike;
        payloads: { resourceType: BigNumberish; values: BigNumberish[] }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payFromSourceChain(
      _token: string,
      dstAmount: BigNumberish,
      message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    providerBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providerWithdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    providers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removePauser(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renouncePauser(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setARStorageController(
      _arStorageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBandwidthController(
      _bandwidthController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuildingTimeController(
      _buildingTimeController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIPFSStorageController(
      _ipfsStorageController: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMessageReceiver(
      _messageReceiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValue(
      payloads: { resourceType: BigNumberish; values: BigNumberish[] }[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      token: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
