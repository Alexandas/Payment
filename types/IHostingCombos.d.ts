/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IHostingCombosInterface extends ethers.utils.Interface {
  functions: {
    "addCombo((uint256,uint256,uint256,uint256,bytes28,bool))": FunctionFragment;
    "comboLength()": FunctionFragment;
    "combos(uint256)": FunctionFragment;
    "getComboCost(uint256,uint256)": FunctionFragment;
    "isCustom(uint256)": FunctionFragment;
    "updateCombo(uint256,(uint256,uint256,uint256,uint256,bytes28,bool))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCombo",
    values: [
      {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "comboLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "combos",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getComboCost",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isCustom",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCombo",
    values: [
      BigNumberish,
      {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      }
    ]
  ): string;

  decodeFunctionResult(functionFragment: "addCombo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "comboLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "combos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComboCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCustom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCombo",
    data: BytesLike
  ): Result;

  events: {
    "AddCombo(bytes28,uint256,tuple)": EventFragment;
    "UpdateCombo(bytes28,uint256,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCombo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateCombo"): EventFragment;
}

export type AddComboEvent = TypedEvent<
  [
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    }
  ] & {
    to: string;
    level: BigNumber;
    combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    };
  }
>;

export type UpdateComboEvent = TypedEvent<
  [
    string,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    }
  ] & {
    to: string;
    level: BigNumber;
    combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    };
  }
>;

export class IHostingCombos extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IHostingCombosInterface;

  functions: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    comboLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    combos(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ]
    >;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { cost: BigNumber }>;

    isCustom(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCombo(
    combo: {
      bandwidth: BigNumberish;
      storageAmount: BigNumberish;
      buildingTime: BigNumberish;
      pricePerMonth: BigNumberish;
      to: BytesLike;
      isValid: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  comboLength(overrides?: CallOverrides): Promise<BigNumber>;

  combos(
    level: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
      bandwidth: BigNumber;
      storageAmount: BigNumber;
      buildingTime: BigNumber;
      pricePerMonth: BigNumber;
      to: string;
      isValid: boolean;
    }
  >;

  getComboCost(
    level: BigNumberish,
    expiration_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isCustom(level: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  updateCombo(
    level: BigNumberish,
    combo: {
      bandwidth: BigNumberish;
      storageAmount: BigNumberish;
      buildingTime: BigNumberish;
      pricePerMonth: BigNumberish;
      to: BytesLike;
      isValid: boolean;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    comboLength(overrides?: CallOverrides): Promise<BigNumber>;

    combos(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
        bandwidth: BigNumber;
        storageAmount: BigNumber;
        buildingTime: BigNumber;
        pricePerMonth: BigNumber;
        to: string;
        isValid: boolean;
      }
    >;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCustom(level: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddCombo(bytes28,uint256,tuple)"(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;

    AddCombo(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;

    "UpdateCombo(bytes28,uint256,tuple)"(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;

    UpdateCombo(
      to?: BytesLike | null,
      level?: BigNumberish | null,
      combo?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        }
      ],
      {
        to: string;
        level: BigNumber;
        combo: [BigNumber, BigNumber, BigNumber, BigNumber, string, boolean] & {
          bandwidth: BigNumber;
          storageAmount: BigNumber;
          buildingTime: BigNumber;
          pricePerMonth: BigNumber;
          to: string;
          isValid: boolean;
        };
      }
    >;
  };

  estimateGas: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    comboLength(overrides?: CallOverrides): Promise<BigNumber>;

    combos(level: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isCustom(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCombo(
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    comboLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    combos(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getComboCost(
      level: BigNumberish,
      expiration_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isCustom(
      level: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateCombo(
      level: BigNumberish,
      combo: {
        bandwidth: BigNumberish;
        storageAmount: BigNumberish;
        buildingTime: BigNumberish;
        pricePerMonth: BigNumberish;
        to: BytesLike;
        isValid: boolean;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
