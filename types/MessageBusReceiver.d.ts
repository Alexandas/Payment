/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MessageBusReceiverInterface extends ethers.utils.Interface {
  functions: {
    "executeMessage(bytes,(address,address,uint64,bytes32),bytes[],address[],uint256[])": FunctionFragment;
    "executeMessageWithTransfer(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[])": FunctionFragment;
    "executeMessageWithTransferRefund(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[])": FunctionFragment;
    "executedMessages(bytes32)": FunctionFragment;
    "liquidityBridge()": FunctionFragment;
    "owner()": FunctionFragment;
    "pegBridge()": FunctionFragment;
    "pegBridgeV2()": FunctionFragment;
    "pegVault()": FunctionFragment;
    "pegVaultV2()": FunctionFragment;
    "preExecuteMessageGasUsage()": FunctionFragment;
    "refundAndExecuteMsg((bytes,bytes[],address[],uint256[]),(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[]))": FunctionFragment;
    "setLiquidityBridge(address)": FunctionFragment;
    "setPegBridge(address)": FunctionFragment;
    "setPegBridgeV2(address)": FunctionFragment;
    "setPegVault(address)": FunctionFragment;
    "setPegVaultV2(address)": FunctionFragment;
    "setPreExecuteMessageGasUsage(uint256)": FunctionFragment;
    "transferAndExecuteMsg((bytes,bytes[],address[],uint256[]),(bytes,(uint8,address,address,address,uint256,uint64,uint64,bytes32,bytes32),bytes[],address[],uint256[]))": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "executeMessage",
    values: [
      BytesLike,
      {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      BytesLike[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransfer",
    values: [
      BytesLike,
      {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      BytesLike[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeMessageWithTransferRefund",
    values: [
      BytesLike,
      {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      BytesLike[],
      string[],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityBridge",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pegBridge", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pegBridgeV2",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pegVault", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pegVaultV2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "preExecuteMessageGasUsage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundAndExecuteMsg",
    values: [
      {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiquidityBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPegBridge",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPegBridgeV2",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setPegVault", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setPegVaultV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setPreExecuteMessageGasUsage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferAndExecuteMsg",
    values: [
      {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeMessageWithTransferRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegBridge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pegBridgeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pegVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pegVaultV2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preExecuteMessageGasUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundAndExecuteMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiquidityBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegBridgeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPegVaultV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPreExecuteMessageGasUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferAndExecuteMsg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CallReverted(string)": EventFragment;
    "Executed(uint8,bytes32,uint8,address,uint64,bytes32)": EventFragment;
    "LiquidityBridgeUpdated(address)": EventFragment;
    "NeedRetry(uint8,bytes32,uint64,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PegBridgeUpdated(address)": EventFragment;
    "PegBridgeV2Updated(address)": EventFragment;
    "PegVaultUpdated(address)": EventFragment;
    "PegVaultV2Updated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CallReverted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Executed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityBridgeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NeedRetry"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegBridgeUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegBridgeV2Updated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegVaultUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PegVaultV2Updated"): EventFragment;
}

export type CallRevertedEvent = TypedEvent<[string] & { reason: string }>;

export type ExecutedEvent = TypedEvent<
  [number, string, number, string, BigNumber, string] & {
    msgType: number;
    msgId: string;
    status: number;
    receiver: string;
    srcChainId: BigNumber;
    srcTxHash: string;
  }
>;

export type LiquidityBridgeUpdatedEvent = TypedEvent<
  [string] & { liquidityBridge: string }
>;

export type NeedRetryEvent = TypedEvent<
  [number, string, BigNumber, string] & {
    msgType: number;
    msgId: string;
    srcChainId: BigNumber;
    srcTxHash: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PegBridgeUpdatedEvent = TypedEvent<
  [string] & { pegBridge: string }
>;

export type PegBridgeV2UpdatedEvent = TypedEvent<
  [string] & { pegBridgeV2: string }
>;

export type PegVaultUpdatedEvent = TypedEvent<[string] & { pegVault: string }>;

export type PegVaultV2UpdatedEvent = TypedEvent<
  [string] & { pegVaultV2: string }
>;

export class MessageBusReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MessageBusReceiverInterface;

  functions: {
    executeMessage(
      _message: BytesLike,
      _route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[number]>;

    liquidityBridge(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pegBridge(overrides?: CallOverrides): Promise<[string]>;

    pegBridgeV2(overrides?: CallOverrides): Promise<[string]>;

    pegVault(overrides?: CallOverrides): Promise<[string]>;

    pegVaultV2(overrides?: CallOverrides): Promise<[string]>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<[BigNumber]>;

    refundAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  executeMessage(
    _message: BytesLike,
    _route: {
      sender: string;
      receiver: string;
      srcChainId: BigNumberish;
      srcTxHash: BytesLike;
    },
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransfer(
    _message: BytesLike,
    _transfer: {
      t: BigNumberish;
      sender: string;
      receiver: string;
      token: string;
      amount: BigNumberish;
      wdseq: BigNumberish;
      srcChainId: BigNumberish;
      refId: BytesLike;
      srcTxHash: BytesLike;
    },
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeMessageWithTransferRefund(
    _message: BytesLike,
    _transfer: {
      t: BigNumberish;
      sender: string;
      receiver: string;
      token: string;
      amount: BigNumberish;
      wdseq: BigNumberish;
      srcChainId: BigNumberish;
      refId: BytesLike;
      srcTxHash: BytesLike;
    },
    _sigs: BytesLike[],
    _signers: string[],
    _powers: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executedMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  liquidityBridge(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pegBridge(overrides?: CallOverrides): Promise<string>;

  pegBridgeV2(overrides?: CallOverrides): Promise<string>;

  pegVault(overrides?: CallOverrides): Promise<string>;

  pegVaultV2(overrides?: CallOverrides): Promise<string>;

  preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<BigNumber>;

  refundAndExecuteMsg(
    _transferParams: {
      request: BytesLike;
      sigs: BytesLike[];
      signers: string[];
      powers: BigNumberish[];
    },
    _msgParams: {
      message: BytesLike;
      transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      };
      sigs: BytesLike[];
      signers: string[];
      powers: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiquidityBridge(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegBridge(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegBridgeV2(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegVault(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPegVaultV2(
    _addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPreExecuteMessageGasUsage(
    _usage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferAndExecuteMsg(
    _transferParams: {
      request: BytesLike;
      sigs: BytesLike[];
      signers: string[];
      powers: BigNumberish[];
    },
    _msgParams: {
      message: BytesLike;
      transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      };
      sigs: BytesLike[];
      signers: string[];
      powers: BigNumberish[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeMessage(
      _message: BytesLike,
      _route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    executedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<number>;

    liquidityBridge(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pegBridge(overrides?: CallOverrides): Promise<string>;

    pegBridgeV2(overrides?: CallOverrides): Promise<string>;

    pegVault(overrides?: CallOverrides): Promise<string>;

    pegVaultV2(overrides?: CallOverrides): Promise<string>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<BigNumber>;

    refundAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    setLiquidityBridge(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegBridge(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegBridgeV2(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegVault(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPegVaultV2(_addr: string, overrides?: CallOverrides): Promise<void>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CallReverted(string)"(
      reason?: null
    ): TypedEventFilter<[string], { reason: string }>;

    CallReverted(reason?: null): TypedEventFilter<[string], { reason: string }>;

    "Executed(uint8,bytes32,uint8,address,uint64,bytes32)"(
      msgType?: null,
      msgId?: null,
      status?: null,
      receiver?: string | null,
      srcChainId?: null,
      srcTxHash?: null
    ): TypedEventFilter<
      [number, string, number, string, BigNumber, string],
      {
        msgType: number;
        msgId: string;
        status: number;
        receiver: string;
        srcChainId: BigNumber;
        srcTxHash: string;
      }
    >;

    Executed(
      msgType?: null,
      msgId?: null,
      status?: null,
      receiver?: string | null,
      srcChainId?: null,
      srcTxHash?: null
    ): TypedEventFilter<
      [number, string, number, string, BigNumber, string],
      {
        msgType: number;
        msgId: string;
        status: number;
        receiver: string;
        srcChainId: BigNumber;
        srcTxHash: string;
      }
    >;

    "LiquidityBridgeUpdated(address)"(
      liquidityBridge?: null
    ): TypedEventFilter<[string], { liquidityBridge: string }>;

    LiquidityBridgeUpdated(
      liquidityBridge?: null
    ): TypedEventFilter<[string], { liquidityBridge: string }>;

    "NeedRetry(uint8,bytes32,uint64,bytes32)"(
      msgType?: null,
      msgId?: null,
      srcChainId?: null,
      srcTxHash?: null
    ): TypedEventFilter<
      [number, string, BigNumber, string],
      {
        msgType: number;
        msgId: string;
        srcChainId: BigNumber;
        srcTxHash: string;
      }
    >;

    NeedRetry(
      msgType?: null,
      msgId?: null,
      srcChainId?: null,
      srcTxHash?: null
    ): TypedEventFilter<
      [number, string, BigNumber, string],
      {
        msgType: number;
        msgId: string;
        srcChainId: BigNumber;
        srcTxHash: string;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "PegBridgeUpdated(address)"(
      pegBridge?: null
    ): TypedEventFilter<[string], { pegBridge: string }>;

    PegBridgeUpdated(
      pegBridge?: null
    ): TypedEventFilter<[string], { pegBridge: string }>;

    "PegBridgeV2Updated(address)"(
      pegBridgeV2?: null
    ): TypedEventFilter<[string], { pegBridgeV2: string }>;

    PegBridgeV2Updated(
      pegBridgeV2?: null
    ): TypedEventFilter<[string], { pegBridgeV2: string }>;

    "PegVaultUpdated(address)"(
      pegVault?: null
    ): TypedEventFilter<[string], { pegVault: string }>;

    PegVaultUpdated(
      pegVault?: null
    ): TypedEventFilter<[string], { pegVault: string }>;

    "PegVaultV2Updated(address)"(
      pegVaultV2?: null
    ): TypedEventFilter<[string], { pegVaultV2: string }>;

    PegVaultV2Updated(
      pegVaultV2?: null
    ): TypedEventFilter<[string], { pegVaultV2: string }>;
  };

  estimateGas: {
    executeMessage(
      _message: BytesLike,
      _route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidityBridge(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pegBridge(overrides?: CallOverrides): Promise<BigNumber>;

    pegBridgeV2(overrides?: CallOverrides): Promise<BigNumber>;

    pegVault(overrides?: CallOverrides): Promise<BigNumber>;

    pegVaultV2(overrides?: CallOverrides): Promise<BigNumber>;

    preExecuteMessageGasUsage(overrides?: CallOverrides): Promise<BigNumber>;

    refundAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeMessage(
      _message: BytesLike,
      _route: {
        sender: string;
        receiver: string;
        srcChainId: BigNumberish;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransfer(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeMessageWithTransferRefund(
      _message: BytesLike,
      _transfer: {
        t: BigNumberish;
        sender: string;
        receiver: string;
        token: string;
        amount: BigNumberish;
        wdseq: BigNumberish;
        srcChainId: BigNumberish;
        refId: BytesLike;
        srcTxHash: BytesLike;
      },
      _sigs: BytesLike[],
      _signers: string[],
      _powers: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executedMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidityBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegBridge(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegBridgeV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegVault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pegVaultV2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preExecuteMessageGasUsage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    refundAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiquidityBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegBridge(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegBridgeV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegVault(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPegVaultV2(
      _addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPreExecuteMessageGasUsage(
      _usage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferAndExecuteMsg(
      _transferParams: {
        request: BytesLike;
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      _msgParams: {
        message: BytesLike;
        transfer: {
          t: BigNumberish;
          sender: string;
          receiver: string;
          token: string;
          amount: BigNumberish;
          wdseq: BigNumberish;
          srcChainId: BigNumberish;
          refId: BytesLike;
          srcTxHash: BytesLike;
        };
        sigs: BytesLike[];
        signers: string[];
        powers: BigNumberish[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
