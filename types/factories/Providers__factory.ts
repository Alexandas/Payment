/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Providers, ProvidersInterface } from "../Providers";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "AddProvider",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "RemoveProvider",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "addProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "_providers",
        type: "address[]",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "isProvider",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "provider",
        type: "address",
      },
    ],
    name: "removeProvider",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600054610100900460ff1661002c5760005460ff1615610034565b6100346100d5565b61009b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b600054610100900460ff161580156100bd576000805461ffff19166101011790555b80156100cf576000805461ff00191690555b506100ff565b60006100ea306100f060201b6103d81760201c565b15905090565b6001600160a01b03163b151590565b610ccf8061010e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638a355a571161005b5780638a355a57146100fe5780638da5cb5b14610111578063946d92041461012c578063f2fde38b1461013f57600080fd5b8063238a4d1e1461008d57806346e2577a146100b55780636b074a07146100ca578063715018a6146100f6575b600080fd5b6100a061009b3660046109b5565b610152565b60405190151581526020015b60405180910390f35b6100c86100c3366004610a64565b6101d4565b005b6100a06100d8366004610a64565b6001600160a01b031660009081526065602052604090205460ff1690565b6100c861020a565b6100c861010c366004610a64565b610240565b6033546040516001600160a01b0390911681526020016100ac565b6100c861013a366004610a7f565b610273565b6100c861014d366004610a64565b610340565b6001600160a01b03831660009081526065602052604081205460ff166101bf5760405162461bcd60e51b815260206004820152601f60248201527f50726f7669646572733a206e6f6e6578697374656e742070726f76696465720060448201526064015b60405180910390fd5b6101ca8484846103e7565b90505b9392505050565b6033546001600160a01b031633146101fe5760405162461bcd60e51b81526004016101b690610b3f565b61020781610533565b50565b6033546001600160a01b031633146102345760405162461bcd60e51b81526004016101b690610b3f565b61023e60006105f6565b565b6033546001600160a01b0316331461026a5760405162461bcd60e51b81526004016101b690610b3f565b61020781610648565b600054610100900460ff1661028e5760005460ff1615610292565b303b155b6102f55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016101b6565b600054610100900460ff16158015610317576000805461ffff19166101011790555b610320836105f6565b6103298261070d565b801561033b576000805461ff00191690555b505050565b6033546001600160a01b0316331461036a5760405162461bcd60e51b81526004016101b690610b3f565b6001600160a01b0381166103cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016101b6565b610207816105f6565b6001600160a01b03163b151590565b60008060006103f685856107bc565b9092509050600081600481111561040f5761040f610b74565b14801561042d5750856001600160a01b0316826001600160a01b0316145b1561043d576001925050506101cd565b600080876001600160a01b0316631626ba7e60e01b8888604051602401610465929190610bba565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199094169390931790925290516104a39190610bf4565b600060405180830381855afa9150503d80600081146104de576040519150601f19603f3d011682016040523d82523d6000602084013e6104e3565b606091505b50915091508180156104f6575080516020145b801561052757508051630b135d3f60e11b9061051b9083016020908101908401610c10565b6001600160e01b031916145b98975050505050505050565b6001600160a01b03811660009081526065602052604090205460ff161561059c5760405162461bcd60e51b815260206004820152601b60248201527f50726f7669646572733a2070726f76696465722065786973746564000000000060448201526064016101b6565b6001600160a01b038116600081815260656020908152604091829020805460ff1916600117905590519182527f635a554d7028e977037c71e4fefb0d02f19e160c13f01f813a18d362b4605c6d910160405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03811660009081526065602052604090205460ff166106b05760405162461bcd60e51b815260206004820152601f60248201527f50726f7669646572733a206e6f6e6578697374656e742070726f76696465720060448201526064016101b6565b6040516001600160a01b03821681527f8ab468b9f8f57e82f33d9a1742c03768ff84410a4911e8647bfa6418268769049060200160405180910390a16001600160a01b03166000908152606560205260409020805460ff19169055565b600054610100900460ff166107785760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016101b6565b60005b81518110156107b8576107a682828151811061079957610799610c3a565b6020026020010151610533565b806107b081610c66565b91505061077b565b5050565b6000808251604114156107f35760208301516040840151606085015160001a6107e78782858561082c565b94509450505050610825565b82516040141561081d5760208301516040840151610812868383610919565b935093505050610825565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156108635750600090506003610910565b8460ff16601b1415801561087b57508460ff16601c14155b1561088c5750600090506004610910565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156108e0573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661090957600060019250925050610910565b9150600090505b94509492505050565b6000806001600160ff1b0383168161093660ff86901c601b610c81565b90506109448782888561082c565b935093505050935093915050565b80356001600160a01b038116811461096957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109ad576109ad61096e565b604052919050565b6000806000606084860312156109ca57600080fd5b6109d384610952565b92506020808501359250604085013567ffffffffffffffff808211156109f857600080fd5b818701915087601f830112610a0c57600080fd5b813581811115610a1e57610a1e61096e565b610a30601f8201601f19168501610984565b91508082528884828501011115610a4657600080fd5b80848401858401376000848284010152508093505050509250925092565b600060208284031215610a7657600080fd5b6101cd82610952565b60008060408385031215610a9257600080fd5b610a9b83610952565b915060208084013567ffffffffffffffff80821115610ab957600080fd5b818601915086601f830112610acd57600080fd5b813581811115610adf57610adf61096e565b8060051b9150610af0848301610984565b8181529183018401918481019089841115610b0a57600080fd5b938501935b83851015610b2f57610b2085610952565b82529385019390850190610b0f565b8096505050505050509250929050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610ba5578181015183820152602001610b8d565b83811115610bb4576000848401525b50505050565b8281526040602082015260008251806040840152610bdf816060850160208701610b8a565b601f01601f1916919091016060019392505050565b60008251610c06818460208701610b8a565b9190910192915050565b600060208284031215610c2257600080fd5b81516001600160e01b0319811681146101cd57600080fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415610c7a57610c7a610c50565b5060010190565b60008219821115610c9457610c94610c50565b50019056fea264697066735822122018ca8fb130a2aab598787b6c8779cf406570a74d9a9530704871c841a3d0a9b964736f6c63430008090033";

export class Providers__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Providers> {
    return super.deploy(overrides || {}) as Promise<Providers>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Providers {
    return super.attach(address) as Providers;
  }
  connect(signer: Signer): Providers__factory {
    return super.connect(signer) as Providers__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ProvidersInterface {
    return new utils.Interface(_abi) as ProvidersInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Providers {
    return new Contract(address, _abi, signerOrProvider) as Providers;
  }
}
