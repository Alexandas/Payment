/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface BillingInterface extends ethers.utils.Interface {
  functions: {
    "adaptor()": FunctionFragment;
    "balanceOf(address,bytes32)": FunctionFragment;
    "billHash(address,uint64,bytes32,bytes)": FunctionFragment;
    "billTypedHash()": FunctionFragment;
    "decodeBill(bytes)": FunctionFragment;
    "encodeBill((uint256,uint256,tuple[]))": FunctionFragment;
    "hashTypedDataV4ForBill(address,uint64,bytes32,bytes)": FunctionFragment;
    "matchResourceToToken(uint256)": FunctionFragment;
    "matchTokenToResource(uint256)": FunctionFragment;
    "providers()": FunctionFragment;
    "resourceDecimals()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenDecimals()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "adaptor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "billHash",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "billTypedHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decodeBill",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeBill",
    values: [
      {
        expiration: BigNumberish;
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTypedDataV4ForBill",
    values: [string, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "matchResourceToToken",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "matchTokenToResource",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "providers", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resourceDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "adaptor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "billHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "billTypedHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decodeBill", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "encodeBill", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hashTypedDataV4ForBill",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchResourceToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "matchTokenToResource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "providers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resourceDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;

  events: {
    "BillTypedHashUpdated(bytes32)": EventFragment;
    "Billing(address,uint64,bytes32,bytes,uint256)": EventFragment;
    "ProvidersUpdated(address)": EventFragment;
    "ResourceAdaptorUpdated(address)": EventFragment;
    "TokenUpdated(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BillTypedHashUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Billing"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProvidersUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResourceAdaptorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUpdated"): EventFragment;
}

export type BillTypedHashUpdatedEvent = TypedEvent<[string] & { hash: string }>;

export type BillingEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber] & {
    provider: string;
    nonce: BigNumber;
    account: string;
    bill: string;
    amount: BigNumber;
  }
>;

export type ProvidersUpdatedEvent = TypedEvent<
  [string] & { providers: string }
>;

export type ResourceAdaptorUpdatedEvent = TypedEvent<
  [string] & { adaptor: string }
>;

export type TokenUpdatedEvent = TypedEvent<[string] & { token: string }>;

export class Billing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BillingInterface;

  functions: {
    adaptor(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    billTypedHash(overrides?: CallOverrides): Promise<[string]>;

    decodeBill(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          ([
            BigNumber,
            ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[]
          ] & {
            indexBlock: BigNumber;
            entries: ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[];
          })[]
        ] & {
          expiration: BigNumber;
          totalValue: BigNumber;
          payloads: ([
            BigNumber,
            ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[]
          ] & {
            indexBlock: BigNumber;
            entries: ([number, BigNumber] & {
              resourceType: number;
              amount: BigNumber;
            })[];
          })[];
        }
      ]
    >;

    encodeBill(
      bill: {
        expiration: BigNumberish;
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    matchResourceToToken(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    matchTokenToResource(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    providers(overrides?: CallOverrides): Promise<[string]>;

    resourceDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenDecimals(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  adaptor(overrides?: CallOverrides): Promise<string>;

  balanceOf(
    provider: string,
    account: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  billHash(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    bill: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  billTypedHash(overrides?: CallOverrides): Promise<string>;

  decodeBill(
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      ([
        BigNumber,
        ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
      ] & {
        indexBlock: BigNumber;
        entries: ([number, BigNumber] & {
          resourceType: number;
          amount: BigNumber;
        })[];
      })[]
    ] & {
      expiration: BigNumber;
      totalValue: BigNumber;
      payloads: ([
        BigNumber,
        ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
      ] & {
        indexBlock: BigNumber;
        entries: ([number, BigNumber] & {
          resourceType: number;
          amount: BigNumber;
        })[];
      })[];
    }
  >;

  encodeBill(
    bill: {
      expiration: BigNumberish;
      totalValue: BigNumberish;
      payloads: {
        indexBlock: BigNumberish;
        entries: { resourceType: BigNumberish; amount: BigNumberish }[];
      }[];
    },
    overrides?: CallOverrides
  ): Promise<string>;

  hashTypedDataV4ForBill(
    provider: string,
    nonce: BigNumberish,
    account: BytesLike,
    bill: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  matchResourceToToken(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  matchTokenToResource(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  providers(overrides?: CallOverrides): Promise<string>;

  resourceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    adaptor(overrides?: CallOverrides): Promise<string>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    billTypedHash(overrides?: CallOverrides): Promise<string>;

    decodeBill(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        ([
          BigNumber,
          ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
        ] & {
          indexBlock: BigNumber;
          entries: ([number, BigNumber] & {
            resourceType: number;
            amount: BigNumber;
          })[];
        })[]
      ] & {
        expiration: BigNumber;
        totalValue: BigNumber;
        payloads: ([
          BigNumber,
          ([number, BigNumber] & { resourceType: number; amount: BigNumber })[]
        ] & {
          indexBlock: BigNumber;
          entries: ([number, BigNumber] & {
            resourceType: number;
            amount: BigNumber;
          })[];
        })[];
      }
    >;

    encodeBill(
      bill: {
        expiration: BigNumberish;
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    matchResourceToToken(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchTokenToResource(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providers(overrides?: CallOverrides): Promise<string>;

    resourceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BillTypedHashUpdated(bytes32)"(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    BillTypedHashUpdated(
      hash?: null
    ): TypedEventFilter<[string], { hash: string }>;

    "Billing(address,uint64,bytes32,bytes,uint256)"(
      provider?: null,
      nonce?: null,
      account?: null,
      bill?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        bill: string;
        amount: BigNumber;
      }
    >;

    Billing(
      provider?: null,
      nonce?: null,
      account?: null,
      bill?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, string, string, BigNumber],
      {
        provider: string;
        nonce: BigNumber;
        account: string;
        bill: string;
        amount: BigNumber;
      }
    >;

    "ProvidersUpdated(address)"(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    ProvidersUpdated(
      providers?: null
    ): TypedEventFilter<[string], { providers: string }>;

    "ResourceAdaptorUpdated(address)"(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    ResourceAdaptorUpdated(
      adaptor?: null
    ): TypedEventFilter<[string], { adaptor: string }>;

    "TokenUpdated(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenUpdated(token?: null): TypedEventFilter<[string], { token: string }>;
  };

  estimateGas: {
    adaptor(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    billTypedHash(overrides?: CallOverrides): Promise<BigNumber>;

    decodeBill(data: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    encodeBill(
      bill: {
        expiration: BigNumberish;
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchResourceToToken(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    matchTokenToResource(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    providers(overrides?: CallOverrides): Promise<BigNumber>;

    resourceDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    adaptor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      provider: string,
      account: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    billHash(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    billTypedHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decodeBill(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeBill(
      bill: {
        expiration: BigNumberish;
        totalValue: BigNumberish;
        payloads: {
          indexBlock: BigNumberish;
          entries: { resourceType: BigNumberish; amount: BigNumberish }[];
        }[];
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTypedDataV4ForBill(
      provider: string,
      nonce: BigNumberish,
      account: BytesLike,
      bill: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchResourceToToken(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    matchTokenToResource(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    providers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resourceDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
