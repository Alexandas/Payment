/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1271Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271Upgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "OperatorsUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OperatorsUpgradeable__factory>;
    getContractFactory(
      name: "Pauser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pauser__factory>;
    getContractFactory(
      name: "Withdrawable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Withdrawable__factory>;
    getContractFactory(
      name: "MessageReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiver__factory>;
    getContractFactory(
      name: "MessageReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiverUpgradeable__factory>;
    getContractFactory(
      name: "MessageSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSender__factory>;
    getContractFactory(
      name: "MessageSenderUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSenderUpgradeable__factory>;
    getContractFactory(
      name: "IFundWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFundWallet__factory>;
    getContractFactory(
      name: "IMessageSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageSender__factory>;
    getContractFactory(
      name: "IProviders",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProviders__factory>;
    getContractFactory(
      name: "Payment",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Payment__factory>;
    getContractFactory(
      name: "Providers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Providers__factory>;
    getContractFactory(
      name: "AdaptorWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdaptorWrapper__factory>;
    getContractFactory(
      name: "Billing",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Billing__factory>;
    getContractFactory(
      name: "IAdaptorWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAdaptorWrapper__factory>;
    getContractFactory(
      name: "IIPFSStorageController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIPFSStorageController__factory>;
    getContractFactory(
      name: "INormalResourceController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INormalResourceController__factory>;
    getContractFactory(
      name: "IResourceAdaptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IResourceAdaptor__factory>;
    getContractFactory(
      name: "IPFSStorageController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPFSStorageController__factory>;
    getContractFactory(
      name: "ARStorageController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ARStorageController__factory>;
    getContractFactory(
      name: "BandwidthController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BandwidthController__factory>;
    getContractFactory(
      name: "BuildingTimeController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BuildingTimeController__factory>;
    getContractFactory(
      name: "NormalResourceController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NormalResourceController__factory>;
    getContractFactory(
      name: "ResourceAdaptor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResourceAdaptor__factory>;
    getContractFactory(
      name: "FundWallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FundWallet__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IOriginalTokenVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOriginalTokenVault__factory>;
    getContractFactory(
      name: "IOriginalTokenVaultV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOriginalTokenVaultV2__factory>;
    getContractFactory(
      name: "IPeggedTokenBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeggedTokenBridge__factory>;
    getContractFactory(
      name: "IPeggedTokenBridgeV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPeggedTokenBridgeV2__factory>;
    getContractFactory(
      name: "ISigsVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISigsVerifier__factory>;
    getContractFactory(
      name: "MessageBusAddress",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBusAddress__factory>;
    getContractFactory(
      name: "MessageReceiverApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageReceiverApp__factory>;
    getContractFactory(
      name: "MessageSenderApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageSenderApp__factory>;
    getContractFactory(
      name: "IMessageBus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageBus__factory>;
    getContractFactory(
      name: "IMessageReceiverApp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMessageReceiverApp__factory>;
    getContractFactory(
      name: "MessageBus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBus__factory>;
    getContractFactory(
      name: "MessageBusReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBusReceiver__factory>;
    getContractFactory(
      name: "MessageBusSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MessageBusSender__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1271Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271Upgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "OperatorsUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OperatorsUpgradeable>;
    getContractAt(
      name: "Pauser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pauser>;
    getContractAt(
      name: "Withdrawable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Withdrawable>;
    getContractAt(
      name: "MessageReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiver>;
    getContractAt(
      name: "MessageReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiverUpgradeable>;
    getContractAt(
      name: "MessageSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageSender>;
    getContractAt(
      name: "MessageSenderUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageSenderUpgradeable>;
    getContractAt(
      name: "IFundWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFundWallet>;
    getContractAt(
      name: "IMessageSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageSender>;
    getContractAt(
      name: "IProviders",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IProviders>;
    getContractAt(
      name: "Payment",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Payment>;
    getContractAt(
      name: "Providers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Providers>;
    getContractAt(
      name: "AdaptorWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdaptorWrapper>;
    getContractAt(
      name: "Billing",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Billing>;
    getContractAt(
      name: "IAdaptorWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAdaptorWrapper>;
    getContractAt(
      name: "IIPFSStorageController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IIPFSStorageController>;
    getContractAt(
      name: "INormalResourceController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INormalResourceController>;
    getContractAt(
      name: "IResourceAdaptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IResourceAdaptor>;
    getContractAt(
      name: "IPFSStorageController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPFSStorageController>;
    getContractAt(
      name: "ARStorageController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ARStorageController>;
    getContractAt(
      name: "BandwidthController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BandwidthController>;
    getContractAt(
      name: "BuildingTimeController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BuildingTimeController>;
    getContractAt(
      name: "NormalResourceController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NormalResourceController>;
    getContractAt(
      name: "ResourceAdaptor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResourceAdaptor>;
    getContractAt(
      name: "FundWallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FundWallet>;
    getContractAt(
      name: "IBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IOriginalTokenVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOriginalTokenVault>;
    getContractAt(
      name: "IOriginalTokenVaultV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IOriginalTokenVaultV2>;
    getContractAt(
      name: "IPeggedTokenBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeggedTokenBridge>;
    getContractAt(
      name: "IPeggedTokenBridgeV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPeggedTokenBridgeV2>;
    getContractAt(
      name: "ISigsVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISigsVerifier>;
    getContractAt(
      name: "MessageBusAddress",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBusAddress>;
    getContractAt(
      name: "MessageReceiverApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageReceiverApp>;
    getContractAt(
      name: "MessageSenderApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageSenderApp>;
    getContractAt(
      name: "IMessageBus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageBus>;
    getContractAt(
      name: "IMessageReceiverApp",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMessageReceiverApp>;
    getContractAt(
      name: "MessageBus",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBus>;
    getContractAt(
      name: "MessageBusReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBusReceiver>;
    getContractAt(
      name: "MessageBusSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MessageBusSender>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
