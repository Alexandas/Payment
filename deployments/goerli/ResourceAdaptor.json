{
  "address": "0x1141eB47EbCAcf39CDc2e4317Dc8c3C23a96cF0D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "name": "SetPriceAdaptors",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexBlock",
          "type": "uint256"
        }
      ],
      "name": "getAmountAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexBlock",
          "type": "uint256"
        }
      ],
      "name": "getValueAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_indexBlock",
          "type": "uint256"
        }
      ],
      "name": "priceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "name": "setPriceAdaptors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x50a1b2c45909605ba6d115cf7c5775f995791b8a7ba935d4fcc6b64f8075202b",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x1141eB47EbCAcf39CDc2e4317Dc8c3C23a96cF0D",
    "transactionIndex": 2,
    "gasUsed": "1437259",
    "logsBloom": "0x
    "blockHash": "0x32bf9cccc9aee154ec1f808352c9fe9407b7bd05959317744980464f9dbbcff8",
    "transactionHash": "0x50a1b2c45909605ba6d115cf7c5775f995791b8a7ba935d4fcc6b64f8075202b",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 6798056,
        "transactionHash": "0x50a1b2c45909605ba6d115cf7c5775f995791b8a7ba935d4fcc6b64f8075202b",
        "address": "0x1141eB47EbCAcf39CDc2e4317Dc8c3C23a96cF0D",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x32bf9cccc9aee154ec1f808352c9fe9407b7bd05959317744980464f9dbbcff8"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 6798056,
        "transactionHash": "0x50a1b2c45909605ba6d115cf7c5775f995791b8a7ba935d4fcc6b64f8075202b",
        "address": "0x1141eB47EbCAcf39CDc2e4317Dc8c3C23a96cF0D",
        "topics": [
          "0xdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef5"
        ],
        "data": "0x
        "logIndex": 2,
        "blockHash": "0x32bf9cccc9aee154ec1f808352c9fe9407b7bd05959317744980464f9dbbcff8"
      }
    ],
    "blockNumber": 6798056,
    "cumulativeGasUsed": "1529451",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    [
      {
        "resourceType": 1,
        "price": 1
      },
      {
        "resourceType": 2,
        "price": 2
      },
      {
        "resourceType": 3,
        "price": 3
      },
      {
        "resourceType": 4,
        "price": 4
      }
    ]
  ],
  "solcInputHash": "4c6d0a9f2d25bbb837c9b893e47b3460",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"name\":\"SetPriceAdaptors\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexBlock\",\"type\":\"uint256\"}],\"name\":\"getAmountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexBlock\",\"type\":\"uint256\"}],\"name\":\"getValueAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_indexBlock\",\"type\":\"uint256\"}],\"name\":\"priceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"name\":\"setPriceAdaptors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resources/ResourceAdaptor.sol\":\"ResourceAdaptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/resources/ResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\nimport './interfaces/IResourceAdaptor.sol';\\n\\ncontract ResourceAdaptor is IResourceAdaptor, OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\tuint256 public indexBlock;\\n\\n\\t// type -> block -> price\\n\\tmapping(ResourceData.ResourceType => mapping(uint256 => uint256)) internal priceTraces;\\n\\n\\tevent SetPriceAdaptors(PriceAdaptor[] adaptors);\\n\\n\\tconstructor(\\n\\t\\taddress owner,\\n\\t\\tPriceAdaptor[] memory adaptors\\n\\t) initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Price_Adaptors(adaptors);\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\tPriceAdaptor[] memory adaptors\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Price_Adaptors(adaptors);\\n\\t}\\n\\n\\tfunction __Init_Price_Adaptors(PriceAdaptor[] memory adaptors) internal onlyInitializing {\\n\\t\\t_setPriceAdaptors(adaptors);\\n\\t}\\n\\n\\tfunction setPriceAdaptors(PriceAdaptor[] memory adaptors) external onlyOwner {\\n\\t\\t_setPriceAdaptors(adaptors);\\n\\t}\\n\\n\\tfunction _setPriceAdaptors(PriceAdaptor[] memory adaptors) internal {\\n\\t\\trequire(adaptors.length > 0, 'ResourceAdaptor: invalid pricers');\\n\\t\\tfor (uint256 i = 0; i < adaptors.length; i++) {\\n\\t\\t\\tuint256 _price = adaptors[i].price;\\n\\t\\t\\trequire(_price > 0, 'ResourceAdaptor: invalid price');\\n\\t\\t\\tpriceTraces[adaptors[i].resourceType][block.number] = _price;\\n\\t\\t}\\n\\t\\tindexBlock = block.number;\\n\\t\\temit SetPriceAdaptors(adaptors);\\n\\t}\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) public view override returns (uint256) {\\n\\t\\trequire(priceTraces[resourceType][_indexBlock] != 0, 'ResourceAdaptor: invalid indexBlock');\\n\\t\\treturn priceTraces[resourceType][_indexBlock];\\n\\t}\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) public view override returns (uint256) {\\n\\t\\treturn priceAt(resourceType, _indexBlock).mul(amount);\\n\\t}\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) public view override returns (uint256) {\\n\\t\\treturn value.div(priceAt(resourceType, _indexBlock));\\n\\t}\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) public view override returns (uint256) {\\n\\t\\treturn priceAt(resourceType, indexBlock);\\n\\t}\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) public view override returns (uint256) {\\n\\t\\treturn priceOf(resourceType).mul(amount);\\n\\t}\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) public view override returns (uint256) {\\n\\t\\treturn value.div(priceOf(resourceType));\\n\\t}\\n}\\n\",\"keccak256\":\"0xbe799e4e1ff7f5125df482778a2be11554b89e89d1748a4704699669bc8c53c2\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\ninterface IResourceAdaptor {\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf60bb837ce179f97f69cc642ef0b775cc58c952824869b89df3d29729133b738\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002132380380620021328339818101604052810190620000379190620006fd565b600060019054906101000a900460ff16620000615760008054906101000a900460ff161562000072565b620000716200015260201b60201c565b5b620000b4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620000ab90620007ea565b60405180910390fd5b60008060019054906101000a900460ff16159050801562000105576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b62000116836200017060201b60201c565b62000127826200023660201b60201c565b8015620001495760008060016101000a81548160ff0219169083151502179055505b50505062000bd9565b60006200016a306200029c60201b6200072e1760201c565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff1662000288576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200027f9062000882565b60405180910390fd5b6200029981620002bf60201b60201c565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600081511162000306576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002fd90620008f4565b60405180910390fd5b60005b81518110156200040a5760008282815181106200032b576200032a62000916565b5b6020026020010151602001519050600081116200037f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003769062000995565b60405180910390fd5b80606660008585815181106200039a576200039962000916565b5b6020026020010151600001516004811115620003bb57620003ba620009b7565b5b6004811115620003d057620003cf620009b7565b5b8152602001908152602001600020600043815260200190815260200160002081905550508080620004019062000a15565b91505062000309565b50436065819055507fdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef58160405162000443919062000bb5565b60405180910390a150565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200048f8262000462565b9050919050565b620004a18162000482565b8114620004ad57600080fd5b50565b600081519050620004c18162000496565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200051782620004cc565b810181811067ffffffffffffffff82111715620005395762000538620004dd565b5b80604052505050565b60006200054e6200044e565b90506200055c82826200050c565b919050565b600067ffffffffffffffff8211156200057f576200057e620004dd565b5b602082029050602081019050919050565b600080fd5b600080fd5b60058110620005a857600080fd5b50565b600081519050620005bc816200059a565b92915050565b6000819050919050565b620005d781620005c2565b8114620005e357600080fd5b50565b600081519050620005f781620005cc565b92915050565b60006040828403121562000616576200061562000595565b5b62000622604062000542565b905060006200063484828501620005ab565b60008301525060206200064a84828501620005e6565b60208301525092915050565b60006200066d620006678462000561565b62000542565b9050808382526020820190506040840283018581111562000693576200069262000590565b5b835b81811015620006c05780620006ab8882620005fd565b84526020840193505060408101905062000695565b5050509392505050565b600082601f830112620006e257620006e1620004c7565b5b8151620006f484826020860162000656565b91505092915050565b6000806040838503121562000717576200071662000458565b5b60006200072785828601620004b0565b925050602083015167ffffffffffffffff8111156200074b576200074a6200045d565b5b6200075985828601620006ca565b9150509250929050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000620007d2602e8362000763565b9150620007df8262000774565b604082019050919050565b600060208201905081810360008301526200080581620007c3565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006200086a602b8362000763565b915062000877826200080c565b604082019050919050565b600060208201905081810360008301526200089d816200085b565b9050919050565b7f5265736f7572636541646170746f723a20696e76616c69642070726963657273600082015250565b6000620008dc60208362000763565b9150620008e982620008a4565b602082019050919050565b600060208201905081810360008301526200090f81620008cd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265736f7572636541646170746f723a20696e76616c69642070726963650000600082015250565b60006200097d601e8362000763565b91506200098a8262000945565b602082019050919050565b60006020820190508181036000830152620009b0816200096e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000a2282620005c2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562000a585762000a57620009e6565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6005811062000aa35762000aa2620009b7565b5b50565b600081905062000ab68262000a8f565b919050565b600062000ac88262000aa6565b9050919050565b62000ada8162000abb565b82525050565b62000aeb81620005c2565b82525050565b60408201600082015162000b09600085018262000acf565b50602082015162000b1e602085018262000ae0565b50505050565b600062000b32838362000af1565b60408301905092915050565b6000602082019050919050565b600062000b588262000a63565b62000b64818562000a6e565b935062000b718362000a7f565b8060005b8381101562000ba857815162000b8c888262000b24565b975062000b998362000b3e565b92505060018101905062000b75565b5085935050505092915050565b6000602082019050818103600083015262000bd1818462000b4b565b905092915050565b6115498062000be96000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639434023a116100715780639434023a14610179578063a6170b51146101a9578063a97f2772146101d9578063a9fd520f14610209578063c9a72f3914610239578063f2fde38b14610257576100b4565b806327b54756146100b95780632e4a1a23146100d557806368fbeb18146100f1578063715018a6146101215780638da5cb5b1461012b578063912397c314610149575b600080fd5b6100d360048036038101906100ce9190610c4b565b610273565b005b6100ef60048036038101906100ea9190610cf2565b6102fb565b005b61010b60048036038101906101069190610d4e565b6103f3565b6040516101189190610d9d565b60405180910390f35b610129610418565b005b6101336104a0565b6040516101409190610dc7565b60405180910390f35b610163600480360381019061015e9190610de2565b6104ca565b6040516101709190610d9d565b60405180910390f35b610193600480360381019061018e9190610d4e565b6104df565b6040516101a09190610d9d565b60405180910390f35b6101c360048036038101906101be9190610d4e565b6105bd565b6040516101d09190610d9d565b60405180910390f35b6101f360048036038101906101ee9190610e0f565b6105e2565b6040516102009190610d9d565b60405180910390f35b610223600480360381019061021e9190610e0f565b610609565b6040516102309190610d9d565b60405180910390f35b610241610630565b60405161024e9190610d9d565b60405180910390f35b610271600480360381019061026c9190610e62565b610636565b005b61027b610751565b73ffffffffffffffffffffffffffffffffffffffff166102996104a0565b73ffffffffffffffffffffffffffffffffffffffff16146102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690610eec565b60405180910390fd5b6102f881610759565b50565b600060019054906101000a900460ff166103235760008054906101000a900460ff161561032c565b61032b6108d0565b5b61036b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036290610f7e565b60405180910390fd5b60008060019054906101000a900460ff1615905080156103bb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6103c4836108e1565b6103cd826109a7565b80156103ee5760008060016101000a81548160ff0219169083151502179055505b505050565b600061041082610402856104ca565b610a0290919063ffffffff16565b905092915050565b610420610751565b73ffffffffffffffffffffffffffffffffffffffff1661043e6104a0565b73ffffffffffffffffffffffffffffffffffffffff1614610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90610eec565b60405180910390fd5b61049e60006108e1565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006104d8826065546104df565b9050919050565b600080606660008560048111156104f9576104f8610f9e565b5b600481111561050b5761050a610f9e565b5b8152602001908152602001600020600084815260200190815260200160002054141561056c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105639061103f565b60405180910390fd5b6066600084600481111561058357610582610f9e565b5b600481111561059557610594610f9e565b5b8152602001908152602001600020600083815260200190815260200160002054905092915050565b60006105da6105cb846104ca565b83610a1890919063ffffffff16565b905092915050565b6000610600836105f286856104df565b610a0290919063ffffffff16565b90509392505050565b600061062761061885846104df565b84610a1890919063ffffffff16565b90509392505050565b60655481565b61063e610751565b73ffffffffffffffffffffffffffffffffffffffff1661065c6104a0565b73ffffffffffffffffffffffffffffffffffffffff16146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990610eec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610719906110d1565b60405180910390fd5b61072b816108e1565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b600081511161079d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061113d565b60405180910390fd5b60005b815181101561088e5760008282815181106107be576107bd61115d565b5b60200260200101516020015190506000811161080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906111d8565b60405180910390fd5b80606660008585815181106108275761082661115d565b5b602002602001015160000151600481111561084557610844610f9e565b5b600481111561085757610856610f9e565b5b815260200190815260200160002060004381526020019081526020016000208190555050808061088690611227565b9150506107a0565b50436065819055507fdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef5816040516108c591906113a5565b60405180910390a150565b60006108db3061072e565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff166109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90611439565b60405180910390fd5b6109ff81610759565b50565b60008183610a109190611459565b905092915050565b60008183610a2691906114e2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a9082610a47565b810181811067ffffffffffffffff82111715610aaf57610aae610a58565b5b80604052505050565b6000610ac2610a2e565b9050610ace8282610a87565b919050565b600067ffffffffffffffff821115610aee57610aed610a58565b5b602082029050602081019050919050565b600080fd5b600080fd5b60058110610b1657600080fd5b50565b600081359050610b2881610b09565b92915050565b6000819050919050565b610b4181610b2e565b8114610b4c57600080fd5b50565b600081359050610b5e81610b38565b92915050565b600060408284031215610b7a57610b79610b04565b5b610b846040610ab8565b90506000610b9484828501610b19565b6000830152506020610ba884828501610b4f565b60208301525092915050565b6000610bc7610bc284610ad3565b610ab8565b90508083825260208201905060408402830185811115610bea57610be9610aff565b5b835b81811015610c135780610bff8882610b64565b845260208401935050604081019050610bec565b5050509392505050565b600082601f830112610c3257610c31610a42565b5b8135610c42848260208601610bb4565b91505092915050565b600060208284031215610c6157610c60610a38565b5b600082013567ffffffffffffffff811115610c7f57610c7e610a3d565b5b610c8b84828501610c1d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cbf82610c94565b9050919050565b610ccf81610cb4565b8114610cda57600080fd5b50565b600081359050610cec81610cc6565b92915050565b60008060408385031215610d0957610d08610a38565b5b6000610d1785828601610cdd565b925050602083013567ffffffffffffffff811115610d3857610d37610a3d565b5b610d4485828601610c1d565b9150509250929050565b60008060408385031215610d6557610d64610a38565b5b6000610d7385828601610b19565b9250506020610d8485828601610b4f565b9150509250929050565b610d9781610b2e565b82525050565b6000602082019050610db26000830184610d8e565b92915050565b610dc181610cb4565b82525050565b6000602082019050610ddc6000830184610db8565b92915050565b600060208284031215610df857610df7610a38565b5b6000610e0684828501610b19565b91505092915050565b600080600060608486031215610e2857610e27610a38565b5b6000610e3686828701610b19565b9350506020610e4786828701610b4f565b9250506040610e5886828701610b4f565b9150509250925092565b600060208284031215610e7857610e77610a38565b5b6000610e8684828501610cdd565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ed6602083610e8f565b9150610ee182610ea0565b602082019050919050565b60006020820190508181036000830152610f0581610ec9565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610f68602e83610e8f565b9150610f7382610f0c565b604082019050919050565b60006020820190508181036000830152610f9781610f5b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f5265736f7572636541646170746f723a20696e76616c696420696e646578426c60008201527f6f636b0000000000000000000000000000000000000000000000000000000000602082015250565b6000611029602383610e8f565b915061103482610fcd565b604082019050919050565b600060208201905081810360008301526110588161101c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006110bb602683610e8f565b91506110c68261105f565b604082019050919050565b600060208201905081810360008301526110ea816110ae565b9050919050565b7f5265736f7572636541646170746f723a20696e76616c69642070726963657273600082015250565b6000611127602083610e8f565b9150611132826110f1565b602082019050919050565b600060208201905081810360008301526111568161111a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265736f7572636541646170746f723a20696e76616c69642070726963650000600082015250565b60006111c2601e83610e8f565b91506111cd8261118c565b602082019050919050565b600060208201905081810360008301526111f1816111b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123282610b2e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611265576112646111f8565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600581106112ad576112ac610f9e565b5b50565b60008190506112be8261129c565b919050565b60006112ce826112b0565b9050919050565b6112de816112c3565b82525050565b6112ed81610b2e565b82525050565b60408201600082015161130960008501826112d5565b50602082015161131c60208501826112e4565b50505050565b600061132e83836112f3565b60408301905092915050565b6000602082019050919050565b600061135282611270565b61135c818561127b565b93506113678361128c565b8060005b8381101561139857815161137f8882611322565b975061138a8361133a565b92505060018101905061136b565b5085935050505092915050565b600060208201905081810360008301526113bf8184611347565b905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611423602b83610e8f565b915061142e826113c7565b604082019050919050565b6000602082019050818103600083015261145281611416565b9050919050565b600061146482610b2e565b915061146f83610b2e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114a8576114a76111f8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ed82610b2e565b91506114f883610b2e565b925082611508576115076114b3565b5b82820490509291505056fea264697066735822122039b6fb0d9768495bf1104c76ad1f0c159e6b88eaf3c330cbd17c6b9ad8758c3464736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639434023a116100715780639434023a14610179578063a6170b51146101a9578063a97f2772146101d9578063a9fd520f14610209578063c9a72f3914610239578063f2fde38b14610257576100b4565b806327b54756146100b95780632e4a1a23146100d557806368fbeb18146100f1578063715018a6146101215780638da5cb5b1461012b578063912397c314610149575b600080fd5b6100d360048036038101906100ce9190610c4b565b610273565b005b6100ef60048036038101906100ea9190610cf2565b6102fb565b005b61010b60048036038101906101069190610d4e565b6103f3565b6040516101189190610d9d565b60405180910390f35b610129610418565b005b6101336104a0565b6040516101409190610dc7565b60405180910390f35b610163600480360381019061015e9190610de2565b6104ca565b6040516101709190610d9d565b60405180910390f35b610193600480360381019061018e9190610d4e565b6104df565b6040516101a09190610d9d565b60405180910390f35b6101c360048036038101906101be9190610d4e565b6105bd565b6040516101d09190610d9d565b60405180910390f35b6101f360048036038101906101ee9190610e0f565b6105e2565b6040516102009190610d9d565b60405180910390f35b610223600480360381019061021e9190610e0f565b610609565b6040516102309190610d9d565b60405180910390f35b610241610630565b60405161024e9190610d9d565b60405180910390f35b610271600480360381019061026c9190610e62565b610636565b005b61027b610751565b73ffffffffffffffffffffffffffffffffffffffff166102996104a0565b73ffffffffffffffffffffffffffffffffffffffff16146102ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e690610eec565b60405180910390fd5b6102f881610759565b50565b600060019054906101000a900460ff166103235760008054906101000a900460ff161561032c565b61032b6108d0565b5b61036b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036290610f7e565b60405180910390fd5b60008060019054906101000a900460ff1615905080156103bb576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6103c4836108e1565b6103cd826109a7565b80156103ee5760008060016101000a81548160ff0219169083151502179055505b505050565b600061041082610402856104ca565b610a0290919063ffffffff16565b905092915050565b610420610751565b73ffffffffffffffffffffffffffffffffffffffff1661043e6104a0565b73ffffffffffffffffffffffffffffffffffffffff1614610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048b90610eec565b60405180910390fd5b61049e60006108e1565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006104d8826065546104df565b9050919050565b600080606660008560048111156104f9576104f8610f9e565b5b600481111561050b5761050a610f9e565b5b8152602001908152602001600020600084815260200190815260200160002054141561056c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105639061103f565b60405180910390fd5b6066600084600481111561058357610582610f9e565b5b600481111561059557610594610f9e565b5b8152602001908152602001600020600083815260200190815260200160002054905092915050565b60006105da6105cb846104ca565b83610a1890919063ffffffff16565b905092915050565b6000610600836105f286856104df565b610a0290919063ffffffff16565b90509392505050565b600061062761061885846104df565b84610a1890919063ffffffff16565b90509392505050565b60655481565b61063e610751565b73ffffffffffffffffffffffffffffffffffffffff1661065c6104a0565b73ffffffffffffffffffffffffffffffffffffffff16146106b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a990610eec565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610722576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610719906110d1565b60405180910390fd5b61072b816108e1565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600033905090565b600081511161079d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107949061113d565b60405180910390fd5b60005b815181101561088e5760008282815181106107be576107bd61115d565b5b60200260200101516020015190506000811161080f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610806906111d8565b60405180910390fd5b80606660008585815181106108275761082661115d565b5b602002602001015160000151600481111561084557610844610f9e565b5b600481111561085757610856610f9e565b5b815260200190815260200160002060004381526020019081526020016000208190555050808061088690611227565b9150506107a0565b50436065819055507fdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef5816040516108c591906113a5565b60405180910390a150565b60006108db3061072e565b15905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600060019054906101000a900460ff166109f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ed90611439565b60405180910390fd5b6109ff81610759565b50565b60008183610a109190611459565b905092915050565b60008183610a2691906114e2565b905092915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a9082610a47565b810181811067ffffffffffffffff82111715610aaf57610aae610a58565b5b80604052505050565b6000610ac2610a2e565b9050610ace8282610a87565b919050565b600067ffffffffffffffff821115610aee57610aed610a58565b5b602082029050602081019050919050565b600080fd5b600080fd5b60058110610b1657600080fd5b50565b600081359050610b2881610b09565b92915050565b6000819050919050565b610b4181610b2e565b8114610b4c57600080fd5b50565b600081359050610b5e81610b38565b92915050565b600060408284031215610b7a57610b79610b04565b5b610b846040610ab8565b90506000610b9484828501610b19565b6000830152506020610ba884828501610b4f565b60208301525092915050565b6000610bc7610bc284610ad3565b610ab8565b90508083825260208201905060408402830185811115610bea57610be9610aff565b5b835b81811015610c135780610bff8882610b64565b845260208401935050604081019050610bec565b5050509392505050565b600082601f830112610c3257610c31610a42565b5b8135610c42848260208601610bb4565b91505092915050565b600060208284031215610c6157610c60610a38565b5b600082013567ffffffffffffffff811115610c7f57610c7e610a3d565b5b610c8b84828501610c1d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cbf82610c94565b9050919050565b610ccf81610cb4565b8114610cda57600080fd5b50565b600081359050610cec81610cc6565b92915050565b60008060408385031215610d0957610d08610a38565b5b6000610d1785828601610cdd565b925050602083013567ffffffffffffffff811115610d3857610d37610a3d565b5b610d4485828601610c1d565b9150509250929050565b60008060408385031215610d6557610d64610a38565b5b6000610d7385828601610b19565b9250506020610d8485828601610b4f565b9150509250929050565b610d9781610b2e565b82525050565b6000602082019050610db26000830184610d8e565b92915050565b610dc181610cb4565b82525050565b6000602082019050610ddc6000830184610db8565b92915050565b600060208284031215610df857610df7610a38565b5b6000610e0684828501610b19565b91505092915050565b600080600060608486031215610e2857610e27610a38565b5b6000610e3686828701610b19565b9350506020610e4786828701610b4f565b9250506040610e5886828701610b4f565b9150509250925092565b600060208284031215610e7857610e77610a38565b5b6000610e8684828501610cdd565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ed6602083610e8f565b9150610ee182610ea0565b602082019050919050565b60006020820190508181036000830152610f0581610ec9565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610f68602e83610e8f565b9150610f7382610f0c565b604082019050919050565b60006020820190508181036000830152610f9781610f5b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f5265736f7572636541646170746f723a20696e76616c696420696e646578426c60008201527f6f636b0000000000000000000000000000000000000000000000000000000000602082015250565b6000611029602383610e8f565b915061103482610fcd565b604082019050919050565b600060208201905081810360008301526110588161101c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006110bb602683610e8f565b91506110c68261105f565b604082019050919050565b600060208201905081810360008301526110ea816110ae565b9050919050565b7f5265736f7572636541646170746f723a20696e76616c69642070726963657273600082015250565b6000611127602083610e8f565b9150611132826110f1565b602082019050919050565b600060208201905081810360008301526111568161111a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265736f7572636541646170746f723a20696e76616c69642070726963650000600082015250565b60006111c2601e83610e8f565b91506111cd8261118c565b602082019050919050565b600060208201905081810360008301526111f1816111b5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061123282610b2e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611265576112646111f8565b5b600182019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600581106112ad576112ac610f9e565b5b50565b60008190506112be8261129c565b919050565b60006112ce826112b0565b9050919050565b6112de816112c3565b82525050565b6112ed81610b2e565b82525050565b60408201600082015161130960008501826112d5565b50602082015161131c60208501826112e4565b50505050565b600061132e83836112f3565b60408301905092915050565b6000602082019050919050565b600061135282611270565b61135c818561127b565b93506113678361128c565b8060005b8381101561139857815161137f8882611322565b975061138a8361133a565b92505060018101905061136b565b5085935050505092915050565b600060208201905081810360008301526113bf8184611347565b905092915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000611423602b83610e8f565b915061142e826113c7565b604082019050919050565b6000602082019050818103600083015261145281611416565b9050919050565b600061146482610b2e565b915061146f83610b2e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114a8576114a76111f8565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006114ed82610b2e565b91506114f883610b2e565b925082611508576115076114b3565b5b82820490509291505056fea264697066735822122039b6fb0d9768495bf1104c76ad1f0c159e6b88eaf3c330cbd17c6b9ad8758c3464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 970,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6334,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "indexBlock",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 6341,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "priceTraces",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_enum(ResourceType)3822,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ResourceType)3822": {
        "encoding": "inplace",
        "label": "enum ResourceData.ResourceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(ResourceType)3822,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(ResourceType)3822",
        "label": "mapping(enum ResourceData.ResourceType => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}