{
  "address": "0xDBcDE3dBD6094e227DBd626d6ab2136DC6A5409C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IMessageSender",
          "name": "_messageSender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IMessageSender",
          "name": "messageSender",
          "type": "address"
        }
      ],
      "name": "MessageSenderUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IMessageSender",
          "name": "_messageSender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "Init_Payment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "name": "calcFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "name": "encodeMessage",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IMessageSender",
          "name": "_messageSender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageSender",
      "outputs": [
        {
          "internalType": "contract IMessageSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        },
        {
          "internalType": "uint32",
          "name": "maxSlippage",
          "type": "uint32"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "transferId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IMessageSender",
          "name": "_messageSender",
          "type": "address"
        }
      ],
      "name": "setMessageSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb71ee8577156253b6a85fdfb2e48b9594c3ad5c6cf8bc5cbe966f082bb1fc944",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xDBcDE3dBD6094e227DBd626d6ab2136DC6A5409C",
    "transactionIndex": 1,
    "gasUsed": "1946562",
    "logsBloom": "0x
    "blockHash": "0x0ee9af03a8583575cacaa2fe22476819013138938d06e1638dd2cae35c72abea",
    "transactionHash": "0xb71ee8577156253b6a85fdfb2e48b9594c3ad5c6cf8bc5cbe966f082bb1fc944",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 6844747,
        "transactionHash": "0xb71ee8577156253b6a85fdfb2e48b9594c3ad5c6cf8bc5cbe966f082bb1fc944",
        "address": "0xDBcDE3dBD6094e227DBd626d6ab2136DC6A5409C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0ee9af03a8583575cacaa2fe22476819013138938d06e1638dd2cae35c72abea"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6844747,
        "transactionHash": "0xb71ee8577156253b6a85fdfb2e48b9594c3ad5c6cf8bc5cbe966f082bb1fc944",
        "address": "0xDBcDE3dBD6094e227DBd626d6ab2136DC6A5409C",
        "topics": [
          "0x6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8"
        ],
        "data": "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
        "logIndex": 1,
        "blockHash": "0x0ee9af03a8583575cacaa2fe22476819013138938d06e1638dd2cae35c72abea"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6844747,
        "transactionHash": "0xb71ee8577156253b6a85fdfb2e48b9594c3ad5c6cf8bc5cbe966f082bb1fc944",
        "address": "0xDBcDE3dBD6094e227DBd626d6ab2136DC6A5409C",
        "topics": [
          "0xd3a626089875a97be3c9702fd526ab6e28bd30904def789b36b301f03afadcaf"
        ],
        "data": "0x0000000000000000000000005e338e7a9c3be53a3e494bb753104c480feede7d",
        "logIndex": 2,
        "blockHash": "0x0ee9af03a8583575cacaa2fe22476819013138938d06e1638dd2cae35c72abea"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 6844747,
        "transactionHash": "0xb71ee8577156253b6a85fdfb2e48b9594c3ad5c6cf8bc5cbe966f082bb1fc944",
        "address": "0xDBcDE3dBD6094e227DBd626d6ab2136DC6A5409C",
        "topics": [
          "0x5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e30"
        ],
        "data": "0x000000000000000000000000f4b2cbc3ba04c478f0dc824f4806ac39982dce73",
        "logIndex": 3,
        "blockHash": "0x0ee9af03a8583575cacaa2fe22476819013138938d06e1638dd2cae35c72abea"
      }
    ],
    "blockNumber": 6844747,
    "cumulativeGasUsed": "2335648",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "0x5e338E7a9C3Be53a3e494Bb753104C480FeeDe7D",
    "0xf4b2cbc3ba04c478f0dc824f4806ac39982dce73"
  ],
  "solcInputHash": "55cb943cd24eeac199a015c55188fb4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IMessageSender\",\"name\":\"_messageSender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IMessageSender\",\"name\":\"messageSender\",\"type\":\"address\"}],\"name\":\"MessageSenderUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IMessageSender\",\"name\":\"_messageSender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"Init_Payment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"name\":\"calcFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"name\":\"encodeMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IMessageSender\",\"name\":\"_messageSender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageSender\",\"outputs\":[{\"internalType\":\"contract IMessageSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"internalType\":\"uint32\",\"name\":\"maxSlippage\",\"type\":\"uint32\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"transferId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IMessageSender\",\"name\":\"_messageSender\",\"type\":\"address\"}],\"name\":\"setMessageSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/SrcChainPayment.sol\":\"SrcChainPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\tfunction withdraw(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\tfunction withdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'Payment: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x795ed1ca0da5ab6d318f00a9752a7dbef4173466e34e4cca658496d0675cc7f1\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\tmapping(address => bool) public pausers;\\n\\n\\tevent PauserAdded(address account);\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: Caller is not pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: Account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: Account is not pauser');\\n\\t\\tpausers[account] = false;\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc389407247a71425c067105ba1dbf04816e70f648e85f374a69b1cb72c40cb4c\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMessageSender.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport 'sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol';\\n\\ninterface IMessageSender {\\n\\tfunction receiver() external view returns (address);\\n\\n\\tfunction dstChainId() external view returns (uint64);\\n\\n\\tfunction calcFee(bytes memory message) external view returns (uint256);\\n\\n\\tfunction messageId(\\n\\t\\tMsgDataTypes.RouteInfo calldata route,\\n\\t\\tuint64 dstChainId,\\n\\t\\tbytes calldata message\\n\\t) external view returns (bytes32);\\n\\n\\tfunction sendMessageWithTransfer(\\n\\t\\taddress token,\\n\\t\\tuint256 amount,\\n\\t\\tuint64 nonce,\\n\\t\\tuint32 maxSlippage,\\n\\t\\tbytes memory message,\\n\\t\\tMsgDataTypes.BridgeSendType bridgeSendType\\n\\t) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6f5d62e799b080b34d1fee7b7be3999fa28bd1ce2d223f426f559b2c7269a148\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/payment/ResourPayloadTool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\nimport '../libraries/ResourceData.sol';\\n\\nabstract contract ResourPayloadTool {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tfunction _convertSourceChainPayloads(uint256 dstAmount, ResourceData.Payload[] memory payloads) internal pure returns (ResourceData.Payload[] memory newPayloads) {\\n\\t\\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payload length');\\n\\t\\tuint256 total = totalValue(payloads);\\n\\t\\trequire(total > 0, 'ResourPayloadTool: zero values');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\trequire(payloads[i].values.length > 0, 'ResourPayloadTool: invalid value length');\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tpayloads[i].values[j] = payloads[i].values[j].mul(dstAmount).div(total);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn payloads;\\n\\t}\\n\\n\\tfunction totalValue(ResourceData.Payload[] memory payloads) public pure returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payloads length');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tvalue = value.add(payloads[i].values[j]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x3d47b32c00baedbe7198b911baf686b320d901cf2e4472999f98418caa28ba9f\",\"license\":\"GPL-3.0-only\"},\"contracts/payment/SrcChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\nimport '../interfaces/IMessageSender.sol';\\nimport '../access/OwnerWithdrawable.sol';\\nimport '../access/Pauser.sol';\\nimport './ResourPayloadTool.sol';\\n\\ncontract SrcChainPayment is OwnerWithdrawable, Pauser, ResourPayloadTool, ReentrancyGuardUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tIMessageSender public messageSender;\\n\\n\\tIERC20Upgradeable public token;\\n\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\tevent MessageSenderUpdated(IMessageSender messageSender);\\n\\n\\tevent Paid(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.Payload[] payloads,\\n\\t\\tuint32 maxSlippage\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIMessageSender _messageSender,\\n\\t\\tIERC20Upgradeable token\\n\\t) initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Message_Sender(_messageSender);\\n\\t\\t__Init_Token(token);\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIMessageSender _messageSender,\\n\\t\\tIERC20Upgradeable token\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Message_Sender(_messageSender);\\n\\t\\t__Init_Token(token);\\n\\t}\\n\\n\\tfunction Init_Payment(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIMessageSender _messageSender,\\n\\t\\tIERC20Upgradeable token\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Message_Sender(_messageSender);\\n\\t\\t__Init_Token(token);\\n\\t}\\n\\n\\tfunction __Init_Message_Sender(IMessageSender _messageSender) internal onlyInitializing {\\n\\t\\t_setMessageSender(_messageSender);\\n\\t}\\n\\n\\tfunction __Init_Token(IERC20Upgradeable token) internal onlyInitializing {\\n\\t\\t_setToken(token);\\n\\t}\\n\\n\\tfunction pay(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.Payload[] memory payloads,\\n\\t\\tuint32 maxSlippage\\n\\t) external payable whenNotPaused nonReentrant returns (bytes32 transferId) {\\n\\t\\tuint256 value = totalValue(payloads);\\n\\t\\tvalue = matchTokenDecimals(value);\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), value);\\n\\t\\ttoken.safeApprove(address(messageSender), value);\\n\\t\\ttransferId = messageSender.sendMessageWithTransfer{ value: msg.value }(\\n\\t\\t\\taddress(token),\\n\\t\\t\\tvalue,\\n\\t\\t\\tnonce,\\n\\t\\t\\tmaxSlippage,\\n\\t\\t\\tencodeMessage(provider, nonce, account, payloads),\\n\\t\\t\\tMsgDataTypes.BridgeSendType.Liquidity\\n\\t\\t);\\n\\t\\ttoken.safeApprove(address(messageSender), 0);\\n\\n\\t\\temit Paid(provider, nonce, account, payloads, maxSlippage);\\n\\t}\\n\\n\\tfunction setMessageSender(IMessageSender _messageSender) external onlyOwner {\\n\\t\\t_setMessageSender(_messageSender);\\n\\t}\\n\\n\\tfunction _setMessageSender(IMessageSender _messageSender) internal {\\n\\t\\tmessageSender = _messageSender;\\n\\t\\temit MessageSenderUpdated(_messageSender);\\n\\t}\\n\\n\\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction _setToken(IERC20Upgradeable _token) internal {\\n\\t\\ttoken = _token;\\n\\t\\temit TokenUpdated(token);\\n\\t}\\n\\n\\tfunction matchTokenDecimals(uint256 amount) internal view returns (uint256 value) {\\n\\t\\treturn amount.div(10**12);\\n\\t}\\n\\n\\tfunction calcFee(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) public view returns(uint256 value) {\\n\\t\\treturn messageSender.calcFee(encodeMessage(provider, nonce, account, payloads));\\n\\t}\\n\\n\\tfunction encodeMessage(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) public pure returns (bytes memory) {\\n\\t\\treturn abi.encode(provider, nonce, account, payloads);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x82f23d9ad21a5f821b6574946d4d03c841f128e945408401e75e6c6f7c9a7c57\",\"license\":\"UNLICENSE\"},\"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4ac9e6e5be92e3e58adbcab75ef765458d37fd4908d764477a0f32a96f9ecbba\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200254a3803806200254a8339810160408190526200003491620003a4565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b620000f0565b620000835760405162461bcd60e51b81526004016200007a9062000460565b60405180910390fd5b600054610100900460ff16158015620000a6576000805461ffff19166101011790555b620000b1856200010e565b620000bc8462000160565b620000c78362000198565b620000d282620001cd565b8015620000e5576000805461ff00191690555b505050505062000586565b600062000108306200020260201b62000afe1760201c565b15905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200018a5760405162461bcd60e51b81526004016200007a90620004bb565b620001958162000211565b50565b600054610100900460ff16620001c25760405162461bcd60e51b81526004016200007a90620004bb565b6200019581620002ad565b600054610100900460ff16620001f75760405162461bcd60e51b81526004016200007a90620004bb565b6200019581620002fa565b6001600160a01b03163b151590565b6001600160a01b03811660009081526097602052604090205460ff16156200024d5760405162461bcd60e51b81526004016200007a906200050c565b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890620002a29083906200052f565b60405180910390a150565b60ca80546001600160a01b0319166001600160a01b0383161790556040517fd3a626089875a97be3c9702fd526ab6e28bd30904def789b36b301f03afadcaf90620002a290839062000576565b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e3091620002a29162000576565b60006001600160a01b0382165b92915050565b620003668162000348565b81146200019557600080fd5b805162000355816200035b565b6000620003558262000348565b62000366816200037f565b805162000355816200038c565b60008060008060808587031215620003bf57620003bf600080fd5b6000620003cd878762000372565b9450506020620003e08782880162000372565b9350506040620003f38782880162000397565b9250506060620004068782880162000397565b91505092959194509250565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b60208082528101620003558162000412565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915062000459565b60208082528101620003558162000472565b602181526000602082017f5061757365723a204163636f756e7420697320616c72656164792070617573658152603960f91b6020820152915062000459565b602080825281016200035581620004cd565b620005298162000348565b82525050565b602081016200035582846200051e565b60006001600160a01b03821662000355565b600062000355826200053f565b6000620003558262000551565b62000529816200055e565b602081016200035582846200056b565b611fb480620005966000396000f3fe6080604052600436106101405760003560e01c806380f51c12116100b6578063bc67f8321161006f578063bc67f8321461036c578063d67bdd251461038c578063d9caed12146103b9578063f2fde38b146103d9578063f8c8765e14610237578063fc0c546a146103f957600080fd5b806380f51c12146102a157806382dc1ec4146102d15780638456cb59146102f15780638c22ea5d146103065780638da5cb5b14610326578063bb3711111461034c57600080fd5b80635b45197d116101085780635b45197d146101f25780635c975abb1461021f57806363d80461146102375780636b2c0f55146102575780636ef8d66d14610277578063715018a61461028c57600080fd5b806307b18bde14610145578063144fa6d714610167578063201ce97c146101875780633f4ba83a146101b057806346fbf68e146101c5575b600080fd5b34801561015157600080fd5b50610165610160366004611151565b610419565b005b34801561017357600080fd5b506101656101823660046111ad565b6104d0565b61019a610195366004611416565b610506565b6040516101a791906114b1565b60405180910390f35b3480156101bc57600080fd5b506101656106b5565b3480156101d157600080fd5b506101e56101e03660046114bf565b6106e4565b6040516101a791906114e8565b3480156101fe57600080fd5b5061021261020d3660046114f6565b610702565b6040516101a791906115d3565b34801561022b57600080fd5b5060655460ff166101e5565b34801561024357600080fd5b506101656102523660046115e4565b610735565b34801561026357600080fd5b506101656102723660046114bf565b6107cf565b34801561028357600080fd5b50610165610802565b34801561029857600080fd5b5061016561080b565b3480156102ad57600080fd5b506101e56102bc3660046114bf565b60976020526000908152604090205460ff1681565b3480156102dd57600080fd5b506101656102ec3660046114bf565b61083f565b3480156102fd57600080fd5b50610165610872565b34801561031257600080fd5b5061019a6103213660046114f6565b61089f565b34801561033257600080fd5b506033546001600160a01b03166040516101a79190611645565b34801561035857600080fd5b5061019a610367366004611653565b610934565b34801561037857600080fd5b506101656103873660046111ad565b610a01565b34801561039857600080fd5b5060ca546103ac906001600160a01b031681565b6040516101a791906116a2565b3480156103c557600080fd5b506101656103d43660046116b0565b610a34565b3480156103e557600080fd5b506101656103f43660046114bf565b610aa5565b34801561040557600080fd5b5060cb546103ac906001600160a01b031681565b6033546001600160a01b0316331461044c5760405162461bcd60e51b815260040161044390611735565b60405180910390fd5b6040516000906001600160a01b0384169083156108fc0290849084818181858888f193505050509050806104925760405162461bcd60e51b81526004016104439061178a565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e482783836040516104c392919061179a565b60405180910390a1505050565b6033546001600160a01b031633146104fa5760405162461bcd60e51b815260040161044390611735565b61050381610b0d565b50565b600061051460655460ff1690565b156105315760405162461bcd60e51b8152600401610443906117dc565b600260985414156105545760405162461bcd60e51b815260040161044390611820565b6002609855600061056484610934565b905061056f81610b64565b60cb5490915061058a906001600160a01b0316333084610b7b565b60ca5460cb546105a7916001600160a01b03918216911683610bd9565b60ca5460cb546001600160a01b039182169163f718845391349116848a886105d18e838e8e610702565b60016040518863ffffffff1660e01b81526004016105f496959493929190611890565b6020604051808303818588803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061064691906118f1565b60ca5460cb54919350610667916001600160a01b0390811691166000610bd9565b7fc223cf6bda1a6d43dd56cef5d4b95b1a593f38f295323e7e59a30522bf49c1cf878787878760405161069e959493929190611a3b565b60405180910390a150600160985595945050505050565b6106be336106e4565b6106da5760405162461bcd60e51b815260040161044390611ac2565b6106e2610ca1565b565b6001600160a01b031660009081526097602052604090205460ff1690565b60608484848460405160200161071b9493929190611ad2565b60405160208183030381529060405290505b949350505050565b600054610100900460ff166107505760005460ff1615610754565b303b155b6107705760405162461bcd60e51b815260040161044390611b57565b600054610100900460ff16158015610792576000805461ffff19166101011790555b61079b85610d07565b6107a484610d59565b6107ad83610d80565b6107b682610da7565b80156107c8576000805461ff00191690555b5050505050565b6033546001600160a01b031633146107f95760405162461bcd60e51b815260040161044390611735565b61050381610dce565b6106e233610dce565b6033546001600160a01b031633146108355760405162461bcd60e51b815260040161044390611735565b6106e26000610d07565b6033546001600160a01b031633146108695760405162461bcd60e51b815260040161044390611735565b61050381610e43565b61087b336106e4565b6108975760405162461bcd60e51b815260040161044390611ac2565b6106e2610ebc565b60ca546000906001600160a01b0316635335dca26108bf87878787610702565b6040518263ffffffff1660e01b81526004016108db91906115d3565b60206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906118f1565b95945050505050565b6000808251116109565760405162461bcd60e51b815260040161044390611bae565b60005b82518110156109fb5760005b83828151811061097757610977611bbe565b602002602001015160200151518110156109e8576109d48483815181106109a0576109a0611bbe565b60200260200101516020015182815181106109bd576109bd611bbe565b602002602001015184610f1490919063ffffffff16565b9250806109e081611bea565b915050610965565b50806109f381611bea565b915050610959565b50919050565b6033546001600160a01b03163314610a2b5760405162461bcd60e51b815260040161044390611735565b61050381610f27565b6033546001600160a01b03163314610a5e5760405162461bcd60e51b815260040161044390611735565b610a726001600160a01b0384168383610f72565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63988383836040516104c393929190611c05565b6033546001600160a01b03163314610acf5760405162461bcd60e51b815260040161044390611735565b6001600160a01b038116610af55760405162461bcd60e51b815260040161044390611c70565b61050381610d07565b6001600160a01b03163b151590565b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e3091610b59916116a2565b60405180910390a150565b6000610b758264e8d4a51000610f91565b92915050565b610bd3846323b872dd60e01b858585604051602401610b9c93929190611c80565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f9d565b50505050565b801580610c615750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c0f9030908690600401611c8e565b60206040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906118f1565b155b610c7d5760405162461bcd60e51b815260040161044390611cfc565b610c9c8363095ea7b360e01b8484604051602401610b9c929190611d0c565b505050565b60655460ff16610cc35760405162461bcd60e51b815260040161044390611d45565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610cfd9190611645565b60405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166108695760405162461bcd60e51b815260040161044390611d9d565b600054610100900460ff16610a2b5760405162461bcd60e51b815260040161044390611d9d565b600054610100900460ff166104fa5760405162461bcd60e51b815260040161044390611d9d565b610dd7816106e4565b610df35760405162461bcd60e51b815260040161044390611de1565b6001600160a01b03811660009081526097602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90610b59908390611645565b610e4c816106e4565b15610e695760405162461bcd60e51b815260040161044390611e2f565b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890610b59908390611645565b60655460ff1615610edf5760405162461bcd60e51b8152600401610443906117dc565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610cf03390565b6000610f208284611e3f565b9392505050565b60ca80546001600160a01b0319166001600160a01b0383161790556040517fd3a626089875a97be3c9702fd526ab6e28bd30904def789b36b301f03afadcaf90610b599083906116a2565b610c9c8363a9059cbb60e01b8484604051602401610b9c929190611d0c565b6000610f208284611e6d565b6000610ff2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661102c9092919063ffffffff16565b805190915015610c9c57808060200190518101906110109190611e94565b610c9c5760405162461bcd60e51b815260040161044390611efc565b606061072d8484600085856001600160a01b0385163b61105e5760405162461bcd60e51b815260040161044390611f40565b600080866001600160a01b0316858760405161107a9190611f72565b60006040518083038185875af1925050503d80600081146110b7576040519150601f19603f3d011682016040523d82523d6000602084013e6110bc565b606091505b50915091506110cc8282866110d7565b979650505050505050565b606083156110e6575081610f20565b8251156110f65782518084602001fd5b8160405162461bcd60e51b815260040161044391906115d3565b60006001600160a01b038216610b75565b61112a81611110565b811461050357600080fd5b8035610b7581611121565b8061112a565b8035610b7581611140565b6000806040838503121561116757611167600080fd5b60006111738585611135565b925050602061118485828601611146565b9150509250929050565b6000610b7582611110565b61112a8161118e565b8035610b7581611199565b6000602082840312156111c2576111c2600080fd5b600061072d84846111a2565b67ffffffffffffffff811661112a565b8035610b75816111ce565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611225576112256111e9565b6040525050565b600061123760405190565b905061124382826111ff565b919050565b600067ffffffffffffffff821115611262576112626111e9565b5060209081020190565b6005811061050357600080fd5b8035610b758161126c565b600061129761129284611248565b61122c565b838152905060208082019084028301858111156112b6576112b6600080fd5b835b818110156112da57806112cb8882611146565b845250602092830192016112b8565b5050509392505050565b600082601f8301126112f8576112f8600080fd5b813561072d848260208601611284565b60006040828403121561131d5761131d600080fd5b611327604061122c565b905060006113358484611279565b825250602082013567ffffffffffffffff81111561135557611355600080fd5b611361848285016112e4565b60208301525092915050565b600061137b61129284611248565b8381529050602080820190840283018581111561139a5761139a600080fd5b835b818110156112da57803567ffffffffffffffff8111156113be576113be600080fd5b8086016113cb8982611308565b855250506020928301920161139c565b600082601f8301126113ef576113ef600080fd5b813561072d84826020860161136d565b63ffffffff811661112a565b8035610b75816113ff565b600080600080600060a0868803121561143157611431600080fd5b600061143d8888611135565b955050602061144e888289016111de565b945050604061145f88828901611146565b935050606086013567ffffffffffffffff81111561147f5761147f600080fd5b61148b888289016113db565b925050608061149c8882890161140b565b9150509295509295909350565b805b82525050565b60208101610b7582846114a9565b6000602082840312156114d4576114d4600080fd5b600061072d8484611135565b8015156114ab565b60208101610b7582846114e0565b6000806000806080858703121561150f5761150f600080fd5b600061151b8787611135565b945050602061152c878288016111de565b935050604061153d87828801611146565b925050606085013567ffffffffffffffff81111561155d5761155d600080fd5b611569878288016113db565b91505092959194509250565b60005b83811015611590578181015183820152602001611578565b83811115610bd35750506000910152565b60006115ab825190565b8084526020840193506115c2818560208601611575565b601f01601f19169290920192915050565b60208082528101610f2081846115a1565b600080600080608085870312156115fd576115fd600080fd5b60006116098787611135565b945050602061161a87828801611135565b935050604061162b878288016111a2565b9250506060611569878288016111a2565b6114ab81611110565b60208101610b75828461163c565b60006020828403121561166857611668600080fd5b813567ffffffffffffffff81111561168257611682600080fd5b61072d848285016113db565b6000610b758261118e565b6114ab8161168e565b60208101610b758284611699565b6000806000606084860312156116c8576116c8600080fd5b60006116d486866111a2565b93505060206116e586828701611135565b92505060406116f686828701611146565b9150509250925092565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610b7581611700565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b602082015291505b5060400190565b60208082528101610b7581611745565b604081016117a88285611699565b610f2060208301846114a9565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b8152915061172e565b60208082528101610b75816117b5565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152915061172e565b60208082528101610b75816117ec565b67ffffffffffffffff81166114ab565b63ffffffff81166114ab565b634e487b7160e01b600052602160045260246000fd5b600781106105035761050361184c565b8061124381611862565b6000610b7582611872565b6114ab8161187c565b60c0810161189e828961163c565b6118ab60208301886114a9565b6118b86040830187611830565b6118c56060830186611840565b81810360808301526118d781856115a1565b90506110cc60a0830184611887565b8051610b7581611140565b60006020828403121561190657611906600080fd5b600061072d84846118e6565b600581106105035761050361184c565b8061124381611912565b6000610b7582611922565b6114ab8161192c565b600061194c83836114a9565b505060200190565b600061195e825190565b80845260209384019383018060005b838110156119925781516119818882611940565b97506020830192505060010161196d565b509495945050505050565b805160009060408401906119b18582611937565b506020830151848203602086015261092b8282611954565b6000610f20838361199d565b60006119df825190565b808452602084019350836020820285016119f98560200190565b8060005b85811015611a2e5784840389528151611a1685826119c9565b94506020830160209a909a01999250506001016119fd565b5091979650505050505050565b60a08101611a49828861163c565b611a566020830187611830565b611a6360408301866114a9565b8181036060830152611a7581856119d5565b9050611a846080830184611840565b9695505050505050565b601c81526000602082017f5061757365723a2043616c6c6572206973206e6f7420706175736572000000008152915061172e565b60208082528101610b7581611a8e565b60808101611ae0828761163c565b611aed6020830186611830565b611afa60408301856114a9565b8181036060830152611a8481846119d5565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611783565b60208082528101610b7581611b0c565b602a81526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c6964207061796c6f8152690c2c8e640d8cadccee8d60b31b60208201529150611783565b60208082528101610b7581611b67565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bfe57611bfe611bd4565b5060010190565b60608101611c138286611699565b611c20602083018561163c565b61072d60408301846114a9565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611783565b60208082528101610b7581611c2d565b60608101611c13828661163c565b60408101611c9c828561163c565b610f20602083018461163c565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60208201529150611783565b60208082528101610b7581611ca9565b604081016117a8828561163c565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b8152915061172e565b60208082528101610b7581611d1a565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611783565b60208082528101610b7581611d55565b601d81526000602082017f5061757365723a204163636f756e74206973206e6f74207061757365720000008152915061172e565b60208082528101610b7581611dad565b602181526000602082017f5061757365723a204163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150611783565b60208082528101610b7581611df1565b60008219821115611e5257611e52611bd4565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611e7c57611e7c611e57565b500490565b80151561112a565b8051610b7581611e81565b600060208284031215611ea957611ea9600080fd5b600061072d8484611e89565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150611783565b60208082528101610b7581611eb5565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152915061172e565b60208082528101610b7581611f0c565b6000611f5a825190565b611f68818560208601611575565b9290920192915050565b6000610f208284611f5056fea2646970667358221220e6627316c891229f6f7fe54884454f164a7af60bb4f74d70398872ff9c81880864736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806380f51c12116100b6578063bc67f8321161006f578063bc67f8321461036c578063d67bdd251461038c578063d9caed12146103b9578063f2fde38b146103d9578063f8c8765e14610237578063fc0c546a146103f957600080fd5b806380f51c12146102a157806382dc1ec4146102d15780638456cb59146102f15780638c22ea5d146103065780638da5cb5b14610326578063bb3711111461034c57600080fd5b80635b45197d116101085780635b45197d146101f25780635c975abb1461021f57806363d80461146102375780636b2c0f55146102575780636ef8d66d14610277578063715018a61461028c57600080fd5b806307b18bde14610145578063144fa6d714610167578063201ce97c146101875780633f4ba83a146101b057806346fbf68e146101c5575b600080fd5b34801561015157600080fd5b50610165610160366004611151565b610419565b005b34801561017357600080fd5b506101656101823660046111ad565b6104d0565b61019a610195366004611416565b610506565b6040516101a791906114b1565b60405180910390f35b3480156101bc57600080fd5b506101656106b5565b3480156101d157600080fd5b506101e56101e03660046114bf565b6106e4565b6040516101a791906114e8565b3480156101fe57600080fd5b5061021261020d3660046114f6565b610702565b6040516101a791906115d3565b34801561022b57600080fd5b5060655460ff166101e5565b34801561024357600080fd5b506101656102523660046115e4565b610735565b34801561026357600080fd5b506101656102723660046114bf565b6107cf565b34801561028357600080fd5b50610165610802565b34801561029857600080fd5b5061016561080b565b3480156102ad57600080fd5b506101e56102bc3660046114bf565b60976020526000908152604090205460ff1681565b3480156102dd57600080fd5b506101656102ec3660046114bf565b61083f565b3480156102fd57600080fd5b50610165610872565b34801561031257600080fd5b5061019a6103213660046114f6565b61089f565b34801561033257600080fd5b506033546001600160a01b03166040516101a79190611645565b34801561035857600080fd5b5061019a610367366004611653565b610934565b34801561037857600080fd5b506101656103873660046111ad565b610a01565b34801561039857600080fd5b5060ca546103ac906001600160a01b031681565b6040516101a791906116a2565b3480156103c557600080fd5b506101656103d43660046116b0565b610a34565b3480156103e557600080fd5b506101656103f43660046114bf565b610aa5565b34801561040557600080fd5b5060cb546103ac906001600160a01b031681565b6033546001600160a01b0316331461044c5760405162461bcd60e51b815260040161044390611735565b60405180910390fd5b6040516000906001600160a01b0384169083156108fc0290849084818181858888f193505050509050806104925760405162461bcd60e51b81526004016104439061178a565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e482783836040516104c392919061179a565b60405180910390a1505050565b6033546001600160a01b031633146104fa5760405162461bcd60e51b815260040161044390611735565b61050381610b0d565b50565b600061051460655460ff1690565b156105315760405162461bcd60e51b8152600401610443906117dc565b600260985414156105545760405162461bcd60e51b815260040161044390611820565b6002609855600061056484610934565b905061056f81610b64565b60cb5490915061058a906001600160a01b0316333084610b7b565b60ca5460cb546105a7916001600160a01b03918216911683610bd9565b60ca5460cb546001600160a01b039182169163f718845391349116848a886105d18e838e8e610702565b60016040518863ffffffff1660e01b81526004016105f496959493929190611890565b6020604051808303818588803b15801561060d57600080fd5b505af1158015610621573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061064691906118f1565b60ca5460cb54919350610667916001600160a01b0390811691166000610bd9565b7fc223cf6bda1a6d43dd56cef5d4b95b1a593f38f295323e7e59a30522bf49c1cf878787878760405161069e959493929190611a3b565b60405180910390a150600160985595945050505050565b6106be336106e4565b6106da5760405162461bcd60e51b815260040161044390611ac2565b6106e2610ca1565b565b6001600160a01b031660009081526097602052604090205460ff1690565b60608484848460405160200161071b9493929190611ad2565b60405160208183030381529060405290505b949350505050565b600054610100900460ff166107505760005460ff1615610754565b303b155b6107705760405162461bcd60e51b815260040161044390611b57565b600054610100900460ff16158015610792576000805461ffff19166101011790555b61079b85610d07565b6107a484610d59565b6107ad83610d80565b6107b682610da7565b80156107c8576000805461ff00191690555b5050505050565b6033546001600160a01b031633146107f95760405162461bcd60e51b815260040161044390611735565b61050381610dce565b6106e233610dce565b6033546001600160a01b031633146108355760405162461bcd60e51b815260040161044390611735565b6106e26000610d07565b6033546001600160a01b031633146108695760405162461bcd60e51b815260040161044390611735565b61050381610e43565b61087b336106e4565b6108975760405162461bcd60e51b815260040161044390611ac2565b6106e2610ebc565b60ca546000906001600160a01b0316635335dca26108bf87878787610702565b6040518263ffffffff1660e01b81526004016108db91906115d3565b60206040518083038186803b1580156108f357600080fd5b505afa158015610907573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092b91906118f1565b95945050505050565b6000808251116109565760405162461bcd60e51b815260040161044390611bae565b60005b82518110156109fb5760005b83828151811061097757610977611bbe565b602002602001015160200151518110156109e8576109d48483815181106109a0576109a0611bbe565b60200260200101516020015182815181106109bd576109bd611bbe565b602002602001015184610f1490919063ffffffff16565b9250806109e081611bea565b915050610965565b50806109f381611bea565b915050610959565b50919050565b6033546001600160a01b03163314610a2b5760405162461bcd60e51b815260040161044390611735565b61050381610f27565b6033546001600160a01b03163314610a5e5760405162461bcd60e51b815260040161044390611735565b610a726001600160a01b0384168383610f72565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63988383836040516104c393929190611c05565b6033546001600160a01b03163314610acf5760405162461bcd60e51b815260040161044390611735565b6001600160a01b038116610af55760405162461bcd60e51b815260040161044390611c70565b61050381610d07565b6001600160a01b03163b151590565b60cb80546001600160a01b0319166001600160a01b0383169081179091556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e3091610b59916116a2565b60405180910390a150565b6000610b758264e8d4a51000610f91565b92915050565b610bd3846323b872dd60e01b858585604051602401610b9c93929190611c80565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610f9d565b50505050565b801580610c615750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610c0f9030908690600401611c8e565b60206040518083038186803b158015610c2757600080fd5b505afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906118f1565b155b610c7d5760405162461bcd60e51b815260040161044390611cfc565b610c9c8363095ea7b360e01b8484604051602401610b9c929190611d0c565b505050565b60655460ff16610cc35760405162461bcd60e51b815260040161044390611d45565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610cfd9190611645565b60405180910390a1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166108695760405162461bcd60e51b815260040161044390611d9d565b600054610100900460ff16610a2b5760405162461bcd60e51b815260040161044390611d9d565b600054610100900460ff166104fa5760405162461bcd60e51b815260040161044390611d9d565b610dd7816106e4565b610df35760405162461bcd60e51b815260040161044390611de1565b6001600160a01b03811660009081526097602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90610b59908390611645565b610e4c816106e4565b15610e695760405162461bcd60e51b815260040161044390611e2f565b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890610b59908390611645565b60655460ff1615610edf5760405162461bcd60e51b8152600401610443906117dc565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610cf03390565b6000610f208284611e3f565b9392505050565b60ca80546001600160a01b0319166001600160a01b0383161790556040517fd3a626089875a97be3c9702fd526ab6e28bd30904def789b36b301f03afadcaf90610b599083906116a2565b610c9c8363a9059cbb60e01b8484604051602401610b9c929190611d0c565b6000610f208284611e6d565b6000610ff2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661102c9092919063ffffffff16565b805190915015610c9c57808060200190518101906110109190611e94565b610c9c5760405162461bcd60e51b815260040161044390611efc565b606061072d8484600085856001600160a01b0385163b61105e5760405162461bcd60e51b815260040161044390611f40565b600080866001600160a01b0316858760405161107a9190611f72565b60006040518083038185875af1925050503d80600081146110b7576040519150601f19603f3d011682016040523d82523d6000602084013e6110bc565b606091505b50915091506110cc8282866110d7565b979650505050505050565b606083156110e6575081610f20565b8251156110f65782518084602001fd5b8160405162461bcd60e51b815260040161044391906115d3565b60006001600160a01b038216610b75565b61112a81611110565b811461050357600080fd5b8035610b7581611121565b8061112a565b8035610b7581611140565b6000806040838503121561116757611167600080fd5b60006111738585611135565b925050602061118485828601611146565b9150509250929050565b6000610b7582611110565b61112a8161118e565b8035610b7581611199565b6000602082840312156111c2576111c2600080fd5b600061072d84846111a2565b67ffffffffffffffff811661112a565b8035610b75816111ce565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611225576112256111e9565b6040525050565b600061123760405190565b905061124382826111ff565b919050565b600067ffffffffffffffff821115611262576112626111e9565b5060209081020190565b6005811061050357600080fd5b8035610b758161126c565b600061129761129284611248565b61122c565b838152905060208082019084028301858111156112b6576112b6600080fd5b835b818110156112da57806112cb8882611146565b845250602092830192016112b8565b5050509392505050565b600082601f8301126112f8576112f8600080fd5b813561072d848260208601611284565b60006040828403121561131d5761131d600080fd5b611327604061122c565b905060006113358484611279565b825250602082013567ffffffffffffffff81111561135557611355600080fd5b611361848285016112e4565b60208301525092915050565b600061137b61129284611248565b8381529050602080820190840283018581111561139a5761139a600080fd5b835b818110156112da57803567ffffffffffffffff8111156113be576113be600080fd5b8086016113cb8982611308565b855250506020928301920161139c565b600082601f8301126113ef576113ef600080fd5b813561072d84826020860161136d565b63ffffffff811661112a565b8035610b75816113ff565b600080600080600060a0868803121561143157611431600080fd5b600061143d8888611135565b955050602061144e888289016111de565b945050604061145f88828901611146565b935050606086013567ffffffffffffffff81111561147f5761147f600080fd5b61148b888289016113db565b925050608061149c8882890161140b565b9150509295509295909350565b805b82525050565b60208101610b7582846114a9565b6000602082840312156114d4576114d4600080fd5b600061072d8484611135565b8015156114ab565b60208101610b7582846114e0565b6000806000806080858703121561150f5761150f600080fd5b600061151b8787611135565b945050602061152c878288016111de565b935050604061153d87828801611146565b925050606085013567ffffffffffffffff81111561155d5761155d600080fd5b611569878288016113db565b91505092959194509250565b60005b83811015611590578181015183820152602001611578565b83811115610bd35750506000910152565b60006115ab825190565b8084526020840193506115c2818560208601611575565b601f01601f19169290920192915050565b60208082528101610f2081846115a1565b600080600080608085870312156115fd576115fd600080fd5b60006116098787611135565b945050602061161a87828801611135565b935050604061162b878288016111a2565b9250506060611569878288016111a2565b6114ab81611110565b60208101610b75828461163c565b60006020828403121561166857611668600080fd5b813567ffffffffffffffff81111561168257611682600080fd5b61072d848285016113db565b6000610b758261118e565b6114ab8161168e565b60208101610b758284611699565b6000806000606084860312156116c8576116c8600080fd5b60006116d486866111a2565b93505060206116e586828701611135565b92505060406116f686828701611146565b9150509250925092565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610b7581611700565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b602082015291505b5060400190565b60208082528101610b7581611745565b604081016117a88285611699565b610f2060208301846114a9565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b8152915061172e565b60208082528101610b75816117b5565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c008152915061172e565b60208082528101610b75816117ec565b67ffffffffffffffff81166114ab565b63ffffffff81166114ab565b634e487b7160e01b600052602160045260246000fd5b600781106105035761050361184c565b8061124381611862565b6000610b7582611872565b6114ab8161187c565b60c0810161189e828961163c565b6118ab60208301886114a9565b6118b86040830187611830565b6118c56060830186611840565b81810360808301526118d781856115a1565b90506110cc60a0830184611887565b8051610b7581611140565b60006020828403121561190657611906600080fd5b600061072d84846118e6565b600581106105035761050361184c565b8061124381611912565b6000610b7582611922565b6114ab8161192c565b600061194c83836114a9565b505060200190565b600061195e825190565b80845260209384019383018060005b838110156119925781516119818882611940565b97506020830192505060010161196d565b509495945050505050565b805160009060408401906119b18582611937565b506020830151848203602086015261092b8282611954565b6000610f20838361199d565b60006119df825190565b808452602084019350836020820285016119f98560200190565b8060005b85811015611a2e5784840389528151611a1685826119c9565b94506020830160209a909a01999250506001016119fd565b5091979650505050505050565b60a08101611a49828861163c565b611a566020830187611830565b611a6360408301866114a9565b8181036060830152611a7581856119d5565b9050611a846080830184611840565b9695505050505050565b601c81526000602082017f5061757365723a2043616c6c6572206973206e6f7420706175736572000000008152915061172e565b60208082528101610b7581611a8e565b60808101611ae0828761163c565b611aed6020830186611830565b611afa60408301856114a9565b8181036060830152611a8481846119d5565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611783565b60208082528101610b7581611b0c565b602a81526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c6964207061796c6f8152690c2c8e640d8cadccee8d60b31b60208201529150611783565b60208082528101610b7581611b67565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611bfe57611bfe611bd4565b5060010190565b60608101611c138286611699565b611c20602083018561163c565b61072d60408301846114a9565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611783565b60208082528101610b7581611c2d565b60608101611c13828661163c565b60408101611c9c828561163c565b610f20602083018461163c565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60208201529150611783565b60208082528101610b7581611ca9565b604081016117a8828561163c565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b8152915061172e565b60208082528101610b7581611d1a565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611783565b60208082528101610b7581611d55565b601d81526000602082017f5061757365723a204163636f756e74206973206e6f74207061757365720000008152915061172e565b60208082528101610b7581611dad565b602181526000602082017f5061757365723a204163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150611783565b60208082528101610b7581611df1565b60008219821115611e5257611e52611bd4565b500190565b634e487b7160e01b600052601260045260246000fd5b600082611e7c57611e7c611e57565b500490565b80151561112a565b8051610b7581611e81565b600060208284031215611ea957611ea9600080fd5b600061072d8484611e89565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150611783565b60208082528101610b7581611eb5565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000008152915061172e565b60208082528101610b7581611f0c565b6000611f5a825190565b611f68818560208601611575565b9290920192915050565b6000610f208284611f5056fea2646970667358221220e6627316c891229f6f7fe54884454f164a7af60bb4f74d70398872ff9c81880864736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1608,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 235,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 324,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4249,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "pausers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 339,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "_status",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "153",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6763,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "messageSender",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IMessageSender)4690"
      },
      {
        "astId": 6766,
        "contract": "contracts/payment/SrcChainPayment.sol:SrcChainPayment",
        "label": "token",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IERC20Upgradeable)1075"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)1075": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IMessageSender)4690": {
        "encoding": "inplace",
        "label": "contract IMessageSender",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}