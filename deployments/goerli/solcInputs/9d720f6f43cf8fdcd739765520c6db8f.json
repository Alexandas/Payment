{
  "language": "Solidity",
  "sources": {
    "contracts/access/OwnerWithdrawable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\n\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\n\n\tevent NativeWithdrawal(address to, uint256 value);\n\n\tfunction withdraw(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\n\t\ttoken.safeTransfer(to, value);\n\t\temit Withdrawal(token, to, value);\n\t}\n\n\tfunction withdrawNative(address payable to, uint256 value) external onlyOwner {\n\t\tbool success = to.send(value);\n\t\trequire(success, 'Payment: withdraw native token failed');\n\t\temit NativeWithdrawal(to, value);\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/wallets/FundWallet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\n\nimport './Billing.sol';\nimport '../interfaces/IFundWallet.sol';\nimport '../access/OwnerWithdrawable.sol';\n\ncontract FundWallet is IFundWallet, Billing, OwnerWithdrawable, ReentrancyGuardUpgradeable {\n\tusing SafeMathUpgradeable for uint256;\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tmapping(address => mapping(bytes32 => Wallet)) internal wallets;\n\n\tmapping(address => mapping(uint64 => bool)) internal nonces;\n\n\tmodifier onlyWalletOwner(address provider, bytes32 account) {\n\t\trequire(wallets[provider][account].owner == msg.sender, 'FundWallet: caller is not wallet owner');\n\t\t_;\n\t}\n\n\tmodifier nonNonce(address provider, uint64 nonce) {\n\t\trequire(!nonces[provider][nonce], 'FundWallet: invalid nonce');\n\t\t_;\n\t}\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIProviders _providers,\n\t\tIERC20Upgradeable _token\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Providers(_providers);\n\t\t__Init_Token(_token);\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIProviders _providers,\n\t\tIERC20Upgradeable _token\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Providers(_providers);\n\t\t__Init_Token(_token);\n\t}\n\n\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\n\t\t_setToken(_token);\n\t}\n\n\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\n\t\t_setToken(_token);\n\t}\n\n\tfunction charge(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\taddress owner,\n\t\tbytes32 account,\n\t\tuint256 amount,\n\t\tbytes memory signature\n\t) external override nonNonce(provider, nonce) whenNotPaused nonReentrant {\n\t\tbytes32 hash = keccak256(abi.encodePacked(provider, nonce, owner, account, amount));\n\t\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\n\t\tif (wallets[provider][account].owner == address(0)) {\n\t\t\twallets[provider][account].owner = owner;\n\t\t}\n\t\twallets[provider][account].amount = wallets[provider][account].amount.add(amount);\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\n\n\t\temit Charge(provider, nonce, owner, account, amount);\n\t}\n\n\tfunction spend(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\tbytes memory bill,\n\t\tbytes memory signature\n\t) external override nonNonce(provider, nonce) whenNotPaused nonReentrant returns (uint256 fee) {\n\t\tfee = _spend(provider, nonce, account, bill, signature);\n\t\twallets[provider][account].amount = wallets[provider][account].amount.sub(fee);\n\n\t\temit Spend(provider, nonce, account, fee, wallets[provider][account].amount);\n\t}\n\n\tfunction withdraw(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\taddress to,\n\t\tbytes memory bill,\n\t\tbytes memory signature\n\t) external override nonNonce(provider, nonce) onlyWalletOwner(provider, account) whenNotPaused nonReentrant returns (uint256 amount) {\n\t\tuint256 fee = _spend(provider, nonce, account, bill, signature);\n\t\tamount = wallets[provider][account].amount.sub(fee);\n\t\ttoken.safeTransfer(to, amount);\n\t\twallets[provider][account].amount = 0;\n\n\t\temit Withdrawn(provider, nonce, account, to, amount);\n\t}\n\n\tfunction transferWalletOwner(address provider, bytes32 account, address newOwner, bytes memory signature) external override whenNotPaused onlyWalletOwner(provider, account) {\n\t\tbytes32 hash = keccak256(abi.encodePacked(provider, newOwner, account));\n\t\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\n\t\twallets[provider][account].owner = newOwner;\n\t\temit WalletOwnerTransferred(provider, account, newOwner);\n\t}\n\n\tfunction ownerOf(address provider, bytes32 account) public view override returns (address) {\n\t\treturn wallets[provider][account].owner;\n\t}\n\n\tfunction balanceOf(address provider, bytes32 account) public view override returns (uint256) {\n\t\treturn wallets[provider][account].amount;\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/wallets/Billing.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\n\nimport '../providers/ProvidersWrapper.sol';\nimport '../interfaces/IBilling.sol';\nimport '../resources/interfaces/IResourceAdaptor.sol';\n\nabstract contract Billing is IBilling, ProvidersWrapper {\n\tusing SafeMathUpgradeable for uint256;\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tIERC20Upgradeable public override token;\n\n\tIResourceAdaptor public override adaptor;\n\n\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\n\t\t_setResourceAdaptor(_adaptor);\n\t}\n\n\tfunction _setToken(IERC20Upgradeable _token) internal {\n\t\ttoken = _token;\n\t\temit TokenUpdated(_token);\n\t}\n\n\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\n\t\tadaptor = _adaptor;\n\t\temit ResourceAdaptorUpdated(_adaptor);\n\t}\n\n\tfunction _spend(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\tbytes memory bill,\n\t\tbytes memory signature\n\t) internal returns (uint256 amount) {\n\t\trequire(providers.isProvider(msg.sender), 'Billing: caller is not a provider');\n\t\tbytes32 hash = hashBill(provider, nonce, account, bill);\n\t\trequire(providers.isValidSignature(provider, hash, signature), 'Billing: invalid signature');\n\t\tuint256 balance = balanceOf(provider, account);\n\t\tuint256 value = _validateBill(bill);\n\t\tamount = balance > value ? value : balance;\n\t\ttoken.safeTransfer(providers.wallets(provider), amount);\n\n\t\temit Billing(provider, nonce, account, bill, amount);\n\t}\n\n\tfunction hashBill(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\tbytes memory bill\n\t) public pure returns (bytes32) {\n\t\treturn keccak256(abi.encodePacked(provider, nonce, account, bill));\n\t}\n\n\tfunction _validateBill(bytes memory bill) internal view returns (uint256 value) {\n\t\tBill memory bills = abi.decode(bill, (Bill));\n\t\tfor (uint256 i = 0; i < bills.payloads.length; i++) {\n\t\t\tBillPayload memory payload = bills.payloads[i];\n\t\t\tfor (uint256 j = 0; j < payload.entries.length; j++) {\n\t\t\t\tBillEntry memory entry = payload.entries[i];\n\t\t\t\tuint256 billing = entry.amount.mul(adaptor.getValueAt(entry.resourceType, entry.amount, payload.indexBlock));\n\t\t\t\tvalue = value.add(billing);\n\t\t\t}\n\t\t}\n\t\trequire(value == bills.totalValue, 'Billing: invalid bill');\n\t}\n\n\tfunction balanceOf(address provider, bytes32 account) public view virtual returns (uint256);\n\n\tfunction encodeBill(Bill memory bills) external pure returns (bytes memory) {\n\t\treturn abi.encode(bills);\n\t}\n\n\tfunction decodeBill(bytes memory message) external pure returns (Bill memory) {\n\t\treturn abi.decode(message, (Bill));\n\t}\n}\n"
    },
    "contracts/interfaces/IFundWallet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './IBilling.sol';\n\ninterface IFundWallet is IBilling {\n\tstruct Wallet {\n\t\taddress owner;\n\t\tuint256 amount;\n\t}\n\n\tevent WalletOwnerTransferred(address provider, bytes32 account, address newOwner);\n\n\tevent Charge(address provider, uint64 nonce, address owner, bytes32 account, uint256 amount);\n\n\tevent Spend(address provider, uint64 nonce, bytes32 account, uint256 fee, uint256 balance);\n\n\tevent Withdrawn(address provider, uint64 nonce, bytes32 account, address to, uint256 amount);\n\n\tfunction ownerOf(address provider, bytes32 account) external view returns (address);\n\n\tfunction transferWalletOwner(address provider, bytes32 account, address newOwner, bytes memory signature) external;\n\n\tfunction charge(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\taddress owner,\n\t\tbytes32 account,\n\t\tuint256 amount,\n\t\tbytes memory signature\n\t) external;\n\n\tfunction withdraw(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\taddress to,\n\t\tbytes memory billMessage,\n\t\tbytes memory signature\n\t) external returns (uint256);\n\n\tfunction spend(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\tbytes memory bill,\n\t\tbytes memory signature\n\t) external returns (uint256 fee);\n\n}\n"
    },
    "contracts/providers/ProvidersWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '../access/Pauser.sol';\nimport '../interfaces/IProvidersWrapper.sol';\n\nabstract contract ProvidersWrapper is IProvidersWrapper, Pauser {\n\tIProviders public override providers;\n\n\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\n\t\t_setProviders(_providers);\n\t}\n\n\tfunction _setProviders(IProviders _providers) internal {\n\t\tproviders = _providers;\n\t\temit ProvidersUpdated(_providers);\n\t}\n}\n"
    },
    "contracts/interfaces/IBilling.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '../libraries/ResourceData.sol';\nimport '../resources/interfaces/IResourceAdaptor.sol';\nimport './IProvidersWrapper.sol';\n\ninterface IBilling is IProvidersWrapper {\n\tstruct BillEntry {\n\t\tResourceData.ResourceType resourceType;\n\t\tuint256 amount;\n\t}\n\n\tstruct BillPayload {\n\t\tuint256 indexBlock;\n\t\tBillEntry[] entries;\n\t}\n\n\tstruct Bill {\n\t\tuint256 totalValue;\n\t\tBillPayload[] payloads;\n\t}\n\n\tevent TokenUpdated(IERC20Upgradeable token);\n\n\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\n\n\tevent Billing(address provider, uint64 nonce, bytes32 account, bytes bill, uint256 amount);\n\n\tfunction token() external view returns (IERC20Upgradeable);\n\n\tfunction adaptor() external view returns (IResourceAdaptor);\n\n}\n"
    },
    "contracts/resources/interfaces/IResourceAdaptor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '../../libraries/ResourceData.sol';\n\ninterface IResourceAdaptor {\n\n\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\n\n\tfunction getValueAt(\n\t\tResourceData.ResourceType resourceType,\n\t\tuint256 amount,\n\t\tuint256 _indexBlock\n\t) external view returns (uint256);\n\n\tfunction getAmountAt(\n\t\tResourceData.ResourceType resourceType,\n\t\tuint256 value,\n\t\tuint256 _indexBlock\n\t) external view returns (uint256);\n\n\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\n\n\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\n\n\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\n}\n"
    },
    "contracts/access/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\n\tmapping(address => bool) public pausers;\n\n\tevent PauserAdded(address account);\n\tevent PauserRemoved(address account);\n\n\tfunction __Init_Pauser(address account) internal onlyInitializing {\n\t\t_addPauser(account);\n\t}\n\n\tmodifier onlyPauser() {\n\t\trequire(isPauser(msg.sender), 'Pauser: Caller is not pauser');\n\t\t_;\n\t}\n\n\tfunction pause() public onlyPauser {\n\t\t_pause();\n\t}\n\n\tfunction unpause() public onlyPauser {\n\t\t_unpause();\n\t}\n\n\tfunction isPauser(address account) public view returns (bool) {\n\t\treturn pausers[account];\n\t}\n\n\tfunction addPauser(address account) public onlyOwner {\n\t\t_addPauser(account);\n\t}\n\n\tfunction removePauser(address account) public onlyOwner {\n\t\t_removePauser(account);\n\t}\n\n\tfunction renouncePauser() public {\n\t\t_removePauser(msg.sender);\n\t}\n\n\tfunction _addPauser(address account) private {\n\t\trequire(!isPauser(account), 'Pauser: Account is already pauser');\n\t\tpausers[account] = true;\n\t\temit PauserAdded(account);\n\t}\n\n\tfunction _removePauser(address account) private {\n\t\trequire(isPauser(account), 'Pauser: Account is not pauser');\n\t\tpausers[account] = false;\n\t\temit PauserRemoved(account);\n\t}\n}\n"
    },
    "contracts/interfaces/IProvidersWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '../interfaces/IProviders.sol';\n\ninterface IProvidersWrapper {\n\tevent ProvidersUpdated(IProviders providers);\n\n\tfunction providers() external view returns (IProviders);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IProviders.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\ninterface IProviders {\n\tevent ProviderUpdated(address provider, address wallet);\n\n\tevent RemoveProvider(address provider);\n\n\tfunction isProvider(address provider) external view returns (bool);\n\n\tfunction wallets(address provider) external view returns (address);\n\n\tfunction isValidSignature(\n\t\taddress provider,\n\t\tbytes32 hash,\n\t\tbytes memory signature\n\t) external returns (bool);\n}\n"
    },
    "contracts/libraries/ResourceData.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nlibrary ResourceData {\n\n\tenum ResourceType {\n\t\tNull,\n\t\tBuildingTime,\n\t\tBandwidth,\n\t\tARStorage,\n\t\tIPFSStorage\n\t}\n\n\tstruct Payload {\n\t\tResourceData.ResourceType resourceType;\n\t\tuint256[] values;\n\t}\n\n}"
    },
    "contracts/resources/ResourceAdaptor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\n\nimport './interfaces/IResourceAdaptor.sol';\n\ncontract ResourceAdaptor is IResourceAdaptor, OwnableUpgradeable {\n\tusing SafeMathUpgradeable for uint256;\n\n\tstruct PriceAdaptor {\n\t\tResourceData.ResourceType resourceType;\n\t\tuint256 price;\n\t}\n\n\tuint256 public indexBlock;\n\n\t// type -> block -> price\n\tmapping(ResourceData.ResourceType => mapping(uint256 => uint256)) internal priceTraces;\n\n\tevent SetPriceAdaptors(PriceAdaptor[] adaptors);\n\n\tconstructor(\n\t\taddress owner,\n\t\tPriceAdaptor[] memory adaptors\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Price_Adaptors(adaptors);\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\tPriceAdaptor[] memory adaptors\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Price_Adaptors(adaptors);\n\t}\n\n\tfunction __Init_Price_Adaptors(PriceAdaptor[] memory adaptors) internal onlyInitializing {\n\t\t_setPriceAdaptors(adaptors);\n\t}\n\n\tfunction setPriceAdaptors(PriceAdaptor[] memory adaptors) external onlyOwner {\n\t\t_setPriceAdaptors(adaptors);\n\t}\n\n\tfunction _setPriceAdaptors(PriceAdaptor[] memory adaptors) internal {\n\t\trequire(adaptors.length > 0, 'ResourceAdaptor: invalid pricers');\n\t\tfor (uint256 i = 0; i < adaptors.length; i++) {\n\t\t\tuint256 _price = adaptors[i].price;\n\t\t\trequire(_price > 0, 'ResourceAdaptor: invalid price');\n\t\t\tpriceTraces[adaptors[i].resourceType][block.number] = _price;\n\t\t}\n\t\tindexBlock = block.number;\n\t\temit SetPriceAdaptors(adaptors);\n\t}\n\n\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) public view override returns (uint256) {\n\t\trequire(priceTraces[resourceType][_indexBlock] != 0, 'ResourceAdaptor: invalid indexBlock');\n\t\treturn priceTraces[resourceType][_indexBlock];\n\t}\n\n\tfunction getValueAt(\n\t\tResourceData.ResourceType resourceType,\n\t\tuint256 amount,\n\t\tuint256 _indexBlock\n\t) public view override returns (uint256) {\n\t\treturn priceAt(resourceType, _indexBlock).mul(amount);\n\t}\n\n\tfunction getAmountAt(\n\t\tResourceData.ResourceType resourceType,\n\t\tuint256 value,\n\t\tuint256 _indexBlock\n\t) public view override returns (uint256) {\n\t\treturn value.div(priceAt(resourceType, _indexBlock));\n\t}\n\n\tfunction priceOf(ResourceData.ResourceType resourceType) public view override returns (uint256) {\n\t\treturn priceAt(resourceType, indexBlock);\n\t}\n\n\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) public view override returns (uint256) {\n\t\treturn priceOf(resourceType).mul(amount);\n\t}\n\n\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) public view override returns (uint256) {\n\t\treturn value.div(priceOf(resourceType));\n\t}\n}\n"
    },
    "contracts/resources/controllers/normal/NormalResourceController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport '../../AdaptorWrapper.sol';\nimport '../../interfaces/INormalResourceController.sol';\nimport '../../../payment/DstChainPaymentWrapper.sol';\n\nabstract contract NormalResourceController is INormalResourceController, DstChainPaymentWrapper, AdaptorWrapper {\n\tusing SafeMathUpgradeable for uint256;\n\n\tmapping(bytes32 => uint256) internal balances;\n\n\tfunction __Init_Normal_Resource_Controller(\n\t\taddress owner,\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor,\n\t\tResourceData.ResourceType resourceType\n\t) internal onlyInitializing {\n\t\t_transferOwnership(owner);\n\t\t__Init_Dst_Chain_Payment(dstChainPayment);\n\t\t__Init_Resource_Adaptor(adaptor);\n\t\t__Init_Resource_Type(resourceType);\n\t}\n\n\tfunction expand(bytes32 account, uint256 value) external override onlyDstChainPayment returns(uint256) {\n\t\tuint256 amount = getAmountOf(value);\n\t\tbalances[account] = balances[account].add(amount);\n\t\temit Expanded(account, value);\n\t\treturn value;\n\t}\n\n\tfunction balanceOf(bytes32 account) public view override returns(uint256) {\n\t\treturn balances[account];\n\t}\n}\n"
    },
    "contracts/resources/AdaptorWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nimport './interfaces/IAdaptorWrapper.sol';\nimport '../libraries/ResourceData.sol';\n\n\nabstract contract AdaptorWrapper is IAdaptorWrapper, OwnableUpgradeable {\n\tIResourceAdaptor public override adaptor;\n\n\tResourceData.ResourceType public override resourceType;\n\n\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\n\t\t_setResourceAdaptor(_adaptor);\n\t}\n\n\tfunction __Init_Resource_Type(ResourceData.ResourceType _resourceType) internal onlyInitializing {\n\t\t_setResourceType(_resourceType);\n\t}\n\n\tfunction setResourceAdaptor(IResourceAdaptor _adaptor) external onlyOwner {\n\t\t_setResourceAdaptor(_adaptor);\n\t}\n\n\tfunction setResourceType(ResourceData.ResourceType _resourceType) external onlyOwner {\n\t\t_setResourceType(_resourceType);\n\t}\n\n\tfunction price() public view returns (uint256) {\n\t\treturn adaptor.priceOf(resourceType);\n\t}\n\n\tfunction getValueOf(uint256 amount) public view returns (uint256) {\n\t\treturn adaptor.getValueOf(resourceType, amount);\n\t}\n\n\tfunction getAmountOf(uint256 value) public view returns (uint256) {\n\t\treturn adaptor.getAmountOf(resourceType, value);\n\t}\n\n\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\n\t\tadaptor = _adaptor;\n\t\temit ResourceAdaptorUpdated(_adaptor);\n\t}\n\n\tfunction _setResourceType(ResourceData.ResourceType _resourceType) internal {\n\t\tresourceType = _resourceType;\n\t\temit ResourceTypeUpdated(_resourceType);\n\t}\n}\n"
    },
    "contracts/resources/interfaces/INormalResourceController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './IAdaptorWrapper.sol';\n\ninterface INormalResourceController is IAdaptorWrapper {\n\tevent Expanded(bytes32 account, uint256 value);\n\n\tfunction expand(bytes32 account, uint256 value) external returns(uint256);\n\n\tfunction balanceOf(bytes32 account) external view returns (uint256);\n}\n"
    },
    "contracts/payment/DstChainPaymentWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract DstChainPaymentWrapper is OwnableUpgradeable {\n\taddress public dstChainPayment;\n\n\tevent DstChainPaymentUpdated(address dstChainPayment);\n\n\tmodifier onlyDstChainPayment() {\n\t\trequire(msg.sender == dstChainPayment, 'DstChainPaymentWrapper: caller is not dst chain payment');\n\t\t_;\n\t}\n\n\tfunction __Init_Dst_Chain_Payment(address _dstChainPayment) internal onlyInitializing {\n\t\t_setDstChainPayment(_dstChainPayment);\n\t}\n\n\tfunction setDstChainPayment(address _dstChainPayment) external onlyOwner {\n\t\t_setDstChainPayment(_dstChainPayment);\n\t}\n\n\tfunction _setDstChainPayment(address _dstChainPayment) internal {\n\t\tdstChainPayment = _dstChainPayment;\n\t\temit DstChainPaymentUpdated(_dstChainPayment);\n\t}\n\n}"
    },
    "contracts/resources/interfaces/IAdaptorWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '../interfaces/IResourceAdaptor.sol';\nimport '../../libraries/ResourceData.sol';\n\ninterface IAdaptorWrapper {\n\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\n\n\tevent ResourceTypeUpdated(ResourceData.ResourceType resourceType);\n\n\tfunction adaptor() external view returns (IResourceAdaptor);\n\n\tfunction resourceType() external view returns (ResourceData.ResourceType);\n\n\tfunction price() external view returns (uint256);\n\n\tfunction getValueOf(uint256 amount) external view returns (uint256);\n\n\tfunction getAmountOf(uint256 value) external view returns (uint256);\n}\n"
    },
    "contracts/resources/controllers/normal/BuildingTimeController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './NormalResourceController.sol';\n\ncontract BuildingTimeController is NormalResourceController {\n\tconstructor(\n\t\taddress owner,\t\t\n\t\taddress dstChainPayment,\n \t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.BuildingTime);\n\t}\n\n\tfunction initialize(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.BuildingTime);\n\t}\n}\n"
    },
    "contracts/resources/controllers/normal/BandwidthController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './NormalResourceController.sol';\n\ncontract BandwidthController is NormalResourceController {\n\tconstructor(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.Bandwidth);\n\t}\n\n\tfunction initialize(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.Bandwidth);\n\t}\n}\n"
    },
    "contracts/resources/controllers/IPFSStorageController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport '../AdaptorWrapper.sol';\nimport '../interfaces/IIPFSStorageController.sol';\nimport '../../payment/DstChainPaymentWrapper.sol';\n\ncontract IPFSStorageController is IIPFSStorageController, DstChainPaymentWrapper, AdaptorWrapper {\n\tusing SafeMathUpgradeable for uint256;\n\n\tmapping(bytes32 => IPFSStorage) internal ipfsStorage;\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Dst_Chain_Payment(dstChainPayment);\n\t\t__Init_Resource_Adaptor(adaptor);\n\t\t__Init_Resource_Type(ResourceData.ResourceType.IPFSStorage);\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Dst_Chain_Payment(dstChainPayment);\n\t\t__Init_Resource_Adaptor(adaptor);\n\t\t__Init_Resource_Type(ResourceData.ResourceType.IPFSStorage);\n\t}\n\n\tfunction expand(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) external override onlyDstChainPayment returns (uint256) {\n\t\t(uint256 expandedStorage, uint256 expandedExpiration) = expansions(account, expandedStorageFee, expandedExpirationFee);\n\t\tif (isExpired(account)) {\n\t\t\tipfsStorage[account].startTime = block.timestamp;\n\t\t\tipfsStorage[account].amount = expandedStorage;\n\t\t\tipfsStorage[account].expiration = expandedExpiration;\n\t\t} else {\n\t\t\tipfsStorage[account].amount = ipfsStorage[account].amount.add(expandedStorage);\n\t\t\tipfsStorage[account].expiration = ipfsStorage[account].expiration.add(expandedExpiration);\n\t\t}\n\n\t\temit Expanded(account, expandedStorageFee, expandedExpirationFee);\n\t\treturn expandedStorageFee.add(expandedExpirationFee);\n\t}\n\n\tfunction isExpired(bytes32 account) public view override returns (bool) {\n\t\treturn block.timestamp > startTime(account).add(expiration(account));\n\t}\n\n\tfunction startTime(bytes32 account) public view override returns (uint256) {\n\t\treturn ipfsStorage[account].startTime;\n\t}\n\n\tfunction availableExpiration(bytes32 account) public view override returns (uint256) {\n\t\trequire(!isExpired(account), 'IPFSStorageController: account is expired.');\n\t\treturn expiredAt(account).sub(block.timestamp);\n\t}\n\n\tfunction expiration(bytes32 account) public view override returns (uint256) {\n\t\treturn ipfsStorage[account].expiration;\n\t}\n\n\tfunction expiredAt(bytes32 account) public view override returns (uint256) {\n\t\treturn startTime(account).add(expiration(account));\n\t}\n\n\tfunction balanceOf(bytes32 account) public view override returns (uint256) {\n\t\trequire(!isExpired(account), 'IPFSStorageController: account is expired.');\n\t\treturn ipfsStorage[account].amount;\n\t}\n\n\tfunction expandedFee(\n\t\tbytes32 account,\n\t\tuint256 expandedStorage,\n\t\tuint256 expandedExpiration\n\t) public view override returns (uint256 expandedStorageFee, uint256 expandedExpirationFee) {\n\t\tif (isExpired(account)) {\n\t\t\trequire(expandedStorage > 0 && expandedExpiration > 0, 'IPFSStorageController: invalid params with expired account');\n\t\t\texpandedStorageFee = getValueOf(expandedStorage);\n\t\t\texpandedExpirationFee = expandedStorage.mul(expandedExpiration);\n\t\t} else {\n\t\t\trequire(expandedStorage > 0 || expandedExpiration > 0, 'IPFSStorageController: invalid params');\n\t\t\texpandedStorageFee = expandedStorage.mul(getValueOf(availableExpiration(account)));\n\t\t\texpandedExpirationFee = expandedExpiration.mul(getValueOf(balanceOf(account).add(expandedStorage)));\n\t\t}\n\t}\n\n\tfunction expansions(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) public view override returns (uint256 expandedStorage, uint256 expandedExpiration) {\n\t\tif (isExpired(account)) {\n\t\t\trequire(expandedStorageFee > 0 && expandedExpirationFee > 0, 'IPFSStorageController: invalid params with expired account');\n\t\t\texpandedStorage = expandedStorageFee.div(price());\n\t\t\texpandedExpiration = expandedExpirationFee.div(expandedStorage);\n\t\t} else {\n\t\t\trequire(expandedStorageFee > 0 || expandedExpirationFee > 0, 'IPFSStorageController: invalid params');\n\t\t\texpandedStorage = expandedStorageFee.div(getValueOf(availableExpiration(account)));\n\t\t\texpandedExpiration = expandedExpirationFee.div(getValueOf(balanceOf(account).add(expandedStorage)));\n\t\t}\n\t}\n}\n"
    },
    "contracts/resources/interfaces/IIPFSStorageController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport './IAdaptorWrapper.sol';\n\ninterface IIPFSStorageController is IAdaptorWrapper {\n\tstruct IPFSStorage {\n\t\tuint256 startTime;\n\t\tuint256 expiration;\n\t\tuint256 amount;\n\t}\n\n\tevent Expanded(bytes32 account, uint256 expandedStorageFee, uint256 expandedExpirationFee);\n\n\tfunction expand(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) external returns (uint256);\n\n\tfunction isExpired(bytes32 account) external view returns (bool);\n\n\tfunction startTime(bytes32 account) external view returns (uint256);\n\n\tfunction availableExpiration(bytes32 account) external view returns (uint256);\n\n\tfunction expiration(bytes32 account) external view returns (uint256);\n\n\tfunction expiredAt(bytes32 account) external view returns (uint256);\n\n\tfunction balanceOf(bytes32 account) external view returns (uint256);\n\n\tfunction expandedFee(\n\t\tbytes32 account,\n\t\tuint256 expandedStorage,\n\t\tuint256 expandedExpiration\n\t) external view returns (uint256 expandedStorageFee, uint256 expandedExpirationFee);\n\n\tfunction expansions(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) external view returns (uint256 expandedStorage, uint256 expandedExpiration);\n}\n"
    },
    "contracts/payment/ResourPayloadTool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\n\nimport '../libraries/ResourceData.sol';\n\nabstract contract ResourPayloadTool {\n\tusing SafeMathUpgradeable for uint256;\n\n\tfunction _convertSourceChainPayloads(uint256 dstAmount, ResourceData.Payload[] memory payloads) internal pure returns (ResourceData.Payload[] memory newPayloads) {\n\t\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payload length');\n\t\tuint256 total = totalValue(payloads);\n\t\trequire(total > 0, 'ResourPayloadTool: zero values');\n\t\tfor (uint256 i = 0; i < payloads.length; i++) {\n\t\t\trequire(payloads[i].values.length > 0, 'ResourPayloadTool: invalid value length');\n\t\t\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\n\t\t\t\tpayloads[i].values[j] = payloads[i].values[j].mul(dstAmount).div(total);\n\t\t\t}\n\t\t}\n\t\treturn payloads;\n\t}\n\n\tfunction totalValue(ResourceData.Payload[] memory payloads) public pure returns (uint256 value) {\n\t\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payloads length');\n\t\tfor (uint256 i = 0; i < payloads.length; i++) {\n\t\t\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\n\t\t\t\tvalue = value.add(payloads[i].values[j]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n"
    },
    "contracts/payment/SrcChainPayment.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\n\nimport '../interfaces/IMessageSender.sol';\nimport '../access/OwnerWithdrawable.sol';\nimport '../access/Pauser.sol';\nimport './ResourPayloadTool.sol';\n\ncontract SrcChainPayment is OwnerWithdrawable, Pauser, ResourPayloadTool, ReentrancyGuardUpgradeable {\n\tusing SafeMathUpgradeable for uint256;\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tIMessageSender public messageSender;\n\n\tIERC20Upgradeable public token;\n\n\tevent TokenUpdated(IERC20Upgradeable token);\n\n\tevent MessageSenderUpdated(IMessageSender messageSender);\n\n\tevent Paid(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\tResourceData.Payload[] payloads,\n\t\tuint32 maxSlippage\n\t);\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIMessageSender _messageSender,\n\t\tIERC20Upgradeable token\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Message_Sender(_messageSender);\n\t\t__Init_Token(token);\n\t}\n\n\tfunction Init_Payment(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIMessageSender _messageSender,\n\t\tIERC20Upgradeable token\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Message_Sender(_messageSender);\n\t\t__Init_Token(token);\n\t}\n\n\tfunction __Init_Message_Sender(IMessageSender _messageSender) internal onlyInitializing {\n\t\t_setMessageSender(_messageSender);\n\t}\n\n\tfunction __Init_Token(IERC20Upgradeable token) internal onlyInitializing {\n\t\t_setToken(token);\n\t}\n\n\tfunction pay(\n\t\taddress provider,\n\t\tuint64 nonce,\n\t\tbytes32 account,\n\t\tResourceData.Payload[] memory payloads,\n\t\tuint32 maxSlippage\n\t) external payable whenNotPaused nonReentrant returns (bytes32 transferId) {\n\t\tuint256 value = totalValue(payloads);\n\t\ttoken.safeTransferFrom(msg.sender, address(this), value);\n\t\ttoken.safeApprove(address(messageSender), value);\n\t\ttransferId = messageSender.sendMessageWithTransfer{ value: msg.value }(\n\t\t\taddress(token),\n\t\t\tvalue,\n\t\t\tnonce,\n\t\t\tmaxSlippage,\n\t\t\tencodeMessage(provider, nonce, account, payloads),\n\t\t\tMsgDataTypes.BridgeSendType.Liquidity\n\t\t);\n\t\ttoken.safeApprove(address(messageSender), 0);\n\t\temit Paid(provider, nonce, account, payloads, maxSlippage);\n\t}\n\n\tfunction setMessageSender(IMessageSender _messageSender) external onlyOwner {\n\t\t_setMessageSender(_messageSender);\n\t}\n\n\tfunction _setMessageSender(IMessageSender _messageSender) internal {\n\t\tmessageSender = _messageSender;\n\t\temit MessageSenderUpdated(_messageSender);\n\t}\n\n\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\n\t\t_setToken(_token);\n\t}\n\n\tfunction _setToken(IERC20Upgradeable _token) internal {\n\t\ttoken = _token;\n\t\temit TokenUpdated(token);\n\t}\n\n\tfunction calcFee(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) public view returns(uint256 value) {\n\t\treturn messageSender.calcFee(encodeMessage(provider, nonce, account, payloads));\n\t}\n\n\tfunction encodeMessage(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) public pure returns (bytes memory) {\n\t\treturn abi.encode(provider, nonce, account, payloads);\n\t}\n\n}\n"
    },
    "contracts/interfaces/IMessageSender.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport 'sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol';\n\ninterface IMessageSender {\n\tfunction receiver() external view returns (address);\n\n\tfunction dstChainId() external view returns (uint64);\n\n\tfunction calcFee(bytes memory message) external view returns (uint256);\n\n\tfunction messageId(\n\t\tMsgDataTypes.RouteInfo calldata route,\n\t\tuint64 dstChainId,\n\t\tbytes calldata message\n\t) external view returns (bytes32);\n\n\tfunction sendMessageWithTransfer(\n\t\taddress token,\n\t\tuint256 amount,\n\t\tuint64 nonce,\n\t\tuint32 maxSlippage,\n\t\tbytes memory message,\n\t\tMsgDataTypes.BridgeSendType bridgeSendType\n\t) external payable returns (bytes32);\n}\n"
    },
    "sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nlibrary MsgDataTypes {\n    // bridge operation type at the sender side (src chain)\n    enum BridgeSendType {\n        Null,\n        Liquidity,\n        PegDeposit,\n        PegBurn,\n        PegV2Deposit,\n        PegV2Burn,\n        PegV2BurnFrom\n    }\n\n    // bridge operation type at the receiver side (dst chain)\n    enum TransferType {\n        Null,\n        LqRelay, // relay through liquidity bridge\n        LqWithdraw, // withdraw from liquidity bridge\n        PegMint, // mint through pegged token bridge\n        PegWithdraw, // withdraw from original token vault\n        PegV2Mint, // mint through pegged token bridge v2\n        PegV2Withdraw // withdraw from original token vault v2\n    }\n\n    enum MsgType {\n        MessageWithTransfer,\n        MessageOnly\n    }\n\n    enum TxStatus {\n        Null,\n        Success,\n        Fail,\n        Fallback,\n        Pending // transient state within a transaction\n    }\n\n    struct TransferInfo {\n        TransferType t;\n        address sender;\n        address receiver;\n        address token;\n        uint256 amount;\n        uint64 wdseq; // only needed for LqWithdraw (refund)\n        uint64 srcChainId;\n        bytes32 refId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct RouteInfo {\n        address sender;\n        address receiver;\n        uint64 srcChainId;\n        bytes32 srcTxHash; // src chain msg tx hash\n    }\n\n    struct MsgWithTransferExecutionParams {\n        bytes message;\n        TransferInfo transfer;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n\n    struct BridgeTransferParams {\n        bytes request;\n        bytes[] sigs;\n        address[] signers;\n        uint256[] powers;\n    }\n}\n"
    },
    "contracts/providers/Providers.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '../interfaces/IProviders.sol';\n\ncontract Providers is IProviders, OwnableUpgradeable {\n\tmapping(address => bool) internal providers;\n\n\tmapping(address => address) public override wallets;\n\n\tmodifier onlyProvider() {\n\t\trequire(isProvider(msg.sender), 'Providers: caller is not a provider');\n\t\t_;\n\t}\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress[] memory _providers,\n\t\taddress[] memory _wallets\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Providers_And_Wallets(_providers, _wallets);\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\taddress[] memory _providers,\n\t\taddress[] memory _wallets\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Providers_And_Wallets(_providers, _wallets);\n\t}\n\n\tfunction __Init_Providers_And_Wallets(address[] memory _providers, address[] memory _wallets) internal onlyInitializing {\n\t\trequire(_providers.length == _wallets.length, 'Providers: inconsistent length');\n\t\tfor (uint256 i = 0; i < _providers.length; i++) {\n\t\t\t_addProvider(_providers[i], _wallets[i]);\n\t\t}\n\t}\n\n\tfunction setWallet(address wallet) external onlyProvider {\n\t\t_setWallet(msg.sender, wallet);\n\t}\n\n\tfunction _setWallet(address provider, address newWallet) internal {\n\t\twallets[provider] = newWallet;\n\t\temit ProviderUpdated(provider, newWallet);\n\t}\n\n\tfunction isProvider(address provider) public view override returns (bool) {\n\t\treturn providers[provider];\n\t}\n\n\tfunction addProvider(address provider, address wallet) external onlyOwner {\n\t\t_addProvider(provider, wallet);\n\t}\n\n\tfunction removeProvider(address provider) external onlyOwner {\n\t\t_removeProvider(provider);\n\t}\n\n\tfunction _removeProvider(address provider) internal {\n\t\trequire(isProvider(provider), 'Providers: nonexistent provider');\n\t\temit RemoveProvider(provider);\n\t\tdelete providers[provider];\n\t}\n\n\tfunction _addProvider(address provider, address wallet) internal {\n\t\trequire(!isProvider(provider), 'Providers: provider existed');\n\t\tproviders[provider] = true;\n\t\twallets[provider] = wallet;\n\n\t\temit ProviderUpdated(provider, wallet);\n\t}\n\n\tfunction isValidSignature(\n\t\taddress provider,\n\t\tbytes32 hash,\n\t\tbytes memory signature\n\t) public view returns (bool) {\n\t\trequire(isProvider(provider), 'Providers: nonexistent provider');\n\t\treturn SignatureCheckerUpgradeable.isValidSignatureNow(provider, hash, signature);\n\t}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/SignatureCheckerUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/SignatureChecker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../AddressUpgradeable.sol\";\nimport \"../../interfaces/IERC1271Upgradeable.sol\";\n\n/**\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\n * Argent and Gnosis Safe.\n *\n * _Available since v4.1._\n */\nlibrary SignatureCheckerUpgradeable {\n    /**\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\n     *\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\n     */\n    function isValidSignatureNow(\n        address signer,\n        bytes32 hash,\n        bytes memory signature\n    ) internal view returns (bool) {\n        (address recovered, ECDSAUpgradeable.RecoverError error) = ECDSAUpgradeable.tryRecover(hash, signature);\n        if (error == ECDSAUpgradeable.RecoverError.NoError && recovered == signer) {\n            return true;\n        }\n\n        (bool success, bytes memory result) = signer.staticcall(\n            abi.encodeWithSelector(IERC1271Upgradeable.isValidSignature.selector, hash, signature)\n        );\n        return (success && result.length == 32 && abi.decode(result, (bytes4)) == IERC1271Upgradeable.isValidSignature.selector);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC1271Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271Upgradeable {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/resources/ControllersWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '../resources/interfaces/INormalResourceController.sol';\nimport '../resources/interfaces/IIPFSStorageController.sol';\n\nabstract contract ControllersWrapper is OwnableUpgradeable {\n\n\tINormalResourceController public buildingTimeController;\n\n\tINormalResourceController public bandwidthController;\n\n\tINormalResourceController public arStorageController;\n\n\tIIPFSStorageController public ipfsStorageController;\n\n\tevent BuildingTimeControllerUpdated(INormalResourceController _buildingTimeController);\n\n\tevent BandwidthControllerUpdated(INormalResourceController _bandwidthController);\n\n\tevent ARStorageControllerUpdated(INormalResourceController _arStorageController);\n\n\tevent IPFSStorageControllerUpdated(IIPFSStorageController _ipfsStorageController);\n\n\tfunction setBuildingTimeController(INormalResourceController _buildingTimeController) external onlyOwner {\n\t\t_setBuildingTimeController(_buildingTimeController);\n\t}\n\n\tfunction setBandwidthController(INormalResourceController _bandwidthController) external onlyOwner {\n\t\t_setBandwidthController(_bandwidthController);\n\t}\n\n\tfunction setARStorageController(INormalResourceController _arStorageController) external onlyOwner {\n\t\t_setARStorageController(_arStorageController);\n\t}\n\n\tfunction setIPFSStorageController(IIPFSStorageController _ipfsStorageController) external onlyOwner {\n\t\t_setIPFSStorageController(_ipfsStorageController);\n\t}\n\n\tfunction _setBuildingTimeController(INormalResourceController _buildingTimeController) internal {\n\t\tbuildingTimeController = _buildingTimeController;\n\t\temit BuildingTimeControllerUpdated(_buildingTimeController);\n\t}\n\n\tfunction _setBandwidthController(INormalResourceController _bandwidthController) internal {\n\t\tbandwidthController = _bandwidthController;\n\t\temit BandwidthControllerUpdated(_bandwidthController);\n\t}\n\n\tfunction _setARStorageController(INormalResourceController _arStorageController) internal {\n\t\tarStorageController = _arStorageController;\n\t\temit ARStorageControllerUpdated(_arStorageController);\n\t}\n\n\tfunction _setIPFSStorageController(IIPFSStorageController _ipfsStorageController) internal {\n\t\tipfsStorageController = _ipfsStorageController;\n\t\temit IPFSStorageControllerUpdated(_ipfsStorageController);\n\t}\n\n}\n"
    },
    "contracts/payment/DstChainPayment.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n\nimport '../resources/ControllersWrapper.sol';\nimport '../interfaces/IDstChainPayment.sol';\nimport '../providers/ProvidersWrapper.sol';\nimport '../messages/MessageReceiverWrapper.sol';\nimport '../access/OwnerWithdrawable.sol';\nimport './ResourPayloadTool.sol';\n\ncontract DstChainPayment is\n\tIDstChainPayment,\n\tResourPayloadTool,\n\tMessageReceiverWrapper,\n\tReentrancyGuardUpgradeable,\n\tProvidersWrapper,\n\tControllersWrapper,\n\tOwnerWithdrawable\n{\n\tusing SafeMathUpgradeable for uint256;\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tIERC20Upgradeable public token;\n\n\tmapping(address => uint256) public providerBalances;\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIProviders providers,\n\t\taddress messageReceiver,\n\t\tIERC20Upgradeable token\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Providers(providers);\n\t\t__Init_Message_Receiver(messageReceiver);\n\t\t__Init_Token(token);\n\t}\n\n\tfunction Init_Payment(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIProviders providers,\n\t\taddress messageReceiver,\n\t\tIERC20Upgradeable token\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Providers(providers);\n\t\t__Init_Message_Receiver(messageReceiver);\n\t\t__Init_Token(token);\n\t}\n\n\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\n\t\t_setToken(_token);\n\t}\n\n\tfunction convertSourceChainPayloads(uint256 amount, ResourceData.Payload[] memory payloads) public view returns (ResourceData.Payload[] memory) {\n\t\treturn _convertSourceChainPayloads(amount, payloads);\n\t}\n\n\tfunction payFromSourceChain(\n\t\tIERC20Upgradeable _token,\n\t\tuint256 dstAmount,\n\t\tbytes calldata message\n\t) external override onlyMessageReceiver whenNotPaused nonReentrant returns (uint256 value) {\n\t\t// require(decimals(_token) == 6, 'DstChainPayment: invalid token');\n\t\trequire(token == _token, 'DstChainPayment: invalid token');\n\t\t(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) = decodeSourceChainMessage(message);\n\t\tPaymentPayload memory payload = PaymentPayload(provider, nonce, account, _convertSourceChainPayloads(exchange(dstAmount), payloads));\n\t\treturn _pay(payload);\n\t}\n\n\tfunction pay(PaymentPayload memory payload) public override whenNotPaused nonReentrant returns (uint256 value) {\n\t\treturn _pay(payload);\n\t}\n\n\tfunction _pay(PaymentPayload memory payload) internal returns (uint256 value) {\n\t\trequire(providers.isProvider(payload.provider), 'DstChainPayment: nonexistent provider');\n\t\tvalue = _processPayloads(payload.account, payload.payloads);\n\t\tvalue = exchangeReverse(value);\n\t\ttoken.safeTransferFrom(msg.sender, address(this), value);\n\t\tproviderBalances[payload.provider] = providerBalances[payload.provider].add(value);\n\n\t\temit Paid(msg.sender, token, payload);\n\t}\n\n\tfunction _processPayloads(bytes32 account, ResourceData.Payload[] memory payloads) internal returns (uint256 value) {\n\t\trequire(payloads.length > 0, 'DstChainPayment: invalid payloads');\n\t\tfor (uint256 i = 0; i < payloads.length; i++) {\n\t\t\tResourceData.Payload memory payload = payloads[i];\n\t\t\tif (payload.resourceType == ResourceData.ResourceType.BuildingTime) {\n\t\t\t\tvalue = value.add(_processNormalResource(buildingTimeController, account, payload));\n\t\t\t} else if (payload.resourceType == ResourceData.ResourceType.ARStorage) {\n\t\t\t\tvalue = value.add(_processNormalResource(arStorageController, account, payload));\n\t\t\t} else if (payload.resourceType == ResourceData.ResourceType.Bandwidth) {\n\t\t\t\tvalue = value.add(_processNormalResource(bandwidthController, account, payload));\n\t\t\t} else if (payload.resourceType == ResourceData.ResourceType.IPFSStorage) {\n\t\t\t\tvalue = value.add(_processIPFSStorage(ipfsStorageController, account, payload));\n\t\t\t} else {\n\t\t\t\trevert('DstChainPayment: unknown resource type');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction exchange(uint256 amount) internal view returns (uint256 value) {\n\t\treturn amount.mul(10**12);\n\t}\n\n\tfunction exchangeReverse(uint256 amount) internal view returns (uint256 value) {\n\t\treturn amount.div(10**12);\n\t}\n\n\tfunction decimals(IERC20Upgradeable token) public view returns (uint256 value) {\n\t\t(bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(bytes4(keccak256('decimals()'))));\n\t\trequire(success, 'DstChainPayment: no decimals');\n\t\treturn abi.decode(data, (uint256));\n\t}\n\n\tfunction _processNormalResource(\n\t\tINormalResourceController controller,\n\t\tbytes32 account,\n\t\tResourceData.Payload memory payload\n\t) internal returns (uint256 value) {\n\t\trequire(payload.values.length == 1, 'DstChainPayment: invalid token value length');\n\t\treturn controller.expand(account, payload.values[0]);\n\t}\n\n\tfunction _processIPFSStorage(\n\t\tIIPFSStorageController controller,\n\t\tbytes32 account,\n\t\tResourceData.Payload memory payload\n\t) internal returns (uint256 value) {\n\t\trequire(payload.values.length == 2, 'DstChainPayment: invalid token value');\n\t\treturn controller.expand(account, payload.values[0], payload.values[1]);\n\t}\n\n\tfunction providerWithdraw(\n\t\tIERC20Upgradeable token,\n\t\taddress to,\n\t\tuint256 value\n\t) external whenNotPaused nonReentrant {\n\t\trequire(providers.isProvider(msg.sender), 'DstChainPayment: caller is not a provider');\n\t\trequire(providerBalances[msg.sender] >= value, 'DstChainPayment: insufficient provider balance');\n\t\tproviderBalances[msg.sender] = providerBalances[msg.sender].sub(value);\n\t\ttoken.safeTransfer(to, value);\n\n\t\temit ProvidetWithdraw(msg.sender, token, to, value);\n\t}\n\n\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\n\t\t_setToken(_token);\n\t}\n\n\tfunction _setToken(IERC20Upgradeable _token) internal {\n\t\ttoken = _token;\n\t\temit TokenUpdated(_token);\n\t}\n\n\tfunction decodeSourceChainMessage(bytes memory message)\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\taddress provider,\n\t\t\tuint64 nonce,\n\t\t\tbytes32 account,\n\t\t\tResourceData.Payload[] memory payloads\n\t\t)\n\t{\n\t\t(provider, nonce, account, payloads) = abi.decode(message, (address, uint64, bytes32, ResourceData.Payload[]));\n\t}\n}\n"
    },
    "contracts/interfaces/IDstChainPayment.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '../libraries/ResourceData.sol';\n\ninterface IDstChainPayment {\n\n\tstruct PaymentPayload {\n\t\taddress provider;\n\t\tuint64 nonce;\n\t\tbytes32 account;\n\t\tResourceData.Payload[] payloads;\n\t}\n\n\tevent TokenUpdated(IERC20Upgradeable token);\n\n\tevent Paid(address payer, IERC20Upgradeable token, PaymentPayload payload);\n\n\tevent ProvidetWithdraw(address provider, IERC20Upgradeable token, address to, uint256 value);\n\n\tfunction payFromSourceChain(\n\t\tIERC20Upgradeable token,\n\t\tuint256 amount,\n\t\tbytes calldata message\n\t) external returns (uint256 value);\n\n\tfunction pay(PaymentPayload memory payload) external returns (uint256 value);\n\n}\n"
    },
    "contracts/messages/MessageReceiverWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract MessageReceiverWrapper is OwnableUpgradeable {\n\taddress public messageReceiver;\n\n\tevent MessageReceiverUpdated(address messageReceiver);\n\n\tmodifier onlyMessageReceiver() {\n\t\trequire(msg.sender == messageReceiver, 'MessageReceiverWrapper: caller is not message receiver');\n\t\t_;\n\t}\n\n\tfunction __Init_Message_Receiver(address _messageReceiver) internal onlyInitializing {\n\t\t_setMessageReceiver(_messageReceiver);\n\t}\n\n\tfunction setMessageReceiver(address _messageReceiver) external onlyOwner {\n\t\t_setMessageReceiver(_messageReceiver);\n\t}\n\n\tfunction _setMessageReceiver(address _messageReceiver) internal {\n\t\tmessageReceiver = _messageReceiver;\n\t\temit MessageReceiverUpdated(_messageReceiver);\n\t}\n\n}"
    },
    "contracts/messages/MessageReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\n\nimport 'sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol';\n\nimport '../access/OwnerWithdrawable.sol';\nimport '../libraries/ResourceData.sol';\nimport '../interfaces/IDstChainPayment.sol';\n\ncontract MessageReceiver is OwnerWithdrawable {\n\tusing SafeMathUpgradeable for uint256;\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\tusing ResourceData for ResourceData.Payload[];\n\n\tenum ExecutionStatus {\n\t\tFail,\n\t\tSuccess,\n\t\tRetry\n\t}\n\n\tIDstChainPayment public dstChainPayment;\n\n\taddress public messageBus;\n\n\taddress public executor;\n\n\tevent DstChainPaymentUpdated(IDstChainPayment _dstChainPayment);\n\n\tevent MessageBusUpdated(address messageBus);\n\n\tevent ExecutorUpdated(address executor);\n\n\tevent MessageWithTransferExecuted(address sender, IERC20Upgradeable token, uint256 amount, uint64 srcChainId, bytes message, address executor);\n\n\tevent MessageWithTransferFailed(address sender, IERC20Upgradeable token, uint256 amount, uint64 srcChainId, bytes message, address executor, string error);\n\n\tevent MessageWithTransferFallback(\n\t\taddress _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes _message,\n        address executor\n\t);\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress _messageBus,\n\t\taddress _executor\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t_setMessageBus(_messageBus);\n\t\t_setExecutor(_executor);\n\t}\n\n\tmodifier onlyMessageBus() {\n\t\trequire(msg.sender == messageBus, 'MessageReceiver: caller is not message bus');\n\t\t_;\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\taddress _messageBus,\n\t\taddress _executor\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t_setMessageBus(_messageBus);\n\t\t_setExecutor(_executor);\n\t}\n\n\tfunction executeMessageWithTransfer(\n        address sender,\n        IERC20Upgradeable token,\n        uint256 amount,\n        uint64 srcChainId,\n        bytes memory message,\n        address _executor\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\n\t\trequire(executor == _executor, 'MessageReceiver: invalid executor');\n\t\ttoken.safeApprove(address(dstChainPayment), amount);\n\t\ttry dstChainPayment.payFromSourceChain(token, amount, message) {\n\t\t\temit MessageWithTransferExecuted(sender, token, amount, srcChainId, message, _executor);\n\t\t} catch (bytes memory e) {\n\t\t\temit MessageWithTransferFailed(sender, token, amount, srcChainId, message, _executor, string(e));\n\t\t}\n\t\ttoken.safeApprove(address(dstChainPayment), 0);\n\t\treturn ExecutionStatus.Success;\n    }\n\n\tfunction executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address executor\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\n\t\temit MessageWithTransferFallback(_sender, _token, _amount, _srcChainId, _message, executor);\n\t\treturn ExecutionStatus.Success;\n\t}\n\n\tfunction messageId(\n\t\tMsgDataTypes.RouteInfo calldata route,\n\t\tuint64 dstChainId,\n\t\tbytes calldata message\n\t) public view returns (bytes32) {\n\t\treturn\n\t\t\tkeccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageOnly, route.sender, route.receiver, route.srcChainId, route.srcTxHash, dstChainId, message));\n\t}\n\n\tfunction setDstChainPayment(IDstChainPayment _dstChainPayment) external onlyOwner {\n\t\t_setDstChainPayment(_dstChainPayment);\n\t}\n\n\tfunction _setDstChainPayment(IDstChainPayment _dstChainPayment) internal {\n\t\tdstChainPayment = _dstChainPayment;\n\t\temit DstChainPaymentUpdated(_dstChainPayment);\n\t}\n\n\tfunction setMessageBus(address messageBus) external onlyOwner {\n\t\t_setMessageBus(messageBus);\n\t}\n\n\tfunction _setMessageBus(address _messageBus) internal {\n\t\tmessageBus = _messageBus;\n\t\temit MessageBusUpdated(messageBus);\n\t}\n\n\tfunction setExecutor(address _executor) external onlyOwner {\n\t\t_setExecutor(_executor);\n\t}\n\n\tfunction _setExecutor(address _executor) internal {\n\t\texecutor = _executor;\n\t\temit ExecutorUpdated(_executor);\n\t}\n\n\tfunction getChainID() external view returns (uint64 id) {\n\t\tassembly {\n\t\t\tid := chainid()\n\t\t}\n\t}\n}\n"
    },
    "sgn-v2-contracts/contracts/message/messagebus/MessageBusReceiver.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../../safeguard/Ownable.sol\";\n\ncontract MessageBusReceiver is Ownable {\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\n\n    address public liquidityBridge; // liquidity bridge address\n    address public pegBridge; // peg bridge address\n    address public pegVault; // peg original vault address\n    address public pegBridgeV2; // peg bridge address\n    address public pegVaultV2; // peg original vault address\n\n    // minimum amount of gas needed by this contract before it tries to\n    // deliver a message to the target contract.\n    uint256 public preExecuteMessageGasUsage;\n\n    event Executed(\n        MsgDataTypes.MsgType msgType,\n        bytes32 msgId,\n        MsgDataTypes.TxStatus status,\n        address indexed receiver,\n        uint64 srcChainId,\n        bytes32 srcTxHash\n    );\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\n    event CallReverted(string reason); // help debug\n\n    event LiquidityBridgeUpdated(address liquidityBridge);\n    event PegBridgeUpdated(address pegBridge);\n    event PegVaultUpdated(address pegVault);\n    event PegBridgeV2Updated(address pegBridgeV2);\n    event PegVaultV2Updated(address pegVaultV2);\n\n    constructor(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) {\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    function initReceiver(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) internal {\n        require(liquidityBridge == address(0), \"liquidityBridge already set\");\n        liquidityBridge = _liquidityBridge;\n        pegBridge = _pegBridge;\n        pegVault = _pegVault;\n        pegBridgeV2 = _pegBridgeV2;\n        pegVaultV2 = _pegVaultV2;\n    }\n\n    // ============== functions called by executor ==============\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // For message with token transfer, message Id is computed through transfer info\n        // in order to guarantee that each transfer can only be used once.\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransfer\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            est = executeMessageWithTransferFallback(_transfer, _message);\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n                status = MsgDataTypes.TxStatus.Fallback;\n            } else {\n                status = MsgDataTypes.TxStatus.Fail;\n            }\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) public payable {\n        // similar to executeMessageWithTransfer\n        bytes32 messageId = verifyTransfer(_transfer);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"transfer already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"MessageWithTransferRefund\"));\n        IBridge(liquidityBridge).verifySigs(\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\n            _sigs,\n            _signers,\n            _powers\n        );\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(\n                MsgDataTypes.MsgType.MessageWithTransfer,\n                messageId,\n                _transfer.srcChainId,\n                _transfer.srcTxHash\n            );\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\n    }\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable {\n        // For message without associated token transfer, message Id is computed through message info,\n        // in order to guarantee that each message can only be applied once\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \"message already executed\");\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\n\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"Message\"));\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\n        MsgDataTypes.TxStatus status;\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\n            status = MsgDataTypes.TxStatus.Success;\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\n            return;\n        } else {\n            status = MsgDataTypes.TxStatus.Fail;\n        }\n        executedMessages[messageId] = status;\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\n    }\n\n    // ================= utils (to avoid stack too deep) =================\n\n    function emitMessageWithTransferExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.TransferInfo calldata _transfer\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageWithTransfer,\n            _messageId,\n            _status,\n            _transfer.receiver,\n            _transfer.srcChainId,\n            _transfer.srcTxHash\n        );\n    }\n\n    function emitMessageOnlyExecutedEvent(\n        bytes32 _messageId,\n        MsgDataTypes.TxStatus _status,\n        MsgDataTypes.RouteInfo calldata _route\n    ) private {\n        emit Executed(\n            MsgDataTypes.MsgType.MessageOnly,\n            _messageId,\n            _status,\n            _route.receiver,\n            _route.srcChainId,\n            _route.srcTxHash\n        );\n    }\n\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\n                _transfer.sender,\n                _transfer.token,\n                _transfer.amount,\n                _transfer.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\n                _transfer.token,\n                _transfer.amount,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\n        bytes32 transferId;\n        address bridgeAddr;\n        if (_transfer.t == MsgDataTypes.TransferType.LqRelay) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.sender,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.srcChainId,\n                    uint64(block.chainid),\n                    _transfer.refId\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \"bridge relay not exist\");\n        } else if (_transfer.t == MsgDataTypes.TransferType.LqWithdraw) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    uint64(block.chainid),\n                    _transfer.wdseq,\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount\n                )\n            );\n            bridgeAddr = liquidityBridge;\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \"bridge withdraw not exist\");\n        } else if (\n            _transfer.t == MsgDataTypes.TransferType.PegMint || _transfer.t == MsgDataTypes.TransferType.PegWithdraw\n        ) {\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId\n                )\n            );\n            if (_transfer.t == MsgDataTypes.TransferType.PegMint) {\n                bridgeAddr = pegBridge;\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // _transfer.t == MsgDataTypes.TransferType.PegWithdraw\n                bridgeAddr = pegVault;\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        } else if (\n            _transfer.t == MsgDataTypes.TransferType.PegV2Mint || _transfer.t == MsgDataTypes.TransferType.PegV2Withdraw\n        ) {\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\n                bridgeAddr = pegBridgeV2;\n            } else {\n                // MsgDataTypes.TransferType.PegV2Withdraw\n                bridgeAddr = pegVaultV2;\n            }\n            transferId = keccak256(\n                abi.encodePacked(\n                    _transfer.receiver,\n                    _transfer.token,\n                    _transfer.amount,\n                    _transfer.sender,\n                    _transfer.srcChainId,\n                    _transfer.refId,\n                    bridgeAddr\n                )\n            );\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \"mint record not exist\");\n            } else {\n                // MsgDataTypes.TransferType.PegV2Withdraw\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \"withdraw record not exist\");\n            }\n        }\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\n    }\n\n    function computeMessageOnlyId(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\n        private\n        view\n        returns (bytes32)\n    {\n        return\n            keccak256(\n                abi.encodePacked(\n                    MsgDataTypes.MsgType.MessageOnly,\n                    _route.sender,\n                    _route.receiver,\n                    _route.srcChainId,\n                    _route.srcTxHash,\n                    uint64(block.chainid),\n                    _message\n                )\n            );\n    }\n\n    function executeMessage(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\n        private\n        returns (IMessageReceiverApp.ExecutionStatus)\n    {\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\n            abi.encodeWithSelector(\n                IMessageReceiverApp.executeMessage.selector,\n                _route.sender,\n                _route.srcChainId,\n                _message,\n                msg.sender\n            )\n        );\n        if (ok) {\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\n        }\n        handleExecutionRevert(gasLeftBeforeExecution, res);\n        return IMessageReceiverApp.ExecutionStatus.Fail;\n    }\n\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\n        uint256 gasLeftAfterExecution = gasleft();\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\n            // if this happens, the executor must have not provided sufficient gas limit,\n            // then the tx should revert instead of recording a non-retryable failure status\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\n            assembly {\n                invalid()\n            }\n        }\n        emit CallReverted(getRevertMsg(_returnData));\n    }\n\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    // ================= helper functions =====================\n\n    /**\n     * @notice combine bridge transfer and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _transferParams params to call bridge transfer\n     * @param _msgParams params to execute message\n     */\n    function transferAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\n    ) external {\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\n        executeMessageWithTransfer(\n            _msgParams.message,\n            _msgParams.transfer,\n            _msgParams.sigs,\n            _msgParams.signers,\n            _msgParams.powers\n        );\n    }\n\n    /**\n     * @notice combine bridge refund and msg execution calls into a single tx\n     * @dev caller needs to get the required input params from SGN\n     * @param _transferParams params to call bridge transfer for refund\n     * @param _msgParams params to execute message for refund\n     */\n    function refundAndExecuteMsg(\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\n    ) external {\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\n        executeMessageWithTransferRefund(\n            _msgParams.message,\n            _msgParams.transfer,\n            _msgParams.sigs,\n            _msgParams.signers,\n            _msgParams.powers\n        );\n    }\n\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _transferParams)\n        private\n    {\n        if (t == MsgDataTypes.TransferType.LqRelay) {\n            IBridge(liquidityBridge).relay(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\n            IBridge(liquidityBridge).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\n            IPeggedTokenBridge(pegBridge).mint(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\n            IOriginalTokenVault(pegVault).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(\n                _transferParams.request,\n                _transferParams.sigs,\n                _transferParams.signers,\n                _transferParams.powers\n            );\n        }\n    }\n\n    // ================= contract config =================\n\n    function setLiquidityBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        liquidityBridge = _addr;\n        emit LiquidityBridgeUpdated(liquidityBridge);\n    }\n\n    function setPegBridge(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridge = _addr;\n        emit PegBridgeUpdated(pegBridge);\n    }\n\n    function setPegVault(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVault = _addr;\n        emit PegVaultUpdated(pegVault);\n    }\n\n    function setPegBridgeV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegBridgeV2 = _addr;\n        emit PegBridgeV2Updated(pegBridgeV2);\n    }\n\n    function setPegVaultV2(address _addr) public onlyOwner {\n        require(_addr != address(0), \"invalid address\");\n        pegVaultV2 = _addr;\n        emit PegVaultV2Updated(pegVaultV2);\n    }\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\n        preExecuteMessageGasUsage = _usage;\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    enum ExecutionStatus {\n        Fail, // execution failed, finalized\n        Success, // execution succeeded, finalized\n        Retry // execution rejected, can retry later\n    }\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Only called by MessageBus (MessageBusReceiver) if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable returns (ExecutionStatus);\n}\n"
    },
    "sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"../libraries/MsgDataTypes.sol\";\n\ninterface IMessageBus {\n    function liquidityBridge() external view returns (address);\n\n    function pegBridge() external view returns (address);\n\n    function pegBridgeV2() external view returns (address);\n\n    function pegVault() external view returns (address);\n\n    function pegVaultV2() external view returns (address);\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) external view returns (uint256);\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable;\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Execute a message with a successful transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransfer(\n        bytes calldata _message,\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message with a refunded transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _transfer The transfer info.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessageWithTransferRefund(\n        bytes calldata _message, // the same message associated with the original transfer\n        MsgDataTypes.TransferInfo calldata _transfer,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n\n    /**\n     * @notice Execute a message not associated with a transfer.\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function executeMessage(\n        bytes calldata _message,\n        MsgDataTypes.RouteInfo calldata _route,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external payable;\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IBridge {\n    function send(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage\n    ) external;\n\n    function relay(\n        bytes calldata _relayRequest,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function transfers(bytes32 transferId) external view returns (bool);\n\n    function withdraws(bytes32 withdrawId) external view returns (bool);\n\n    function withdraw(\n        bytes calldata _wdmsg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IOriginalTokenVault.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVault {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IOriginalTokenVaultV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IOriginalTokenVaultV2 {\n    /**\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _mintChainId destination chainId to mint tokens\n     * @param _mintAccount destination account to receive minted tokens\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function deposit(\n        address _token,\n        uint256 _amount,\n        uint64 _mintChainId,\n        address _mintAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\n     * @param _request The serialized Withdraw protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the bridge's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdraw(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridge {\n    /**\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\n     * @param _token local token address\n     * @param _amount locked token amount\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\n     * @param _nonce user input to guarantee unique depositId\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        address _withdrawAccount,\n        uint64 _nonce\n    ) external;\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external;\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridgeV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface IPeggedTokenBridgeV2 {\n    /**\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\n     * OriginalTokenVault, or mint at another remote chain\n     * @param _token The pegged token address.\n     * @param _amount The amount to burn.\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\n     * @param _toAccount The account to receive tokens on the remote chain\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\n     */\n    function burn(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\n    function burnFrom(\n        address _token,\n        uint256 _amount,\n        uint64 _toChainId,\n        address _toAccount,\n        uint64 _nonce\n    ) external returns (bytes32);\n\n    /**\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\n     * @param _request The serialized Mint protobuf.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function mint(\n        bytes calldata _request,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external returns (bytes32);\n\n    function records(bytes32 recordId) external view returns (bool);\n}\n"
    },
    "sgn-v2-contracts/contracts/safeguard/Ownable.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n *\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\n * renounceOwnership. So we can support Proxy based upgradable contract\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\n     * we require _owner == address(0), which is only possible when it's a delegateCall\n     * because constructor sets _owner in contract state.\n     */\n    function initOwner() internal {\n        require(_owner == address(0), \"owner already set\");\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/framework/MessageBusAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../../safeguard/Ownable.sol\";\n\nabstract contract MessageBusAddress is Ownable {\n    event MessageBusUpdated(address messageBus);\n\n    address public messageBus;\n\n    function setMessageBus(address _messageBus) public onlyOwner {\n        messageBus = _messageBus;\n        emit MessageBusUpdated(messageBus);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/framework/MessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../interfaces/IMessageReceiverApp.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\n    modifier onlyMessageBus() {\n        require(msg.sender == messageBus, \"caller is not message bus\");\n        _;\n    }\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Only called by MessageBus (MessageBusReceiver) if\n     *         1. executeMessageWithTransfer reverts, or\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\n     * @param _sender The address of the source app contract\n     * @param _token The address of the token that comes out of the bridge\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\n     *        function is called.\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferFallback(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\n     * @param _token The token address of the original transfer\n     * @param _amount The amount of the original transfer\n     * @param _message The same message associated with the original transfer\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n\n    /**\n     * @notice Called by MessageBus (MessageBusReceiver)\n     * @param _sender The address of the source app contract\n     * @param _srcChainId The source chain ID where the transfer is originated from\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBus execution function\n     */\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address _executor\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\n}\n"
    },
    "contracts/messages/MsgTest.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport 'sgn-v2-contracts/contracts/message/framework/MessageSenderApp.sol';\nimport 'sgn-v2-contracts/contracts/message/framework/MessageReceiverApp.sol';\n\n/** @title Application to test message with transfer refund flow */\ncontract MsgTest is MessageSenderApp, MessageReceiverApp {\n    using SafeERC20 for IERC20;\n    uint64 public nonce;\n\n    event MessageReceivedWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes _message,\n        address executor\n    );\n    event MessageWithTransferRefund(address _token, uint256 _amount, bytes _message, address executor);\n    event MessageReceived(address _sender, uint64 _srcChainId, bytes _message, address executor);\n\n    constructor(address _messageBus) {\n        messageBus = _messageBus;\n    }\n\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint32 _maxSlippage,\n        bytes calldata _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) external payable {\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        bytes memory message = abi.encode(msg.sender, _message);\n        sendMessageWithTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            nonce,\n            _maxSlippage,\n            message,\n            _bridgeSendType,\n            msg.value\n        );\n        nonce++;\n    }\n\n    function executeMessageWithTransfer(\n        address _sender,\n        address _token,\n        uint256 _amount,\n        uint64 _srcChainId,\n        bytes memory _message,\n        address executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        emit MessageReceivedWithTransfer(_sender, _token, _amount, _srcChainId, _message, executor);\n        return ExecutionStatus.Success;\n    }\n\n    function executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n\n        emit MessageWithTransferRefund( _token, _amount, _message, executor);\n        return ExecutionStatus.Success;\n    }\n\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        bytes memory message = abi.encode(nonce, _message);\n        nonce++;\n        sendMessage(_receiver, _dstChainId, message, msg.value);\n    }\n\n    function executeMessage(\n        address _sender,\n        uint64 _srcChainId,\n        bytes calldata _message,\n        address executor\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\n        emit MessageReceived(_sender, _srcChainId, _message, executor);\n        return ExecutionStatus.Success;\n    }\n\n    function drainToken(address _token, uint256 _amount) external onlyOwner {\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "sgn-v2-contracts/contracts/message/framework/MessageSenderApp.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../libraries/MsgDataTypes.sol\";\nimport \"../libraries/MessageSenderLib.sol\";\nimport \"../messagebus/MessageBus.sol\";\nimport \"./MessageBusAddress.sol\";\n\nabstract contract MessageSenderApp is MessageBusAddress {\n    using SafeERC20 for IERC20;\n\n    // ============== Utility functions called by apps ==============\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        uint256 _fee\n    ) internal {\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded. Only applicable to the {BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        return\n            MessageSenderLib.sendMessageWithTransfer(\n                _receiver,\n                _token,\n                _amount,\n                _dstChainId,\n                _nonce,\n                _maxSlippage,\n                _message,\n                _bridgeSendType,\n                messageBus,\n                _fee\n            );\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType\n    ) internal {\n        address bridge;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            bridge = MessageBus(messageBus).liquidityBridge();\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            bridge = MessageBus(messageBus).pegVault();\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            bridge = MessageBus(messageBus).pegBridge();\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\n            bridge = MessageBus(messageBus).pegVaultV2();\n        } else if (\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn ||\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom\n        ) {\n            bridge = MessageBus(messageBus).pegBridgeV2();\n        } else {\n            revert(\"bridge type not supported\");\n        }\n        MessageSenderLib.sendTokenTransfer(\n            _receiver,\n            _token,\n            _amount,\n            _dstChainId,\n            _nonce,\n            _maxSlippage,\n            _bridgeSendType,\n            bridge\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../../interfaces/IBridge.sol\";\nimport \"../../interfaces/IOriginalTokenVault.sol\";\nimport \"../../interfaces/IOriginalTokenVaultV2.sol\";\nimport \"../../interfaces/IPeggedTokenBridge.sol\";\nimport \"../../interfaces/IPeggedTokenBridgeV2.sol\";\nimport \"../interfaces/IMessageBus.sol\";\nimport \"./MsgDataTypes.sol\";\n\nlibrary MessageSenderLib {\n    using SafeERC20 for IERC20;\n\n    // ============== Internal library functions called by apps ==============\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     */\n    function sendMessage(\n        address _receiver,\n        uint64 _dstChainId,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal {\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            return\n                sendMessageWithLiquidityBridgeTransfer(\n                    _receiver,\n                    _token,\n                    _amount,\n                    _dstChainId,\n                    _nonce,\n                    _maxSlippage,\n                    _message,\n                    _messageBus,\n                    _fee\n                );\n        } else if (\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit ||\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit\n        ) {\n            return\n                sendMessageWithPegVaultDeposit(\n                    _bridgeSendType,\n                    _receiver,\n                    _token,\n                    _amount,\n                    _dstChainId,\n                    _nonce,\n                    _message,\n                    _messageBus,\n                    _fee\n                );\n        } else if (\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn ||\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn\n        ) {\n            return\n                sendMessageWithPegBridgeBurn(\n                    _bridgeSendType,\n                    _receiver,\n                    _token,\n                    _amount,\n                    _dstChainId,\n                    _nonce,\n                    _message,\n                    _messageBus,\n                    _fee\n                );\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated liquidity bridge transfer.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithLiquidityBridgeTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        address bridge = IMessageBus(_messageBus).liquidityBridge();\n        IERC20(_token).safeIncreaseAllowance(bridge, _amount);\n        IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n        bytes32 transferId = keccak256(\n            abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\n        );\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n            _receiver,\n            _dstChainId,\n            bridge,\n            transferId,\n            _message\n        );\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated OriginalTokenVault deposit.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithPegVaultDeposit(\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        address pegVault;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            pegVault = IMessageBus(_messageBus).pegVault();\n        } else {\n            pegVault = IMessageBus(_messageBus).pegVaultV2();\n        }\n        IERC20(_token).safeIncreaseAllowance(pegVault, _amount);\n        bytes32 transferId;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            IOriginalTokenVault(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n            transferId = keccak256(\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\n            );\n        } else {\n            transferId = IOriginalTokenVaultV2(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        }\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n            _receiver,\n            _dstChainId,\n            pegVault,\n            transferId,\n            _message\n        );\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus with an associated PeggedTokenBridge burn.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     * @param _messageBus The address of the MessageBus on this chain.\n     * @param _fee The fee amount to pay to MessageBus.\n     * @return The transfer ID.\n     */\n    function sendMessageWithPegBridgeBurn(\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        bytes memory _message,\n        address _messageBus,\n        uint256 _fee\n    ) internal returns (bytes32) {\n        address pegBridge;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            pegBridge = IMessageBus(_messageBus).pegBridge();\n        } else {\n            pegBridge = IMessageBus(_messageBus).pegBridgeV2();\n        }\n        IERC20(_token).safeIncreaseAllowance(pegBridge, _amount);\n        bytes32 transferId;\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            IPeggedTokenBridge(pegBridge).burn(_token, _amount, _receiver, _nonce);\n            transferId = keccak256(\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\n            );\n        } else {\n            transferId = IPeggedTokenBridgeV2(pegBridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n        }\n        // handle cases where certain tokens do not spend allowance for role-based burn\n        IERC20(_token).safeApprove(pegBridge, 0);\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\n            _receiver,\n            _dstChainId,\n            pegBridge,\n            transferId,\n            _message\n        );\n        return transferId;\n    }\n\n    /**\n     * @notice Sends a token transfer via a bridge.\n     * @param _receiver The address of the destination app contract.\n     * @param _token The address of the token to be sent.\n     * @param _amount The amount of tokens to be sent.\n     * @param _dstChainId The destination chain ID.\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\n     * transfer can be refunded.\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\n     */\n    function sendTokenTransfer(\n        address _receiver,\n        address _token,\n        uint256 _amount,\n        uint64 _dstChainId,\n        uint64 _nonce,\n        uint32 _maxSlippage,\n        MsgDataTypes.BridgeSendType _bridgeSendType,\n        address _bridge\n    ) internal {\n        IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\n            IBridge(_bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\n            IOriginalTokenVault(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\n            IPeggedTokenBridge(_bridge).burn(_token, _amount, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(_bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\n            IOriginalTokenVaultV2(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\n            IPeggedTokenBridgeV2(_bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(_bridge, 0);\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\n            IPeggedTokenBridgeV2(_bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\n            // handle cases where certain tokens do not spend allowance for role-based burn\n            IERC20(_token).safeApprove(_bridge, 0);\n        } else {\n            revert(\"bridge type not supported\");\n        }\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/messagebus/MessageBus.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"./MessageBusSender.sol\";\nimport \"./MessageBusReceiver.sol\";\n\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\n    constructor(\n        ISigsVerifier _sigsVerifier,\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    )\n        MessageBusSender(_sigsVerifier)\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\n    {}\n\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\n    // so calling init on this contract directly will guarantee to fail\n    function init(\n        address _liquidityBridge,\n        address _pegBridge,\n        address _pegVault,\n        address _pegBridgeV2,\n        address _pegVaultV2\n    ) external {\n        // MUST manually call ownable init and must only call once\n        initOwner();\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/message/messagebus/MessageBusSender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity 0.8.9;\n\nimport \"../../safeguard/Ownable.sol\";\nimport \"../../interfaces/ISigsVerifier.sol\";\n\ncontract MessageBusSender is Ownable {\n    ISigsVerifier public immutable sigsVerifier;\n\n    uint256 public feeBase;\n    uint256 public feePerByte;\n    mapping(address => uint256) public withdrawnFees;\n\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\n\n    event MessageWithTransfer(\n        address indexed sender,\n        address receiver,\n        uint256 dstChainId,\n        address bridge,\n        bytes32 srcTransferId,\n        bytes message,\n        uint256 fee\n    );\n\n    event FeeBaseUpdated(uint256 feeBase);\n    event FeePerByteUpdated(uint256 feePerByte);\n\n    constructor(ISigsVerifier _sigsVerifier) {\n        sigsVerifier = _sigsVerifier;\n    }\n\n    /**\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native gas token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessage(\n        address _receiver,\n        uint256 _dstChainId,\n        bytes calldata _message\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\n    }\n\n    /**\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\n     * A fee is charged in the native token.\n     * @param _receiver The address of the destination app contract.\n     * @param _dstChainId The destination chain ID.\n     * @param _srcBridge The bridge contract to send the transfer with.\n     * @param _srcTransferId The transfer ID.\n     * @param _dstChainId The destination chain ID.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     */\n    function sendMessageWithTransfer(\n        address _receiver,\n        uint256 _dstChainId,\n        address _srcBridge,\n        bytes32 _srcTransferId,\n        bytes calldata _message\n    ) external payable {\n        require(_dstChainId != block.chainid, \"Invalid chainId\");\n        uint256 minFee = calcFee(_message);\n        require(msg.value >= minFee, \"Insufficient fee\");\n        // SGN needs to verify\n        // 1. msg.sender matches sender of the src transfer\n        // 2. dstChainId matches dstChainId of the src transfer\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\n    }\n\n    /**\n     * @notice Withdraws message fee in the form of native gas token.\n     * @param _account The address receiving the fee.\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\n     * @param _signers The sorted list of signers.\n     * @param _powers The signing powers of the signers.\n     */\n    function withdrawFee(\n        address _account,\n        uint256 _cumulativeFee,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external {\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \"withdrawFee\"));\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\n        require(amount > 0, \"No new amount to withdraw\");\n        withdrawnFees[_account] = _cumulativeFee;\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\"\");\n        require(sent, \"failed to withdraw fee\");\n    }\n\n    /**\n     * @notice Calculates the required fee for the message.\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\n     @ @return The required fee.\n     */\n    function calcFee(bytes calldata _message) public view returns (uint256) {\n        return feeBase + _message.length * feePerByte;\n    }\n\n    // -------------------- Admin --------------------\n\n    function setFeePerByte(uint256 _fee) external onlyOwner {\n        feePerByte = _fee;\n        emit FeePerByteUpdated(feePerByte);\n    }\n\n    function setFeeBase(uint256 _fee) external onlyOwner {\n        feeBase = _fee;\n        emit FeeBaseUpdated(feeBase);\n    }\n}\n"
    },
    "sgn-v2-contracts/contracts/interfaces/ISigsVerifier.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\ninterface ISigsVerifier {\n    /**\n     * @notice Verifies that a message is signed by a quorum among the signers.\n     * @param _msg signed message\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\n     * @param _signers sorted list of current signers\n     * @param _powers powers of current signers\n     */\n    function verifySigs(\n        bytes memory _msg,\n        bytes[] calldata _sigs,\n        address[] calldata _signers,\n        uint256[] calldata _powers\n    ) external view;\n}\n"
    },
    "contracts/messages/MessageSender.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\nimport 'sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol';\nimport 'sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol';\n\nimport '../interfaces/IMessageSender.sol';\n\ncontract MessageSender is IMessageSender, OwnableUpgradeable {\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tenum ExecutionStatus {\n\t\tFail,\n\t\tSuccess,\n\t\tRetry\n\t}\n\n\taddress public srcChainPayment;\n\n\taddress public messageBus;\n\n\taddress public override receiver;\n\n\tuint64 public override dstChainId;\n\n\tevent SrcChainPaymentUpdated(address payment);\n\n\tevent MessageBusUpdated(address messageBus);\n\n\tevent ReceiverUpdated(address receiver);\n\n\tevent DstChainIdUpdated(uint64 dstChainId);\n\n\tevent MessageWithTransferRefund(address token, uint256 amount, bytes message, address executor);\n\n\tmodifier onlyMessageBus() {\n\t\trequire(msg.sender == messageBus, 'MessageReceiver: caller is not message bus');\n\t\t_;\n\t}\n\n\tmodifier onlySrcChainPayment() {\n\t\trequire(msg.sender == srcChainPayment, 'MessageSender: caller is not payment contract');\n\t\t_;\n\t}\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress _messageBus,\n\t\taddress _receiver,\n\t\tuint64 _dstChainId\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t_setMessageBus(_messageBus);\n\t\t_setReceiver(_receiver);\n\t\t_setDstChainId(_dstChainId);\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\taddress _messageBus,\n\t\taddress _receiver,\n\t\tuint64 _dstChainId\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t_setMessageBus(_messageBus);\n\t\t_setReceiver(_receiver);\n\t\t_setDstChainId(_dstChainId);\n\t}\n\n\tfunction sendMessageWithTransfer(\n\t\taddress token,\n\t\tuint256 amount,\n\t\tuint64 nonce,\n\t\tuint32 maxSlippage,\n\t\tbytes memory message,\n\t\tMsgDataTypes.BridgeSendType bridgeSendType\n\t) external payable onlySrcChainPayment returns (bytes32) {\n\t\tIERC20Upgradeable(token).transferFrom(msg.sender, address(this), amount);\n\t\tMessageSenderLib.sendMessageWithTransfer(receiver, token, amount, dstChainId, nonce, maxSlippage, message, bridgeSendType, messageBus, msg.value);\n\t}\n\n\tfunction executeMessageWithTransferRefund(\n        address _token,\n        uint256 _amount,\n        bytes calldata _message,\n        address executor\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\n\t\temit MessageWithTransferRefund(_token, _amount, _message, executor);\n        return ExecutionStatus.Success;\n    }\n\n\tfunction setSrcChainPayment(address _payment) external onlyOwner {\n\t\t_setSrcChainPayment(_payment);\n\t}\n\n\tfunction _setSrcChainPayment(address _payment) internal {\n\t\tsrcChainPayment = _payment;\n\t\temit SrcChainPaymentUpdated(_payment);\n\t}\n\n\tfunction setMessageBus(address messageBus) external onlyOwner {\n\t\t_setMessageBus(messageBus);\n\t}\n\n\tfunction _setMessageBus(address _messageBus) internal {\n\t\tmessageBus = _messageBus;\n\t\temit MessageBusUpdated(messageBus);\n\t}\n\n\tfunction setDstChainId(uint64 dstChainId) external onlyOwner {\n\t\t_setDstChainId(dstChainId);\n\t}\n\n\tfunction _setDstChainId(uint64 _dstChainId) internal {\n\t\tdstChainId = _dstChainId;\n\t\temit DstChainIdUpdated(_dstChainId);\n\t}\n\n\tfunction setReceiver(address _receiver) external onlyOwner {\n\t\t_setReceiver(_receiver);\n\t}\n\n\tfunction _setReceiver(address _receiver) internal {\n\t\treceiver = _receiver;\n\t\temit ReceiverUpdated(_receiver);\n\t}\n\n\tfunction calcFee(bytes memory message) public view override returns (uint256) {\n\t\treturn IMessageBus(messageBus).calcFee(message);\n\t}\n\n\tfunction messageId(\n\t\tMsgDataTypes.RouteInfo calldata route,\n\t\tuint64 dstChainId,\n\t\tbytes calldata message\n\t) external view override returns (bytes32) {\n\t\treturn\n\t\t\tkeccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageOnly, route.sender, route.receiver, route.srcChainId, route.srcTxHash, dstChainId, message));\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Mocks/TestToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\n\ncontract TestToken is ERC20 {\n\tconstructor(address minter) ERC20('USDC coin', 'USDC') {\n\t\t_mint(minter, 10**40);\n\t}\n}"
    },
    "contracts/resources/controllers/normal/ARStorageController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './NormalResourceController.sol';\n\ncontract ARStorageController is NormalResourceController {\n\tconstructor(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.ARStorage);\n\t}\n\n\tfunction initialize(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.ARStorage);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}