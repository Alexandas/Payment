{
  "address": "0xB92FCffb30fB16517439e667e045EEF041d5a48F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "MessageReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "MessageReceivedWithTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "MessageWithTransferRefund",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "drainToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeMessage",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferRefund",
      "outputs": [
        {
          "internalType": "enum IMessageReceiverApp.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_maxSlippage",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "enum MsgDataTypes.BridgeSendType",
          "name": "_bridgeSendType",
          "type": "uint8"
        }
      ],
      "name": "sendMessageWithTransfer",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e2af711f73d25effa725df06c77111464a0d4149ff55d3c366448cf365f0197",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xB92FCffb30fB16517439e667e045EEF041d5a48F",
    "transactionIndex": 0,
    "gasUsed": "2855787",
    "logsBloom": "0x
    "blockHash": "0xe729504dd7fdf5d9afbb550b3a3bc37704ea921396ceb68ef1ee4800efd26464",
    "transactionHash": "0x2e2af711f73d25effa725df06c77111464a0d4149ff55d3c366448cf365f0197",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 6833854,
        "transactionHash": "0x2e2af711f73d25effa725df06c77111464a0d4149ff55d3c366448cf365f0197",
        "address": "0xB92FCffb30fB16517439e667e045EEF041d5a48F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe729504dd7fdf5d9afbb550b3a3bc37704ea921396ceb68ef1ee4800efd26464"
      }
    ],
    "blockNumber": 6833854,
    "cumulativeGasUsed": "2855787",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF25170F86E4291a99a9A560032Fe9948b8BcFBB2"
  ],
  "solcInputHash": "cb553968ef04c2e6128d7a7d2374b264",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"MessageReceivedWithTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"MessageWithTransferRefund\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"drainToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessage\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferRefund\",\"outputs\":[{\"internalType\":\"enum IMessageReceiverApp.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_maxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"enum MsgDataTypes.BridgeSendType\",\"name\":\"_bridgeSendType\",\"type\":\"uint8\"}],\"name\":\"sendMessageWithTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"params\":{\"_amount\":\"The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.\",\"_executor\":\"Address who called the MessageBus execution function\",\"_message\":\"Arbitrary message bytes originated from and encoded by the source app contract\",\"_sender\":\"The address of the source app contract\",\"_srcChainId\":\"The source chain ID where the transfer is originated from\",\"_token\":\"The address of the token that comes out of the bridge\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Application to test message with transfer refund flow \",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)\":{\"notice\":\"Only called by MessageBus (MessageBusReceiver) if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns ExecutionStatus.Fail\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messages/MsgTest.sol\":\"MsgTest\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/messages/MsgTest.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport 'sgn-v2-contracts/contracts/message/framework/MessageSenderApp.sol';\\nimport 'sgn-v2-contracts/contracts/message/framework/MessageReceiverApp.sol';\\n\\n/** @title Application to test message with transfer refund flow */\\ncontract MsgTest is MessageSenderApp, MessageReceiverApp {\\n    using SafeERC20 for IERC20;\\n    uint64 public nonce;\\n\\n    event MessageReceivedWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes _message,\\n        address executor\\n    );\\n    event MessageWithTransferRefund(address _token, uint256 _amount, bytes _message, address executor);\\n    event MessageReceived(address _sender, uint64 _srcChainId, bytes _message, address executor);\\n\\n    constructor(address _messageBus) {\\n        messageBus = _messageBus;\\n    }\\n\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint32 _maxSlippage,\\n        bytes calldata _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType\\n    ) external payable {\\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\\n        bytes memory message = abi.encode(msg.sender, _message);\\n        sendMessageWithTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            nonce,\\n            _maxSlippage,\\n            message,\\n            _bridgeSendType,\\n            msg.value\\n        );\\n        nonce++;\\n    }\\n\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        emit MessageReceivedWithTransfer(_sender, _token, _amount, _srcChainId, _message, executor);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n\\n        emit MessageWithTransferRefund( _token, _amount, _message, executor);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        bytes memory message = abi.encode(nonce, _message);\\n        nonce++;\\n        sendMessage(_receiver, _dstChainId, message, msg.value);\\n    }\\n\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address executor\\n    ) external payable override onlyMessageBus returns (ExecutionStatus) {\\n        emit MessageReceived(_sender, _srcChainId, _message, executor);\\n        return ExecutionStatus.Success;\\n    }\\n\\n    function drainToken(address _token, uint256 _amount) external onlyOwner {\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n}\\n\",\"keccak256\":\"0x1c0dca6d49b50a2ad9b5e9da2a095005948a4f18cae7220863fb32cedca0f907\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IBridge {\\n    function send(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage\\n    ) external;\\n\\n    function relay(\\n        bytes calldata _relayRequest,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function transfers(bytes32 transferId) external view returns (bool);\\n\\n    function withdraws(bytes32 withdrawId) external view returns (bool);\\n\\n    function withdraw(\\n        bytes calldata _wdmsg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x5f5ba7dedac51bcc2cb40e4a39caa18d46704b659a576b6be36ed68e657c8251\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IOriginalTokenVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVault {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8b4e940c16d960a4f8f0516951c52afbeb31c9b8bbbda7523650aadee2d72369\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IOriginalTokenVaultV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IOriginalTokenVaultV2 {\\n    /**\\n     * @notice Lock original tokens to trigger mint at a remote chain's PeggedTokenBridge\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _mintChainId destination chainId to mint tokens\\n     * @param _mintAccount destination account to receive minted tokens\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function deposit(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _mintChainId,\\n        address _mintAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Withdraw locked original tokens triggered by a burn at a remote chain's PeggedTokenBridge.\\n     * @param _request The serialized Withdraw protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the bridge's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdraw(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc3d522d350cd42dc296fdea6ae75d7fe39244638161aadd1cbc70de13e34380d\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridge {\\n    /**\\n     * @notice Burn tokens to trigger withdrawal at a remote chain's OriginalTokenVault\\n     * @param _token local token address\\n     * @param _amount locked token amount\\n     * @param _withdrawAccount account who withdraw original tokens on the remote chain\\n     * @param _nonce user input to guarantee unique depositId\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        address _withdrawAccount,\\n        uint64 _nonce\\n    ) external;\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5adc3e5f1c8767c9f4580b499b16aba25f41934a2f945e9f0227b28d4b0405ae\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/IPeggedTokenBridgeV2.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IPeggedTokenBridgeV2 {\\n    /**\\n     * @notice Burn pegged tokens to trigger a cross-chain withdrawal of the original tokens at a remote chain's\\n     * OriginalTokenVault, or mint at another remote chain\\n     * @param _token The pegged token address.\\n     * @param _amount The amount to burn.\\n     * @param _toChainId If zero, withdraw from original vault; otherwise, the remote chain to mint tokens.\\n     * @param _toAccount The account to receive tokens on the remote chain\\n     * @param _nonce A number to guarantee unique depositId. Can be timestamp in practice.\\n     */\\n    function burn(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    // same with `burn` above, use openzeppelin ERC20Burnable interface\\n    function burnFrom(\\n        address _token,\\n        uint256 _amount,\\n        uint64 _toChainId,\\n        address _toAccount,\\n        uint64 _nonce\\n    ) external returns (bytes32);\\n\\n    /**\\n     * @notice Mint tokens triggered by deposit at a remote chain's OriginalTokenVault.\\n     * @param _request The serialized Mint protobuf.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function mint(\\n        bytes calldata _request,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external returns (bytes32);\\n\\n    function records(bytes32 recordId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xea5828630c131a1c7017360d4c1729c71bdeb5eaf366a30c9637c82795cea9d5\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/interfaces/ISigsVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface ISigsVerifier {\\n    /**\\n     * @notice Verifies that a message is signed by a quorum among the signers.\\n     * @param _msg signed message\\n     * @param _sigs list of signatures sorted by signer addresses in ascending order\\n     * @param _signers sorted list of current signers\\n     * @param _powers powers of current signers\\n     */\\n    function verifySigs(\\n        bytes memory _msg,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external view;\\n}\\n\",\"keccak256\":\"0x0d0b090d078a5f50ea7b751331614785e536fc09bcff28bfe08a60613ebca1ae\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/framework/MessageBusAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\nabstract contract MessageBusAddress is Ownable {\\n    event MessageBusUpdated(address messageBus);\\n\\n    address public messageBus;\\n\\n    function setMessageBus(address _messageBus) public onlyOwner {\\n        messageBus = _messageBus;\\n        emit MessageBusUpdated(messageBus);\\n    }\\n}\\n\",\"keccak256\":\"0x86255f1e2633760285b236e2bc144415f531090ddbdc2abfdd23a2b2d4d553e1\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/framework/MessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageReceiverApp is IMessageReceiverApp, MessageBusAddress {\\n    modifier onlyMessageBus() {\\n        require(msg.sender == messageBus, \\\"caller is not message bus\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable virtual override onlyMessageBus returns (ExecutionStatus) {}\\n}\\n\",\"keccak256\":\"0x83a77daf048cf19fa0a2c45eb577afb6d6363367fe012869201833e34a2b4e96\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/framework/MessageSenderApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\nimport \\\"../libraries/MessageSenderLib.sol\\\";\\nimport \\\"../messagebus/MessageBus.sol\\\";\\nimport \\\"./MessageBusAddress.sol\\\";\\n\\nabstract contract MessageSenderApp is MessageBusAddress {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Utility functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        uint256 _fee\\n    ) internal {\\n        MessageSenderLib.sendMessage(_receiver, _dstChainId, _message, messageBus, _fee);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        return\\n            MessageSenderLib.sendMessageWithTransfer(\\n                _receiver,\\n                _token,\\n                _amount,\\n                _dstChainId,\\n                _nonce,\\n                _maxSlippage,\\n                _message,\\n                _bridgeSendType,\\n                messageBus,\\n                _fee\\n            );\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType\\n    ) internal {\\n        address bridge;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            bridge = MessageBus(messageBus).liquidityBridge();\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            bridge = MessageBus(messageBus).pegVault();\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            bridge = MessageBus(messageBus).pegBridge();\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            bridge = MessageBus(messageBus).pegVaultV2();\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom\\n        ) {\\n            bridge = MessageBus(messageBus).pegBridgeV2();\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n        MessageSenderLib.sendTokenTransfer(\\n            _receiver,\\n            _token,\\n            _amount,\\n            _dstChainId,\\n            _nonce,\\n            _maxSlippage,\\n            _bridgeSendType,\\n            bridge\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xe168caa43845636ae67b9e198505b097264bf853dc913dba9341757188bdce5a\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/interfaces/IMessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\n\\ninterface IMessageBus {\\n    function liquidityBridge() external view returns (address);\\n\\n    function pegBridge() external view returns (address);\\n\\n    function pegBridgeV2() external view returns (address);\\n\\n    function pegVault() external view returns (address);\\n\\n    function pegVaultV2() external view returns (address);\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) external view returns (uint256);\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable;\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external;\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x17d7b296165800697f311fb52f0f0f149fc7ebcc200d4b557981aa258aa1e7c8\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/interfaces/IMessageReceiverApp.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\ninterface IMessageReceiverApp {\\n    enum ExecutionStatus {\\n        Fail, // execution failed, finalized\\n        Success, // execution succeeded, finalized\\n        Retry // execution rejected, can retry later\\n    }\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) if the process is originated from MessageBus (MessageBusSender)'s\\n     *         sendMessageWithTransfer it is only called when the tokens are checked to be arrived at this contract's address.\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransfer(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Only called by MessageBus (MessageBusReceiver) if\\n     *         1. executeMessageWithTransfer reverts, or\\n     *         2. executeMessageWithTransfer returns ExecutionStatus.Fail\\n     * @param _sender The address of the source app contract\\n     * @param _token The address of the token that comes out of the bridge\\n     * @param _amount The amount of tokens received at this contract through the cross-chain bridge.\\n     *        the contract that implements this contract can safely assume that the tokens will arrive before this\\n     *        function is called.\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver) to process refund of the original transfer from this contract\\n     * @param _token The token address of the original transfer\\n     * @param _amount The amount of the original transfer\\n     * @param _message The same message associated with the original transfer\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessageWithTransferRefund(\\n        address _token,\\n        uint256 _amount,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n\\n    /**\\n     * @notice Called by MessageBus (MessageBusReceiver)\\n     * @param _sender The address of the source app contract\\n     * @param _srcChainId The source chain ID where the transfer is originated from\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _executor Address who called the MessageBus execution function\\n     */\\n    function executeMessage(\\n        address _sender,\\n        uint64 _srcChainId,\\n        bytes calldata _message,\\n        address _executor\\n    ) external payable returns (ExecutionStatus);\\n}\\n\",\"keccak256\":\"0x9e4d6ec7303c40c1a8c897655c3d6ef6ae1f9fa7e8c806e7c6878ff01b51e67b\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/libraries/MessageSenderLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"./MsgDataTypes.sol\\\";\\n\\nlibrary MessageSenderLib {\\n    using SafeERC20 for IERC20;\\n\\n    // ============== Internal library functions called by apps ==============\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint64 _dstChainId,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal {\\n        IMessageBus(_messageBus).sendMessage{value: _fee}(_receiver, _dstChainId, _message);\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded. Only applicable to the {MsgDataTypes.BridgeSendType.Liquidity}.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            return\\n                sendMessageWithLiquidityBridgeTransfer(\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _maxSlippage,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit\\n        ) {\\n            return\\n                sendMessageWithPegVaultDeposit(\\n                    _bridgeSendType,\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else if (\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn ||\\n            _bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn\\n        ) {\\n            return\\n                sendMessageWithPegBridgeBurn(\\n                    _bridgeSendType,\\n                    _receiver,\\n                    _token,\\n                    _amount,\\n                    _dstChainId,\\n                    _nonce,\\n                    _message,\\n                    _messageBus,\\n                    _fee\\n                );\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated liquidity bridge transfer.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithLiquidityBridgeTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address bridge = IMessageBus(_messageBus).liquidityBridge();\\n        IERC20(_token).safeIncreaseAllowance(bridge, _amount);\\n        IBridge(bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        bytes32 transferId = keccak256(\\n            abi.encodePacked(address(this), _receiver, _token, _amount, _dstChainId, _nonce, uint64(block.chainid))\\n        );\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            bridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated OriginalTokenVault deposit.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegVaultDeposit(\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegVault;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            pegVault = IMessageBus(_messageBus).pegVault();\\n        } else {\\n            pegVault = IMessageBus(_messageBus).pegVaultV2();\\n        }\\n        IERC20(_token).safeIncreaseAllowance(pegVault, _amount);\\n        bytes32 transferId;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _dstChainId, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            transferId = IOriginalTokenVaultV2(pegVault).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        }\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegVault,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus with an associated PeggedTokenBridge burn.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     * @param _messageBus The address of the MessageBus on this chain.\\n     * @param _fee The fee amount to pay to MessageBus.\\n     * @return The transfer ID.\\n     */\\n    function sendMessageWithPegBridgeBurn(\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        bytes memory _message,\\n        address _messageBus,\\n        uint256 _fee\\n    ) internal returns (bytes32) {\\n        address pegBridge;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            pegBridge = IMessageBus(_messageBus).pegBridge();\\n        } else {\\n            pegBridge = IMessageBus(_messageBus).pegBridgeV2();\\n        }\\n        IERC20(_token).safeIncreaseAllowance(pegBridge, _amount);\\n        bytes32 transferId;\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(pegBridge).burn(_token, _amount, _receiver, _nonce);\\n            transferId = keccak256(\\n                abi.encodePacked(address(this), _token, _amount, _receiver, _nonce, uint64(block.chainid))\\n            );\\n        } else {\\n            transferId = IPeggedTokenBridgeV2(pegBridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n        }\\n        // handle cases where certain tokens do not spend allowance for role-based burn\\n        IERC20(_token).safeApprove(pegBridge, 0);\\n        IMessageBus(_messageBus).sendMessageWithTransfer{value: _fee}(\\n            _receiver,\\n            _dstChainId,\\n            pegBridge,\\n            transferId,\\n            _message\\n        );\\n        return transferId;\\n    }\\n\\n    /**\\n     * @notice Sends a token transfer via a bridge.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _token The address of the token to be sent.\\n     * @param _amount The amount of tokens to be sent.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _nonce A number input to guarantee uniqueness of transferId. Can be timestamp in practice.\\n     * @param _maxSlippage The max slippage accepted, given as percentage in point (pip). Eg. 5000 means 0.5%.\\n     * Must be greater than minimalMaxSlippage. Receiver is guaranteed to receive at least (100% - max slippage percentage) * amount or the\\n     * transfer can be refunded.\\n     * @param _bridgeSendType One of the {MsgDataTypes.BridgeSendType} enum.\\n     */\\n    function sendTokenTransfer(\\n        address _receiver,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _dstChainId,\\n        uint64 _nonce,\\n        uint32 _maxSlippage,\\n        MsgDataTypes.BridgeSendType _bridgeSendType,\\n        address _bridge\\n    ) internal {\\n        IERC20(_token).safeIncreaseAllowance(_bridge, _amount);\\n        if (_bridgeSendType == MsgDataTypes.BridgeSendType.Liquidity) {\\n            IBridge(_bridge).send(_receiver, _token, _amount, _dstChainId, _nonce, _maxSlippage);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegDeposit) {\\n            IOriginalTokenVault(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegBurn) {\\n            IPeggedTokenBridge(_bridge).burn(_token, _amount, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Deposit) {\\n            IOriginalTokenVaultV2(_bridge).deposit(_token, _amount, _dstChainId, _receiver, _nonce);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2Burn) {\\n            IPeggedTokenBridgeV2(_bridge).burn(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else if (_bridgeSendType == MsgDataTypes.BridgeSendType.PegV2BurnFrom) {\\n            IPeggedTokenBridgeV2(_bridge).burnFrom(_token, _amount, _dstChainId, _receiver, _nonce);\\n            // handle cases where certain tokens do not spend allowance for role-based burn\\n            IERC20(_token).safeApprove(_bridge, 0);\\n        } else {\\n            revert(\\\"bridge type not supported\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7e93a0efe4e607d69feb173cf7d2cf7785375ad56053f6ad3413ceda9fc2687\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4ac9e6e5be92e3e58adbcab75ef765458d37fd4908d764477a0f32a96f9ecbba\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/messagebus/MessageBus.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"./MessageBusSender.sol\\\";\\nimport \\\"./MessageBusReceiver.sol\\\";\\n\\ncontract MessageBus is MessageBusSender, MessageBusReceiver {\\n    constructor(\\n        ISigsVerifier _sigsVerifier,\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    )\\n        MessageBusSender(_sigsVerifier)\\n        MessageBusReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2)\\n    {}\\n\\n    // this is only to be called by Proxy via delegateCall as initOwner will require _owner is 0.\\n    // so calling init on this contract directly will guarantee to fail\\n    function init(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) external {\\n        // MUST manually call ownable init and must only call once\\n        initOwner();\\n        // we don't need sender init as _sigsVerifier is immutable so already in the deployed code\\n        initReceiver(_liquidityBridge, _pegBridge, _pegVault, _pegBridgeV2, _pegVaultV2);\\n    }\\n}\\n\",\"keccak256\":\"0x53f186341ed503c54f70ef9ca96a405b1d221721590ea611463fe88477a325a9\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/messagebus/MessageBusReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../libraries/MsgDataTypes.sol\\\";\\nimport \\\"../interfaces/IMessageReceiverApp.sol\\\";\\nimport \\\"../interfaces/IMessageBus.sol\\\";\\nimport \\\"../../interfaces/IBridge.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVault.sol\\\";\\nimport \\\"../../interfaces/IOriginalTokenVaultV2.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridge.sol\\\";\\nimport \\\"../../interfaces/IPeggedTokenBridgeV2.sol\\\";\\nimport \\\"../../safeguard/Ownable.sol\\\";\\n\\ncontract MessageBusReceiver is Ownable {\\n    mapping(bytes32 => MsgDataTypes.TxStatus) public executedMessages;\\n\\n    address public liquidityBridge; // liquidity bridge address\\n    address public pegBridge; // peg bridge address\\n    address public pegVault; // peg original vault address\\n    address public pegBridgeV2; // peg bridge address\\n    address public pegVaultV2; // peg original vault address\\n\\n    // minimum amount of gas needed by this contract before it tries to\\n    // deliver a message to the target contract.\\n    uint256 public preExecuteMessageGasUsage;\\n\\n    event Executed(\\n        MsgDataTypes.MsgType msgType,\\n        bytes32 msgId,\\n        MsgDataTypes.TxStatus status,\\n        address indexed receiver,\\n        uint64 srcChainId,\\n        bytes32 srcTxHash\\n    );\\n    event NeedRetry(MsgDataTypes.MsgType msgType, bytes32 msgId, uint64 srcChainId, bytes32 srcTxHash);\\n    event CallReverted(string reason); // help debug\\n\\n    event LiquidityBridgeUpdated(address liquidityBridge);\\n    event PegBridgeUpdated(address pegBridge);\\n    event PegVaultUpdated(address pegVault);\\n    event PegBridgeV2Updated(address pegBridgeV2);\\n    event PegVaultV2Updated(address pegVaultV2);\\n\\n    constructor(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) {\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    function initReceiver(\\n        address _liquidityBridge,\\n        address _pegBridge,\\n        address _pegVault,\\n        address _pegBridgeV2,\\n        address _pegVaultV2\\n    ) internal {\\n        require(liquidityBridge == address(0), \\\"liquidityBridge already set\\\");\\n        liquidityBridge = _liquidityBridge;\\n        pegBridge = _pegBridge;\\n        pegVault = _pegVault;\\n        pegBridgeV2 = _pegBridgeV2;\\n        pegVaultV2 = _pegVaultV2;\\n    }\\n\\n    // ============== functions called by executor ==============\\n\\n    /**\\n     * @notice Execute a message with a successful transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransfer(\\n        bytes calldata _message,\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public payable {\\n        // For message with token transfer, message Id is computed through transfer info\\n        // in order to guarantee that each transfer can only be used once.\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransfer\\\"));\\n        IBridge(liquidityBridge).verifySigs(\\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\\n            _sigs,\\n            _signers,\\n            _powers\\n        );\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransfer(_transfer, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(\\n                MsgDataTypes.MsgType.MessageWithTransfer,\\n                messageId,\\n                _transfer.srcChainId,\\n                _transfer.srcTxHash\\n            );\\n            return;\\n        } else {\\n            est = executeMessageWithTransferFallback(_transfer, _message);\\n            if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n                status = MsgDataTypes.TxStatus.Fallback;\\n            } else {\\n                status = MsgDataTypes.TxStatus.Fail;\\n            }\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\\n    }\\n\\n    /**\\n     * @notice Execute a message with a refunded transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _transfer The transfer info.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessageWithTransferRefund(\\n        bytes calldata _message, // the same message associated with the original transfer\\n        MsgDataTypes.TransferInfo calldata _transfer,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) public payable {\\n        // similar to executeMessageWithTransfer\\n        bytes32 messageId = verifyTransfer(_transfer);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"transfer already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"MessageWithTransferRefund\\\"));\\n        IBridge(liquidityBridge).verifySigs(\\n            abi.encodePacked(domain, messageId, _message, _transfer.srcTxHash),\\n            _sigs,\\n            _signers,\\n            _powers\\n        );\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessageWithTransferRefund(_transfer, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(\\n                MsgDataTypes.MsgType.MessageWithTransfer,\\n                messageId,\\n                _transfer.srcChainId,\\n                _transfer.srcTxHash\\n            );\\n            return;\\n        } else {\\n            status = MsgDataTypes.TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageWithTransferExecutedEvent(messageId, status, _transfer);\\n    }\\n\\n    /**\\n     * @notice Execute a message not associated with a transfer.\\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A relay must be signed-off by\\n     * +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function executeMessage(\\n        bytes calldata _message,\\n        MsgDataTypes.RouteInfo calldata _route,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external payable {\\n        // For message without associated token transfer, message Id is computed through message info,\\n        // in order to guarantee that each message can only be applied once\\n        bytes32 messageId = computeMessageOnlyId(_route, _message);\\n        require(executedMessages[messageId] == MsgDataTypes.TxStatus.Null, \\\"message already executed\\\");\\n        executedMessages[messageId] = MsgDataTypes.TxStatus.Pending;\\n\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"Message\\\"));\\n        IBridge(liquidityBridge).verifySigs(abi.encodePacked(domain, messageId), _sigs, _signers, _powers);\\n        MsgDataTypes.TxStatus status;\\n        IMessageReceiverApp.ExecutionStatus est = executeMessage(_route, _message);\\n        if (est == IMessageReceiverApp.ExecutionStatus.Success) {\\n            status = MsgDataTypes.TxStatus.Success;\\n        } else if (est == IMessageReceiverApp.ExecutionStatus.Retry) {\\n            executedMessages[messageId] = MsgDataTypes.TxStatus.Null;\\n            emit NeedRetry(MsgDataTypes.MsgType.MessageOnly, messageId, _route.srcChainId, _route.srcTxHash);\\n            return;\\n        } else {\\n            status = MsgDataTypes.TxStatus.Fail;\\n        }\\n        executedMessages[messageId] = status;\\n        emitMessageOnlyExecutedEvent(messageId, status, _route);\\n    }\\n\\n    // ================= utils (to avoid stack too deep) =================\\n\\n    function emitMessageWithTransferExecutedEvent(\\n        bytes32 _messageId,\\n        MsgDataTypes.TxStatus _status,\\n        MsgDataTypes.TransferInfo calldata _transfer\\n    ) private {\\n        emit Executed(\\n            MsgDataTypes.MsgType.MessageWithTransfer,\\n            _messageId,\\n            _status,\\n            _transfer.receiver,\\n            _transfer.srcChainId,\\n            _transfer.srcTxHash\\n        );\\n    }\\n\\n    function emitMessageOnlyExecutedEvent(\\n        bytes32 _messageId,\\n        MsgDataTypes.TxStatus _status,\\n        MsgDataTypes.RouteInfo calldata _route\\n    ) private {\\n        emit Executed(\\n            MsgDataTypes.MsgType.MessageOnly,\\n            _messageId,\\n            _status,\\n            _route.receiver,\\n            _route.srcChainId,\\n            _route.srcTxHash\\n        );\\n    }\\n\\n    function executeMessageWithTransfer(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransfer.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferFallback(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferFallback.selector,\\n                _transfer.sender,\\n                _transfer.token,\\n                _transfer.amount,\\n                _transfer.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function executeMessageWithTransferRefund(MsgDataTypes.TransferInfo calldata _transfer, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_transfer.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessageWithTransferRefund.selector,\\n                _transfer.token,\\n                _transfer.amount,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function verifyTransfer(MsgDataTypes.TransferInfo calldata _transfer) private view returns (bytes32) {\\n        bytes32 transferId;\\n        address bridgeAddr;\\n        if (_transfer.t == MsgDataTypes.TransferType.LqRelay) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.sender,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.srcChainId,\\n                    uint64(block.chainid),\\n                    _transfer.refId\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).transfers(transferId) == true, \\\"bridge relay not exist\\\");\\n        } else if (_transfer.t == MsgDataTypes.TransferType.LqWithdraw) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    uint64(block.chainid),\\n                    _transfer.wdseq,\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount\\n                )\\n            );\\n            bridgeAddr = liquidityBridge;\\n            require(IBridge(bridgeAddr).withdraws(transferId) == true, \\\"bridge withdraw not exist\\\");\\n        } else if (\\n            _transfer.t == MsgDataTypes.TransferType.PegMint || _transfer.t == MsgDataTypes.TransferType.PegWithdraw\\n        ) {\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId\\n                )\\n            );\\n            if (_transfer.t == MsgDataTypes.TransferType.PegMint) {\\n                bridgeAddr = pegBridge;\\n                require(IPeggedTokenBridge(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // _transfer.t == MsgDataTypes.TransferType.PegWithdraw\\n                bridgeAddr = pegVault;\\n                require(IOriginalTokenVault(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        } else if (\\n            _transfer.t == MsgDataTypes.TransferType.PegV2Mint || _transfer.t == MsgDataTypes.TransferType.PegV2Withdraw\\n        ) {\\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\\n                bridgeAddr = pegBridgeV2;\\n            } else {\\n                // MsgDataTypes.TransferType.PegV2Withdraw\\n                bridgeAddr = pegVaultV2;\\n            }\\n            transferId = keccak256(\\n                abi.encodePacked(\\n                    _transfer.receiver,\\n                    _transfer.token,\\n                    _transfer.amount,\\n                    _transfer.sender,\\n                    _transfer.srcChainId,\\n                    _transfer.refId,\\n                    bridgeAddr\\n                )\\n            );\\n            if (_transfer.t == MsgDataTypes.TransferType.PegV2Mint) {\\n                require(IPeggedTokenBridgeV2(bridgeAddr).records(transferId) == true, \\\"mint record not exist\\\");\\n            } else {\\n                // MsgDataTypes.TransferType.PegV2Withdraw\\n                require(IOriginalTokenVaultV2(bridgeAddr).records(transferId) == true, \\\"withdraw record not exist\\\");\\n            }\\n        }\\n        return keccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageWithTransfer, bridgeAddr, transferId));\\n    }\\n\\n    function computeMessageOnlyId(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encodePacked(\\n                    MsgDataTypes.MsgType.MessageOnly,\\n                    _route.sender,\\n                    _route.receiver,\\n                    _route.srcChainId,\\n                    _route.srcTxHash,\\n                    uint64(block.chainid),\\n                    _message\\n                )\\n            );\\n    }\\n\\n    function executeMessage(MsgDataTypes.RouteInfo calldata _route, bytes calldata _message)\\n        private\\n        returns (IMessageReceiverApp.ExecutionStatus)\\n    {\\n        uint256 gasLeftBeforeExecution = gasleft();\\n        (bool ok, bytes memory res) = address(_route.receiver).call{value: msg.value}(\\n            abi.encodeWithSelector(\\n                IMessageReceiverApp.executeMessage.selector,\\n                _route.sender,\\n                _route.srcChainId,\\n                _message,\\n                msg.sender\\n            )\\n        );\\n        if (ok) {\\n            return abi.decode((res), (IMessageReceiverApp.ExecutionStatus));\\n        }\\n        handleExecutionRevert(gasLeftBeforeExecution, res);\\n        return IMessageReceiverApp.ExecutionStatus.Fail;\\n    }\\n\\n    function handleExecutionRevert(uint256 _gasLeftBeforeExecution, bytes memory _returnData) private {\\n        uint256 gasLeftAfterExecution = gasleft();\\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\\n            // if this happens, the executor must have not provided sufficient gas limit,\\n            // then the tx should revert instead of recording a non-retryable failure status\\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\\n            assembly {\\n                invalid()\\n            }\\n        }\\n        emit CallReverted(getRevertMsg(_returnData));\\n    }\\n\\n    // https://ethereum.stackexchange.com/a/83577\\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\\n    function getRevertMsg(bytes memory _returnData) private pure returns (string memory) {\\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\\n        if (_returnData.length < 68) return \\\"Transaction reverted silently\\\";\\n        assembly {\\n            // Slice the sighash.\\n            _returnData := add(_returnData, 0x04)\\n        }\\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\\n    }\\n\\n    // ================= helper functions =====================\\n\\n    /**\\n     * @notice combine bridge transfer and msg execution calls into a single tx\\n     * @dev caller needs to get the required input params from SGN\\n     * @param _transferParams params to call bridge transfer\\n     * @param _msgParams params to execute message\\n     */\\n    function transferAndExecuteMsg(\\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\\n    ) external {\\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\\n        executeMessageWithTransfer(\\n            _msgParams.message,\\n            _msgParams.transfer,\\n            _msgParams.sigs,\\n            _msgParams.signers,\\n            _msgParams.powers\\n        );\\n    }\\n\\n    /**\\n     * @notice combine bridge refund and msg execution calls into a single tx\\n     * @dev caller needs to get the required input params from SGN\\n     * @param _transferParams params to call bridge transfer for refund\\n     * @param _msgParams params to execute message for refund\\n     */\\n    function refundAndExecuteMsg(\\n        MsgDataTypes.BridgeTransferParams calldata _transferParams,\\n        MsgDataTypes.MsgWithTransferExecutionParams calldata _msgParams\\n    ) external {\\n        _bridgeTransfer(_msgParams.transfer.t, _transferParams);\\n        executeMessageWithTransferRefund(\\n            _msgParams.message,\\n            _msgParams.transfer,\\n            _msgParams.sigs,\\n            _msgParams.signers,\\n            _msgParams.powers\\n        );\\n    }\\n\\n    function _bridgeTransfer(MsgDataTypes.TransferType t, MsgDataTypes.BridgeTransferParams calldata _transferParams)\\n        private\\n    {\\n        if (t == MsgDataTypes.TransferType.LqRelay) {\\n            IBridge(liquidityBridge).relay(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.LqWithdraw) {\\n            IBridge(liquidityBridge).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegMint) {\\n            IPeggedTokenBridge(pegBridge).mint(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegV2Mint) {\\n            IPeggedTokenBridgeV2(pegBridgeV2).mint(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegWithdraw) {\\n            IOriginalTokenVault(pegVault).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        } else if (t == MsgDataTypes.TransferType.PegV2Withdraw) {\\n            IOriginalTokenVaultV2(pegVaultV2).withdraw(\\n                _transferParams.request,\\n                _transferParams.sigs,\\n                _transferParams.signers,\\n                _transferParams.powers\\n            );\\n        }\\n    }\\n\\n    // ================= contract config =================\\n\\n    function setLiquidityBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        liquidityBridge = _addr;\\n        emit LiquidityBridgeUpdated(liquidityBridge);\\n    }\\n\\n    function setPegBridge(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridge = _addr;\\n        emit PegBridgeUpdated(pegBridge);\\n    }\\n\\n    function setPegVault(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVault = _addr;\\n        emit PegVaultUpdated(pegVault);\\n    }\\n\\n    function setPegBridgeV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegBridgeV2 = _addr;\\n        emit PegBridgeV2Updated(pegBridgeV2);\\n    }\\n\\n    function setPegVaultV2(address _addr) public onlyOwner {\\n        require(_addr != address(0), \\\"invalid address\\\");\\n        pegVaultV2 = _addr;\\n        emit PegVaultV2Updated(pegVaultV2);\\n    }\\n\\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\\n        preExecuteMessageGasUsage = _usage;\\n    }\\n}\\n\",\"keccak256\":\"0xbb0c4d132d3860f9f48326558d3b032185a97d565ffc449e6b97ec2d10e27bc0\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/messagebus/MessageBusSender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"../../safeguard/Ownable.sol\\\";\\nimport \\\"../../interfaces/ISigsVerifier.sol\\\";\\n\\ncontract MessageBusSender is Ownable {\\n    ISigsVerifier public immutable sigsVerifier;\\n\\n    uint256 public feeBase;\\n    uint256 public feePerByte;\\n    mapping(address => uint256) public withdrawnFees;\\n\\n    event Message(address indexed sender, address receiver, uint256 dstChainId, bytes message, uint256 fee);\\n\\n    event MessageWithTransfer(\\n        address indexed sender,\\n        address receiver,\\n        uint256 dstChainId,\\n        address bridge,\\n        bytes32 srcTransferId,\\n        bytes message,\\n        uint256 fee\\n    );\\n\\n    event FeeBaseUpdated(uint256 feeBase);\\n    event FeePerByteUpdated(uint256 feePerByte);\\n\\n    constructor(ISigsVerifier _sigsVerifier) {\\n        sigsVerifier = _sigsVerifier;\\n    }\\n\\n    /**\\n     * @notice Sends a message to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native gas token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessage(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        emit Message(msg.sender, _receiver, _dstChainId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Sends a message associated with a transfer to an app on another chain via MessageBus without an associated transfer.\\n     * A fee is charged in the native token.\\n     * @param _receiver The address of the destination app contract.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _srcBridge The bridge contract to send the transfer with.\\n     * @param _srcTransferId The transfer ID.\\n     * @param _dstChainId The destination chain ID.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     */\\n    function sendMessageWithTransfer(\\n        address _receiver,\\n        uint256 _dstChainId,\\n        address _srcBridge,\\n        bytes32 _srcTransferId,\\n        bytes calldata _message\\n    ) external payable {\\n        require(_dstChainId != block.chainid, \\\"Invalid chainId\\\");\\n        uint256 minFee = calcFee(_message);\\n        require(msg.value >= minFee, \\\"Insufficient fee\\\");\\n        // SGN needs to verify\\n        // 1. msg.sender matches sender of the src transfer\\n        // 2. dstChainId matches dstChainId of the src transfer\\n        // 3. bridge is either liquidity bridge, peg src vault, or peg dst bridge\\n        emit MessageWithTransfer(msg.sender, _receiver, _dstChainId, _srcBridge, _srcTransferId, _message, msg.value);\\n    }\\n\\n    /**\\n     * @notice Withdraws message fee in the form of native gas token.\\n     * @param _account The address receiving the fee.\\n     * @param _cumulativeFee The cumulative fee credited to the account. Tracked by SGN.\\n     * @param _sigs The list of signatures sorted by signing addresses in ascending order. A withdrawal must be\\n     * signed-off by +2/3 of the sigsVerifier's current signing power to be delivered.\\n     * @param _signers The sorted list of signers.\\n     * @param _powers The signing powers of the signers.\\n     */\\n    function withdrawFee(\\n        address _account,\\n        uint256 _cumulativeFee,\\n        bytes[] calldata _sigs,\\n        address[] calldata _signers,\\n        uint256[] calldata _powers\\n    ) external {\\n        bytes32 domain = keccak256(abi.encodePacked(block.chainid, address(this), \\\"withdrawFee\\\"));\\n        sigsVerifier.verifySigs(abi.encodePacked(domain, _account, _cumulativeFee), _sigs, _signers, _powers);\\n        uint256 amount = _cumulativeFee - withdrawnFees[_account];\\n        require(amount > 0, \\\"No new amount to withdraw\\\");\\n        withdrawnFees[_account] = _cumulativeFee;\\n        (bool sent, ) = _account.call{value: amount, gas: 50000}(\\\"\\\");\\n        require(sent, \\\"failed to withdraw fee\\\");\\n    }\\n\\n    /**\\n     * @notice Calculates the required fee for the message.\\n     * @param _message Arbitrary message bytes to be decoded by the destination app contract.\\n     @ @return The required fee.\\n     */\\n    function calcFee(bytes calldata _message) public view returns (uint256) {\\n        return feeBase + _message.length * feePerByte;\\n    }\\n\\n    // -------------------- Admin --------------------\\n\\n    function setFeePerByte(uint256 _fee) external onlyOwner {\\n        feePerByte = _fee;\\n        emit FeePerByteUpdated(feePerByte);\\n    }\\n\\n    function setFeeBase(uint256 _fee) external onlyOwner {\\n        feeBase = _fee;\\n        emit FeeBaseUpdated(feeBase);\\n    }\\n}\\n\",\"keccak256\":\"0x0b7418b4a791e6b69fbd788b64b01af78f136c2fe1c5be0372ceef74c458e8aa\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/safeguard/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n *\\n * This adds a normal func that setOwner if _owner is address(0). So we can't allow\\n * renounceOwnership. So we can support Proxy based upgradable contract\\n */\\nabstract contract Ownable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Only to be called by inherit contracts, in their init func called by Proxy\\n     * we require _owner == address(0), which is only possible when it's a delegateCall\\n     * because constructor sets _owner in contract state.\\n     */\\n    function initOwner() internal {\\n        require(_owner == address(0), \\\"owner already set\\\");\\n        _setOwner(msg.sender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x2a92103195b8dce0f34fdf9bf7f94ddf38bf8edf0c0fd4be21323c47016687e9\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80639c649fdf116100645780639c649fdf146101ac5780639d4323be146101dc578063a1a227fa14610205578063affed0e014610230578063c81739cd1461025b578063f2fde38b14610277576100a7565b80630bcb4982146100ac578063547cad12146100dc5780635ab7afc6146101055780637767b8d7146101355780637cd2bffc146101515780638da5cb5b14610181575b600080fd5b6100c660048036038101906100c19190611d5c565b6102a0565b6040516100d39190611e5b565b60405180910390f35b3480156100e857600080fd5b5061010360048036038101906100fe9190611e76565b61037e565b005b61011f600480360381019061011a9190611ee3565b610490565b60405161012c9190611e5b565b60405180910390f35b61014f600480360381019061014a9190611ff3565b61052d565b005b61016b600480360381019061016691906121f6565b610602565b6040516101789190611e5b565b60405180910390f35b34801561018d57600080fd5b506101966106e3565b6040516101a391906122ae565b60405180910390f35b6101c660048036038101906101c191906122c9565b61070c565b6040516101d39190611e5b565b60405180910390f35b3480156101e857600080fd5b5061020360048036038101906101fe9190612351565b6107ea565b005b34801561021157600080fd5b5061021a61088e565b60405161022791906122ae565b60405180910390f35b34801561023c57600080fd5b506102456108b4565b60405161025291906123a0565b60405180910390f35b610275600480360381019061027091906123bb565b6108ce565b005b34801561028357600080fd5b5061029e60048036038101906102999190611e76565b61096c565b005b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610332576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103299061248c565b60405180910390fd5b7f9afeef02b2dc7c87e4d0fe67945dedf1c4ee5bcf5cdf26f94fb1837859816f3386868686866040516103699594939291906124f9565b60405180910390a16001905095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff1661039d6106e3565b73ffffffffffffffffffffffffffffffffffffffff16146103f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ea90612593565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161048591906122ae565b60405180910390a150565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610522576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105199061248c565b60405180910390fd5b979650505050505050565b61055a3330888a73ffffffffffffffffffffffffffffffffffffffff16610a5d909392919063ffffffff16565b6000338484604051602001610571939291906125b3565b60405160208183030381529060405290506105a989898989600160149054906101000a900467ffffffffffffffff168a878934610ae6565b506001601481819054906101000a900467ffffffffffffffff16809291906105d090612614565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610694576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068b9061248c565b60405180910390fd5b7fa7dcc50f788db21d7b8b12825c0dff2107eea2711904867a3660f752d5bc8a458787878787876040516106cd969594939291906126bc565b60405180910390a1600190509695505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461079e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107959061248c565b60405180910390fd5b7fc6b15dc748ae76c030485fa454af6e26ba43d301699a1c716e08e74e3c759e9f86868686866040516107d5959493929190612724565b60405180910390a16001905095945050505050565b3373ffffffffffffffffffffffffffffffffffffffff166108096106e3565b73ffffffffffffffffffffffffffffffffffffffff161461085f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085690612593565b60405180910390fd5b61088a33828473ffffffffffffffffffffffffffffffffffffffff16610b2b9092919063ffffffff16565b5050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600160149054906101000a900467ffffffffffffffff1681565b6000600160149054906101000a900467ffffffffffffffff1683836040516020016108fb93929190612772565b60405160208183030381529060405290506001601481819054906101000a900467ffffffffffffffff168092919061093290612614565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505061096585858334610bb1565b5050505050565b3373ffffffffffffffffffffffffffffffffffffffff1661098b6106e3565b73ffffffffffffffffffffffffffffffffffffffff16146109e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d890612593565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610a51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4890612816565b60405180910390fd5b610a5a81610be6565b50565b610ae0846323b872dd60e01b858585604051602401610a7e93929190612836565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610caa565b50505050565b6000610b1c8a8a8a8a8a8a8a8a600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168b610d71565b90509998505050505050505050565b610bac8363a9059cbb60e01b8484604051602401610b4a92919061286d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610caa565b505050565b610be0848484600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685610ee9565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000610d0c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610f609092919063ffffffff16565b9050600081511115610d6c5780806020019051810190610d2c91906128ce565b610d6b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d629061296d565b60405180910390fd5b5b505050565b600060016006811115610d8757610d86611de4565b5b846006811115610d9a57610d99611de4565b5b1415610db857610db18b8b8b8b8b8b8b8a8a610f78565b9050610edb565b60026006811115610dcc57610dcb611de4565b5b846006811115610ddf57610dde611de4565b5b1480610e0f575060046006811115610dfa57610df9611de4565b5b846006811115610e0d57610e0c611de4565b5b145b15610e2c57610e25848c8c8c8c8c8b8a8a611158565b9050610edb565b60036006811115610e4057610e3f611de4565b5b846006811115610e5357610e52611de4565b5b1480610e83575060056006811115610e6e57610e6d611de4565b5b846006811115610e8157610e80611de4565b5b145b15610ea057610e99848c8c8c8c8c8b8a8a6114b1565b9050610edb565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed2906129d9565b60405180910390fd5b9a9950505050505050505050565b8173ffffffffffffffffffffffffffffffffffffffff16639f3ce55a828787876040518563ffffffff1660e01b8152600401610f2793929190612a34565b6000604051808303818588803b158015610f4057600080fd5b505af1158015610f54573d6000803e3d6000fd5b50505050505050505050565b6060610f6f8484600085611832565b90509392505050565b6000808373ffffffffffffffffffffffffffffffffffffffff166382980dc46040518163ffffffff1660e01b815260040160206040518083038186803b158015610fc157600080fd5b505afa158015610fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff99190612a87565b9050611026818a8c73ffffffffffffffffffffffffffffffffffffffff166119469092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663a5977fbb8c8c8c8c8c8c6040518763ffffffff1660e01b815260040161106996959493929190612ac3565b600060405180830381600087803b15801561108357600080fd5b505af1158015611097573d6000803e3d6000fd5b505050506000308c8c8c8c8c466040516020016110ba9796959493929190612bc3565b6040516020818303038152906040528051906020012090508473ffffffffffffffffffffffffffffffffffffffff16634289fbb3858e8c86868c6040518763ffffffff1660e01b8152600401611114959493929190612c5d565b6000604051808303818588803b15801561112d57600080fd5b505af1158015611141573d6000803e3d6000fd5b505050505080925050509998505050505050505050565b6000806002600681111561116f5761116e611de4565b5b8b600681111561118257611181611de4565b5b141561120d578373ffffffffffffffffffffffffffffffffffffffff1663d8257d176040518163ffffffff1660e01b815260040160206040518083038186803b1580156111ce57600080fd5b505afa1580156111e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112069190612a87565b905061128e565b8373ffffffffffffffffffffffffffffffffffffffff1663c66a9c5a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561125357600080fd5b505afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128b9190612a87565b90505b6112b981898b73ffffffffffffffffffffffffffffffffffffffff166119469092919063ffffffff16565b6000600260068111156112cf576112ce611de4565b5b8c60068111156112e2576112e1611de4565b5b1415611395578173ffffffffffffffffffffffffffffffffffffffff1663234636248b8b8b8f8c6040518663ffffffff1660e01b8152600401611329959493929190612cb7565b600060405180830381600087803b15801561134357600080fd5b505af1158015611357573d6000803e3d6000fd5b50505050308a8a8a8e8b466040516020016113789796959493929190612d0a565b60405160208183030381529060405280519060200120905061142b565b8173ffffffffffffffffffffffffffffffffffffffff1663234636248b8b8b8f8c6040518663ffffffff1660e01b81526004016113d6959493929190612cb7565b602060405180830381600087803b1580156113f057600080fd5b505af1158015611404573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114289190612db7565b90505b8473ffffffffffffffffffffffffffffffffffffffff16634289fbb3858d8b86868c6040518763ffffffff1660e01b815260040161146d959493929190612c5d565b6000604051808303818588803b15801561148657600080fd5b505af115801561149a573d6000803e3d6000fd5b505050505080925050509998505050505050505050565b600080600360068111156114c8576114c7611de4565b5b8b60068111156114db576114da611de4565b5b1415611566578373ffffffffffffffffffffffffffffffffffffffff1663dfa2dbaf6040518163ffffffff1660e01b815260040160206040518083038186803b15801561152757600080fd5b505afa15801561153b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155f9190612a87565b90506115e7565b8373ffffffffffffffffffffffffffffffffffffffff166395b12c276040518163ffffffff1660e01b815260040160206040518083038186803b1580156115ac57600080fd5b505afa1580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e49190612a87565b90505b61161281898b73ffffffffffffffffffffffffffffffffffffffff166119469092919063ffffffff16565b60006003600681111561162857611627611de4565b5b8c600681111561163b5761163a611de4565b5b14156116ea578173ffffffffffffffffffffffffffffffffffffffff1663de790c7e8b8b8e8b6040518563ffffffff1660e01b81526004016116809493929190612de4565b600060405180830381600087803b15801561169a57600080fd5b505af11580156116ae573d6000803e3d6000fd5b50505050308a8a8d8a466040516020016116cd96959493929190612e29565b604051602081830303815290604052805190602001209050611780565b8173ffffffffffffffffffffffffffffffffffffffff1663a00293018b8b8b8f8c6040518663ffffffff1660e01b815260040161172b959493929190612cb7565b602060405180830381600087803b15801561174557600080fd5b505af1158015611759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177d9190612db7565b90505b6117ac8260008c73ffffffffffffffffffffffffffffffffffffffff16611a679092919063ffffffff16565b8473ffffffffffffffffffffffffffffffffffffffff16634289fbb3858d8b86868c6040518763ffffffff1660e01b81526004016117ee959493929190612c5d565b6000604051808303818588803b15801561180757600080fd5b505af115801561181b573d6000803e3d6000fd5b505050505080925050509998505050505050505050565b606082471015611877576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186e90612f0b565b60405180910390fd5b61188085611bc5565b6118bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b690612f77565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516118e89190612fd3565b60006040518083038185875af1925050503d8060008114611925576040519150601f19603f3d011682016040523d82523d6000602084013e61192a565b606091505b509150915061193a828286611be8565b92505050949350505050565b6000818473ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30866040518363ffffffff1660e01b8152600401611984929190612fea565b60206040518083038186803b15801561199c57600080fd5b505afa1580156119b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d49190613028565b6119de9190613055565b9050611a618463095ea7b360e01b85846040516024016119ff92919061286d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610caa565b50505050565b6000811480611b00575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611aae929190612fea565b60206040518083038186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611afe9190613028565b145b611b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b369061311d565b60405180910390fd5b611bc08363095ea7b360e01b8484604051602401611b5e92919061286d565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610caa565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611bf857829050611c48565b600083511115611c0b5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3f9190613181565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c8e82611c63565b9050919050565b611c9e81611c83565b8114611ca957600080fd5b50565b600081359050611cbb81611c95565b92915050565b6000819050919050565b611cd481611cc1565b8114611cdf57600080fd5b50565b600081359050611cf181611ccb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d1c57611d1b611cf7565b5b8235905067ffffffffffffffff811115611d3957611d38611cfc565b5b602083019150836001820283011115611d5557611d54611d01565b5b9250929050565b600080600080600060808688031215611d7857611d77611c59565b5b6000611d8688828901611cac565b9550506020611d9788828901611ce2565b945050604086013567ffffffffffffffff811115611db857611db7611c5e565b5b611dc488828901611d06565b93509350506060611dd788828901611cac565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611e2457611e23611de4565b5b50565b6000819050611e3582611e13565b919050565b6000611e4582611e27565b9050919050565b611e5581611e3a565b82525050565b6000602082019050611e706000830184611e4c565b92915050565b600060208284031215611e8c57611e8b611c59565b5b6000611e9a84828501611cac565b91505092915050565b600067ffffffffffffffff82169050919050565b611ec081611ea3565b8114611ecb57600080fd5b50565b600081359050611edd81611eb7565b92915050565b600080600080600080600060c0888a031215611f0257611f01611c59565b5b6000611f108a828b01611cac565b9750506020611f218a828b01611cac565b9650506040611f328a828b01611ce2565b9550506060611f438a828b01611ece565b945050608088013567ffffffffffffffff811115611f6457611f63611c5e565b5b611f708a828b01611d06565b935093505060a0611f838a828b01611cac565b91505092959891949750929550565b600063ffffffff82169050919050565b611fab81611f92565b8114611fb657600080fd5b50565b600081359050611fc881611fa2565b92915050565b60078110611fdb57600080fd5b50565b600081359050611fed81611fce565b92915050565b60008060008060008060008060e0898b03121561201357612012611c59565b5b60006120218b828c01611cac565b98505060206120328b828c01611cac565b97505060406120438b828c01611ce2565b96505060606120548b828c01611ece565b95505060806120658b828c01611fb9565b94505060a089013567ffffffffffffffff81111561208657612085611c5e565b5b6120928b828c01611d06565b935093505060c06120a58b828c01611fde565b9150509295985092959890939650565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612103826120ba565b810181811067ffffffffffffffff82111715612122576121216120cb565b5b80604052505050565b6000612135611c4f565b905061214182826120fa565b919050565b600067ffffffffffffffff821115612161576121606120cb565b5b61216a826120ba565b9050602081019050919050565b82818337600083830152505050565b600061219961219484612146565b61212b565b9050828152602081018484840111156121b5576121b46120b5565b5b6121c0848285612177565b509392505050565b600082601f8301126121dd576121dc611cf7565b5b81356121ed848260208601612186565b91505092915050565b60008060008060008060c0878903121561221357612212611c59565b5b600061222189828a01611cac565b965050602061223289828a01611cac565b955050604061224389828a01611ce2565b945050606061225489828a01611ece565b935050608087013567ffffffffffffffff81111561227557612274611c5e565b5b61228189828a016121c8565b92505060a061229289828a01611cac565b9150509295509295509295565b6122a881611c83565b82525050565b60006020820190506122c3600083018461229f565b92915050565b6000806000806000608086880312156122e5576122e4611c59565b5b60006122f388828901611cac565b955050602061230488828901611ece565b945050604086013567ffffffffffffffff81111561232557612324611c5e565b5b61233188828901611d06565b9350935050606061234488828901611cac565b9150509295509295909350565b6000806040838503121561236857612367611c59565b5b600061237685828601611cac565b925050602061238785828601611ce2565b9150509250929050565b61239a81611ea3565b82525050565b60006020820190506123b56000830184612391565b92915050565b600080600080606085870312156123d5576123d4611c59565b5b60006123e387828801611cac565b94505060206123f487828801611ece565b935050604085013567ffffffffffffffff81111561241557612414611c5e565b5b61242187828801611d06565b925092505092959194509250565b600082825260208201905092915050565b7f63616c6c6572206973206e6f74206d6573736167652062757300000000000000600082015250565b600061247660198361242f565b915061248182612440565b602082019050919050565b600060208201905081810360008301526124a581612469565b9050919050565b6124b581611cc1565b82525050565b600082825260208201905092915050565b60006124d883856124bb565b93506124e5838584612177565b6124ee836120ba565b840190509392505050565b600060808201905061250e600083018861229f565b61251b60208301876124ac565b818103604083015261252e8185876124cc565b905061253d606083018461229f565b9695505050505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061257d60208361242f565b915061258882612547565b602082019050919050565b600060208201905081810360008301526125ac81612570565b9050919050565b60006040820190506125c8600083018661229f565b81810360208301526125db8184866124cc565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061261f82611ea3565b915067ffffffffffffffff82141561263a576126396125e5565b5b600182019050919050565b600081519050919050565b60005b8381101561266e578082015181840152602081019050612653565b8381111561267d576000848401525b50505050565b600061268e82612645565b61269881856124bb565b93506126a8818560208601612650565b6126b1816120ba565b840191505092915050565b600060c0820190506126d1600083018961229f565b6126de602083018861229f565b6126eb60408301876124ac565b6126f86060830186612391565b818103608083015261270a8185612683565b905061271960a083018461229f565b979650505050505050565b6000608082019050612739600083018861229f565b6127466020830187612391565b81810360408301526127598185876124cc565b9050612768606083018461229f565b9695505050505050565b60006040820190506127876000830186612391565b818103602083015261279a8184866124cc565b9050949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061280060268361242f565b915061280b826127a4565b604082019050919050565b6000602082019050818103600083015261282f816127f3565b9050919050565b600060608201905061284b600083018661229f565b612858602083018561229f565b61286560408301846124ac565b949350505050565b6000604082019050612882600083018561229f565b61288f60208301846124ac565b9392505050565b60008115159050919050565b6128ab81612896565b81146128b657600080fd5b50565b6000815190506128c8816128a2565b92915050565b6000602082840312156128e4576128e3611c59565b5b60006128f2848285016128b9565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612957602a8361242f565b9150612962826128fb565b604082019050919050565b600060208201905081810360008301526129868161294a565b9050919050565b7f6272696467652074797065206e6f7420737570706f7274656400000000000000600082015250565b60006129c360198361242f565b91506129ce8261298d565b602082019050919050565b600060208201905081810360008301526129f2816129b6565b9050919050565b6000819050919050565b6000612a1e612a19612a1484611ea3565b6129f9565b611cc1565b9050919050565b612a2e81612a03565b82525050565b6000606082019050612a49600083018661229f565b612a566020830185612a25565b8181036040830152612a688184612683565b9050949350505050565b600081519050612a8181611c95565b92915050565b600060208284031215612a9d57612a9c611c59565b5b6000612aab84828501612a72565b91505092915050565b612abd81611f92565b82525050565b600060c082019050612ad8600083018961229f565b612ae5602083018861229f565b612af260408301876124ac565b612aff6060830186612391565b612b0c6080830185612391565b612b1960a0830184612ab4565b979650505050505050565b60008160601b9050919050565b6000612b3c82612b24565b9050919050565b6000612b4e82612b31565b9050919050565b612b66612b6182611c83565b612b43565b82525050565b6000819050919050565b612b87612b8282611cc1565b612b6c565b82525050565b60008160c01b9050919050565b6000612ba582612b8d565b9050919050565b612bbd612bb882611ea3565b612b9a565b82525050565b6000612bcf828a612b55565b601482019150612bdf8289612b55565b601482019150612bef8288612b55565b601482019150612bff8287612b76565b602082019150612c0f8286612bac565b600882019150612c1f8285612bac565b600882019150612c2f8284612bac565b60088201915081905098975050505050505050565b6000819050919050565b612c5781612c44565b82525050565b600060a082019050612c72600083018861229f565b612c7f6020830187612a25565b612c8c604083018661229f565b612c996060830185612c4e565b8181036080830152612cab8184612683565b90509695505050505050565b600060a082019050612ccc600083018861229f565b612cd960208301876124ac565b612ce66040830186612391565b612cf3606083018561229f565b612d006080830184612391565b9695505050505050565b6000612d16828a612b55565b601482019150612d268289612b55565b601482019150612d368288612b76565b602082019150612d468287612bac565b600882019150612d568286612b55565b601482019150612d668285612bac565b600882019150612d768284612bac565b60088201915081905098975050505050505050565b612d9481612c44565b8114612d9f57600080fd5b50565b600081519050612db181612d8b565b92915050565b600060208284031215612dcd57612dcc611c59565b5b6000612ddb84828501612da2565b91505092915050565b6000608082019050612df9600083018761229f565b612e0660208301866124ac565b612e13604083018561229f565b612e206060830184612391565b95945050505050565b6000612e358289612b55565b601482019150612e458288612b55565b601482019150612e558287612b76565b602082019150612e658286612b55565b601482019150612e758285612bac565b600882019150612e858284612bac565b600882019150819050979650505050505050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612ef560268361242f565b9150612f0082612e99565b604082019050919050565b60006020820190508181036000830152612f2481612ee8565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612f61601d8361242f565b9150612f6c82612f2b565b602082019050919050565b60006020820190508181036000830152612f9081612f54565b9050919050565b600081905092915050565b6000612fad82612645565b612fb78185612f97565b9350612fc7818560208601612650565b80840191505092915050565b6000612fdf8284612fa2565b915081905092915050565b6000604082019050612fff600083018561229f565b61300c602083018461229f565b9392505050565b60008151905061302281611ccb565b92915050565b60006020828403121561303e5761303d611c59565b5b600061304c84828501613013565b91505092915050565b600061306082611cc1565b915061306b83611cc1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156130a05761309f6125e5565b5b828201905092915050565b7f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000602082015250565b600061310760368361242f565b9150613112826130ab565b604082019050919050565b60006020820190508181036000830152613136816130fa565b9050919050565b600081519050919050565b60006131538261313d565b61315d818561242f565b935061316d818560208601612650565b613176816120ba565b840191505092915050565b6000602082019050818103600083015261319b8184613148565b90509291505056fea264697066735822122078fa47ce21dbed70567c35f95d9db8a00a9cdf740d973d5ffa30b865c62eb73264736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "params": {
          "_amount": "The amount of tokens received at this contract through the cross-chain bridge.        the contract that implements this contract can safely assume that the tokens will arrive before this        function is called.",
          "_executor": "Address who called the MessageBus execution function",
          "_message": "Arbitrary message bytes originated from and encoded by the source app contract",
          "_sender": "The address of the source app contract",
          "_srcChainId": "The source chain ID where the transfer is originated from",
          "_token": "The address of the token that comes out of the bridge"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Application to test message with transfer refund flow ",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeMessageWithTransferFallback(address,address,uint256,uint64,bytes,address)": {
        "notice": "Only called by MessageBus (MessageBusReceiver) if         1. executeMessageWithTransfer reverts, or         2. executeMessageWithTransfer returns ExecutionStatus.Fail"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4448,
        "contract": "contracts/messages/MsgTest.sol:MsgTest",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1134,
        "contract": "contracts/messages/MsgTest.sol:MsgTest",
        "label": "messageBus",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 613,
        "contract": "contracts/messages/MsgTest.sol:MsgTest",
        "label": "nonce",
        "offset": 20,
        "slot": "1",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}