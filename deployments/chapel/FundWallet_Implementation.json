{
  "address": "0x3549894bb5feccc1AB63EbE33194b3e5ae9227f7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "BillTypedHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Billing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Charge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "enum IFundWallet.Purpose",
          "name": "purpose",
          "type": "uint8"
        }
      ],
      "name": "NonceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "RechargeTypedHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        }
      ],
      "name": "ResourceAdaptorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Spend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "WalletOwnerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adaptor",
      "outputs": [
        {
          "internalType": "contract IResourceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        }
      ],
      "name": "billHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "billTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeBill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "indexBlock",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ResourceData.ResourceType",
                      "name": "resourceType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBilling.BillEntry[]",
                  "name": "entries",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBilling.BillPayload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBilling.Bill",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "indexBlock",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ResourceData.ResourceType",
                      "name": "resourceType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBilling.BillEntry[]",
                  "name": "entries",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBilling.BillPayload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBilling.Bill",
          "name": "bills",
          "type": "tuple"
        }
      ],
      "name": "encodeBill",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        }
      ],
      "name": "hashTypedDataV4ForBill",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "hashTypedDataV4ForRecharge",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        },
        {
          "internalType": "contract IProviders",
          "name": "_providers",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rechargeTypes",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "billTypes",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "enum IFundWallet.Purpose",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providers",
      "outputs": [
        {
          "internalType": "contract IProviders",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recharge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rechargeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rechargeTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "setBillTypedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "setRechargeTypedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "spend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "transferWalletOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x795083f8b7e12ffb5f2cb081b154bdd0f4449b49e38af46f9af659c3f2e0ccd2",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x3549894bb5feccc1AB63EbE33194b3e5ae9227f7",
    "transactionIndex": 0,
    "gasUsed": "3241502",
    "logsBloom": "0x
    "blockHash": "0x7b6cbb999fd24eb48409ae17e9080cf0ca50a9296ccdef0fc797aaaf7c2884d3",
    "transactionHash": "0x795083f8b7e12ffb5f2cb081b154bdd0f4449b49e38af46f9af659c3f2e0ccd2",
    "logs": [],
    "blockNumber": 19172699,
    "cumulativeGasUsed": "3241502",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9e100c3eb450aac9cf89c4ce9965fe71",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BillTypedHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Billing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Charge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enum IFundWallet.Purpose\",\"name\":\"purpose\",\"type\":\"uint8\"}],\"name\":\"NonceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"RechargeTypedHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"}],\"name\":\"ResourceAdaptorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Spend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WalletOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adaptor\",\"outputs\":[{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"}],\"name\":\"billHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeBill\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.BillEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.BillPayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.Bill\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.BillEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.BillPayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.Bill\",\"name\":\"bills\",\"type\":\"tuple\"}],\"name\":\"encodeBill\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"}],\"name\":\"hashTypedDataV4ForBill\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashTypedDataV4ForRecharge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"},{\"internalType\":\"contract IProviders\",\"name\":\"_providers\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rechargeTypes\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"billTypes\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"enum IFundWallet.Purpose\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"contract IProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rechargeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rechargeTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"setBillTypedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"setRechargeTypedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"spend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferWalletOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wallets/FundWallet.sol\":\"FundWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\tfunction ownerWithdrawERC20(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\tfunction ownerWithdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'Payment: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x91f773098ab8e0d59ac381129cea676a148a5895581ce9e6e1d86b1c19415030\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\tmapping(address => bool) public pausers;\\n\\n\\tevent PauserAdded(address account);\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: Caller is not pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: Account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: Account is not pauser');\\n\\t\\tpausers[account] = false;\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc389407247a71425c067105ba1dbf04816e70f648e85f374a69b1cb72c40cb4c\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBilling.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\nimport '../resources/interfaces/IResourceAdaptor.sol';\\nimport './IProvidersWrapper.sol';\\n\\ninterface IBilling is IProvidersWrapper {\\n\\tstruct BillEntry {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct BillPayload {\\n\\t\\tuint256 indexBlock;\\n\\t\\tBillEntry[] entries;\\n\\t}\\n\\n\\tstruct Bill {\\n\\t\\tuint256 totalValue;\\n\\t\\tBillPayload[] payloads;\\n\\t}\\n\\n\\tevent BillTypedHashUpdated(bytes32 hash);\\n\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\tevent Billing(address provider, uint64 nonce, bytes32 account, bytes bill, uint256 amount);\\n\\n\\tfunction token() external view returns (IERC20Upgradeable);\\n\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n\\n}\\n\",\"keccak256\":\"0xa676df72dfbe7a97068f340df4b60f61236ef2ecbc8839508480358229c7b522\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IFundWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBilling.sol';\\n\\ninterface IFundWallet is IBilling {\\n\\n\\tenum Purpose {\\n\\t\\tNull,\\n\\t\\tRecharge,\\n\\t\\tSpend,\\n\\t\\tWithdraw\\n\\t}\\n\\n\\tstruct Wallet {\\n\\t\\taddress owner;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tevent RechargeTypedHashUpdated(bytes32 hash);\\n\\n\\tevent NonceUpdated(address provider, bytes32 account, uint64 nonce, Purpose purpose);\\n\\n\\tevent WalletOwnerTransferred(address provider, bytes32 account, address newOwner);\\n\\n\\tevent Charge(address provider, uint64 nonce, address owner, bytes32 account, uint256 amount);\\n\\n\\tevent Spend(address provider, uint64 nonce, bytes32 account, uint256 fee);\\n\\n\\tevent Withdrawn(address provider, uint64 nonce, bytes32 account, address to, uint256 amount);\\n\\n\\tfunction ownerOf(address provider, bytes32 account) external view returns (address);\\n\\n\\tfunction transferWalletOwner(address provider, bytes32 account, address newOwner, bytes memory signature) external;\\n\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external;\\n\\n\\tfunction withdraw(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\taddress to,\\n\\t\\tbytes memory billMessage,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256);\\n\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n}\\n\",\"keccak256\":\"0x2a55fcd360dcef693bfe455aa6717d490f699a7640c547f4afab03aba2f47947\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\ninterface IProviders {\\n\\tevent ProviderUpdated(address provider, address wallet);\\n\\n\\tevent RemoveProvider(address provider);\\n\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\tfunction wallets(address provider) external view returns (address);\\n\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe5c997043f05e2b105bbbfe9d006d7f2d0049f20ba6b2b74cc397cc65be2f77\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IProviders.sol';\\n\\ninterface IProvidersWrapper {\\n\\tevent ProvidersUpdated(IProviders providers);\\n\\n\\tfunction providers() external view returns (IProviders);\\n}\\n\",\"keccak256\":\"0x1d2ca264ab54ad537468faa0deb6ec04ec367fc013b31ed20debe31842eae560\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/providers/ProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '../access/Pauser.sol';\\nimport '../interfaces/IProvidersWrapper.sol';\\n\\nabstract contract ProvidersWrapper is IProvidersWrapper, Pauser {\\n\\tIProviders public override providers;\\n\\n\\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\\n\\t\\t_setProviders(_providers);\\n\\t}\\n\\n\\tfunction _setProviders(IProviders _providers) internal {\\n\\t\\tproviders = _providers;\\n\\t\\temit ProvidersUpdated(_providers);\\n\\t}\\n}\\n\",\"keccak256\":\"0x42a8d8694c5b5f3858788b270b57660ce7c14a1abef3e8a534fa985d78e41391\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\ninterface IResourceAdaptor {\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf60bb837ce179f97f69cc642ef0b775cc58c952824869b89df3d29729133b738\",\"license\":\"UNLICENSE\"},\"contracts/wallets/Billing.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol';\\n\\nimport '../providers/ProvidersWrapper.sol';\\nimport '../interfaces/IBilling.sol';\\nimport '../resources/interfaces/IResourceAdaptor.sol';\\n\\nabstract contract Billing is IBilling, ProvidersWrapper, EIP712Upgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tstruct SpendPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tbytes bill;\\n\\t\\tbytes signature;\\n\\t}\\n\\n\\tbytes32 public billTypedHash;\\n\\n\\tIERC20Upgradeable public override token;\\n\\n\\tIResourceAdaptor public override adaptor;\\n\\n\\tfunction __Init_Bill_Typed_Hash(string memory types) internal onlyInitializing {\\n\\t\\t_setBillTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\\n\\t\\t_setResourceAdaptor(_adaptor);\\n\\t}\\n\\n\\tfunction _setToken(IERC20Upgradeable _token) internal {\\n\\t\\ttoken = _token;\\n\\t\\temit TokenUpdated(_token);\\n\\t}\\n\\n\\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\\n\\t\\tadaptor = _adaptor;\\n\\t\\temit ResourceAdaptorUpdated(_adaptor);\\n\\t}\\n\\n\\tfunction _spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) internal returns (uint256 amount) {\\n\\t\\trequire(providers.isProvider(msg.sender), 'Billing: caller is not a provider');\\n\\t\\tbytes32 hash = hashTypedDataV4ForBill(provider, nonce, account, bill);\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'Billing: invalid signature');\\n\\t\\tif (bill.length > 0) {\\n\\t\\t\\tuint256 balance = balanceOf(provider, account);\\n\\t\\t\\tuint256 value = matchTokenDecimals(_validateBill(bill));\\n\\t\\t\\tamount = balance > value ? value : balance;\\n\\t\\t\\ttoken.safeTransfer(providers.wallets(provider), amount);\\n\\t\\t}\\n\\t\\temit Billing(provider, nonce, account, bill, amount);\\n\\t}\\n\\n\\tfunction billHash(\\n\\t\\taddress provider, \\n\\t\\tuint64 nonce, \\n\\t\\tbytes32 account, \\n\\t\\tbytes memory bill\\n\\t) public view returns(bytes32) {\\n\\t\\treturn keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tbillTypedHash,\\n\\t\\t\\t\\tprovider,\\n\\t\\t\\t\\tnonce,\\n\\t\\t\\t\\taccount,\\n\\t\\t\\t\\tkeccak256(bill)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction hashTypedDataV4ForBill(\\n\\t\\taddress provider, \\n\\t\\tuint64 nonce, \\n\\t\\tbytes32 account, \\n\\t\\tbytes memory bill\\n\\t) public view returns(bytes32) {\\n\\t\\treturn _hashTypedDataV4(billHash(provider, nonce, account, bill));\\n\\t}\\n\\n\\tfunction _validateBill(bytes memory bill) internal view returns (uint256 value) {\\n\\t\\tBill memory bills = abi.decode(bill, (Bill));\\n\\t\\trequire(bills.payloads.length > 0, 'Billing: empty bill payloads');\\n\\t\\tfor (uint256 i = 0; i < bills.payloads.length; i++) {\\n\\t\\t\\tBillPayload memory payload = bills.payloads[i];\\n\\t\\t\\trequire(payload.entries.length > 0, 'Billing: empty bill payload entry');\\n\\t\\t\\tfor (uint256 j = 0; j < payload.entries.length; j++) {\\n\\t\\t\\t\\tBillEntry memory entry = payload.entries[i];\\n\\t\\t\\t\\tuint256 billing = adaptor.getValueAt(entry.resourceType, entry.amount, payload.indexBlock);\\n\\t\\t\\t\\tvalue = value.add(billing);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(value == bills.totalValue, 'Billing: invalid bill');\\n\\t}\\n\\n\\tfunction balanceOf(address provider, bytes32 account) public view virtual returns (uint256);\\n\\n\\tfunction encodeBill(Bill memory bills) external pure returns (bytes memory) {\\n\\t\\treturn abi.encode(bills);\\n\\t}\\n\\n\\tfunction decodeBill(bytes memory message) external pure returns (Bill memory) {\\n\\t\\treturn abi.decode(message, (Bill));\\n\\t}\\n\\n\\tfunction _setBillTypedHash(bytes32 hash) internal {\\n\\t\\tbillTypedHash = hash;\\n\\t\\temit BillTypedHashUpdated(hash);\\n\\t}\\n\\n\\tfunction matchTokenDecimals(uint256 amount) internal view returns (uint256 value) {\\n\\t\\treturn amount.div(10**12);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x34ac2d9439379532408dcc719dd5ae954ac5c6c8250f597d7c6c706f9e98a3d5\",\"license\":\"UNLICENSE\"},\"contracts/wallets/FundWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport './Billing.sol';\\nimport '../interfaces/IFundWallet.sol';\\nimport '../access/OwnerWithdrawable.sol';\\n\\ncontract FundWallet is IFundWallet, Billing, OwnerWithdrawable, ReentrancyGuardUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tbytes32 public rechargeTypedHash;\\n\\n\\tmapping(address => mapping(bytes32 => mapping(uint64 => Purpose))) public nonces;\\n\\n\\tmapping(address => mapping(bytes32 => Wallet)) internal wallets;\\n\\n\\tmodifier onlyWalletOwner(address provider, bytes32 account) {\\n\\t\\trequire(wallets[provider][account].owner == msg.sender, 'FundWallet: caller is not wallet owner');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier nonNonce(address provider, bytes32 account, uint64 nonce) {\\n\\t\\trequire(nonces[provider][account][nonce] == Purpose.Null, 'FundWallet: invalid nonce');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() initializer {}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIResourceAdaptor adaptor,\\n\\t\\tIProviders _providers,\\n\\t\\tIERC20Upgradeable _token,\\n\\t\\tstring memory name,\\n\\t\\tstring memory version,\\n\\t\\tstring memory rechargeTypes,\\n\\t\\tstring memory billTypes\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Providers(_providers);\\n\\t\\t__Init_Resource_Adaptor(adaptor);\\n\\t\\t__Init_Token(_token);\\n\\t\\t__EIP712_init(name, version);\\n\\t\\t__Init_Recharge_Typed_Hash(rechargeTypes);\\n\\t\\t__Init_Bill_Typed_Hash(billTypes);\\n\\t}\\n\\n\\tfunction __Init_Recharge_Typed_Hash(string memory types) internal onlyInitializing {\\n\\t\\t_setRechargeTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) whenNotPaused nonReentrant {\\n\\t\\trequire(amount > 0, 'FundWallet: zero amount');\\n\\t\\tbytes32 hash = hashTypedDataV4ForRecharge(provider, nonce, owner, account, amount);\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\\n\\t\\tif (wallets[provider][account].owner == address(0)) {\\n\\t\\t\\twallets[provider][account].owner = owner;\\n\\t\\t}\\n\\t\\twallets[provider][account].amount = wallets[provider][account].amount.add(amount);\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Recharge);\\n\\t\\temit Charge(provider, nonce, owner, account, amount);\\n\\t}\\n\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) whenNotPaused nonReentrant returns (uint256 fee) {\\n\\t\\tfee = _spend(provider, nonce, account, bill, signature);\\n\\t\\twallets[provider][account].amount = wallets[provider][account].amount.sub(fee);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Spend);\\n\\n\\t\\temit Spend(provider, nonce, account, fee);\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\taddress to,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) onlyWalletOwner(provider, account) whenNotPaused nonReentrant returns (uint256 amount) {\\n\\t\\taddress p = provider;\\n\\t\\tuint256 fee = _spend(p, nonce, account, bill, signature);\\n\\t\\tamount = wallets[p][account].amount.sub(fee);\\n\\t\\twallets[p][account].amount = 0;\\n\\t\\t_updateNonce(p, account, nonce, Purpose.Withdraw);\\n\\t\\ttoken.safeTransfer(to, amount);\\n\\t\\t\\n\\t\\temit Withdrawn(p, nonce, account, to, amount);\\n\\t}\\n\\n\\tfunction transferWalletOwner(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress newOwner,\\n\\t\\tbytes memory signature\\n\\t) external override whenNotPaused onlyWalletOwner(provider, account) {\\n\\t\\tbytes32 hash = keccak256(abi.encodePacked(provider, newOwner, account));\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\\n\\t\\twallets[provider][account].owner = newOwner;\\n\\n\\t\\temit WalletOwnerTransferred(provider, account, newOwner);\\n\\t}\\n\\n\\tfunction ownerOf(address provider, bytes32 account) public view override returns (address) {\\n\\t\\treturn wallets[provider][account].owner;\\n\\t}\\n\\n\\tfunction balanceOf(address provider, bytes32 account) public view override returns (uint256) {\\n\\t\\treturn wallets[provider][account].amount;\\n\\t}\\n\\n\\tfunction setRechargeTypedHash(string memory types) external onlyOwner {\\n\\t\\t_setRechargeTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction setBillTypedHash(string memory types) external onlyOwner {\\n\\t\\t_setBillTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction rechargeHash(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(rechargeTypedHash, provider, nonce, owner, account, amount));\\n\\t}\\n\\n\\tfunction hashTypedDataV4ForRecharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn _hashTypedDataV4(rechargeHash(provider, nonce, owner, account, amount));\\n\\t}\\n\\n\\tfunction _setRechargeTypedHash(bytes32 hash) internal {\\n\\t\\trechargeTypedHash = hash;\\n\\t\\temit RechargeTypedHashUpdated(hash);\\n\\t}\\n\\n\\tfunction _updateNonce(address provider, bytes32 account, uint64 nonce, Purpose purpose) internal {\\n\\t\\tnonces[provider][account][nonce] = purpose;\\n\\n\\t\\temit NonceUpdated(provider, account, nonce, purpose);\\n\\t}\\n}\\n\",\"keccak256\":\"0x5ce1eb0a576fb46f0b2264d73c5774e39ac22e7fc7c06f90aba16449175076ad\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b620000396200009e565b620000615760405162461bcd60e51b81526004016200005890620000cb565b60405180910390fd5b600054610100900460ff1615801562000084576000805461ffff19166101011790555b801562000097576000805461ff00191690555b5062000124565b6000620000b630620000bc60201b620012791760201c565b15905090565b6001600160a01b03163b151590565b602080825281016200011e81602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b61392780620001346000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c806382dc1ec411610125578063d5ed04b6116100ad578063f2fde38b1161007c578063f2fde38b146104e6578063f8401fe6146104f9578063f960ff0b1461050c578063fc0c546a1461051f578063fc173ad21461053257600080fd5b8063d5ed04b61461047f578063da66bd6714610492578063ddc5517e146104c9578063e7356a07146104dc57600080fd5b806393563a95116100f457806393563a9514610410578063a50d817d14610423578063c2cd9b2b14610436578063c47ca60314610456578063d29ed85e1461047657600080fd5b806382dc1ec4146103c85780638456cb59146103db5780638da5cb5b146103e3578063924bf9a7146103fd57600080fd5b80635c975abb116101a85780636ef8d66d116101775780636ef8d66d1461036f578063715018a6146103775780637acc238b1461037f5780637dc186cd1461039257806380f51c12146103a557600080fd5b80635c975abb1461032b578063699256f4146103365780636b2c0f55146103495780636d9d0ae11461035c57600080fd5b8063474902a2116101e4578063474902a21461027c5780634bf1fcda1461029c5780634d30b6be146102de5780635a4c1a201461031857600080fd5b8063144fa6d7146102165780633f4ba83a1461022b578063453866001461023357806346fbf68e1461025c575b600080fd5b610229610224366004611f75565b610545565b005b610229610584565b61024661024136600461208f565b6105b3565b6040516102539190612260565b60405180910390f35b61026f61026a366004612285565b6105e2565b60405161025391906122ae565b61028f61028a3660046122e7565b610600565b60405161025391906123a5565b6102d16102aa3660046123b3565b61010360209081526000938452604080852082529284528284209052825290205460ff1681565b6040516102539190612431565b61028f6102ec36600461243f565b6001600160a01b0391909116600090815261010460209081526040808320938352929052206001015490565b61022961032636600461247c565b61081c565b60655460ff1661026f565b61022961034436600461243f565b610ad3565b610229610357366004612285565b610b81565b61022961036a36600461208f565b610bb4565b610229610bee565b610229610bf7565b61022961038d36600461208f565b610c2b565b6102296103a03660046124e8565b610c65565b61026f6103b3366004612285565b60976020526000908152604090205460ff1681565b6102296103d6366004612285565b610e21565b610229610e54565b6033546001600160a01b03165b604051610253919061256f565b61028f61040b36600461257d565b610e81565b61022961041e3660046125c4565b610ea2565b61028f61043136600461260a565b610f13565b60cf54610449906001600160a01b031681565b60405161025391906126ca565b61046961046436600461291f565b611090565b60405161025391906129b7565b61028f60cd5481565b61028f61048d36600461257d565b6110b9565b6103f06104a036600461243f565b6001600160a01b0391821660009081526101046020908152604080832093835292905220541690565b6102296104d73660046129c8565b6110fd565b61028f6101025481565b6102296104f4366004612285565b6111c1565b609854610449906001600160a01b031681565b61028f61051a366004612af7565b61121a565b60ce54610449906001600160a01b031681565b61028f610540366004612af7565b611238565b6033546001600160a01b031633146105785760405162461bcd60e51b815260040161056f90612b97565b60405180910390fd5b61058181611288565b50565b61058d336105e2565b6105a95760405162461bcd60e51b815260040161056f90612bdb565b6105b16112de565b565b604080518082019091526000815260606020820152818060200190518101906105dc9190612df7565b92915050565b6001600160a01b031660009081526097602052604090205460ff1690565b6000868587836001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610650576106506120d1565b1461066d5760405162461bcd60e51b815260040161056f90612e65565b6001600160a01b03808b166000908152610104602090815260408083208c84529091529020548b918a911633146106b65760405162461bcd60e51b815260040161056f90612ebb565b60655460ff16156106d95760405162461bcd60e51b815260040161056f90612ef2565b600260d05414156106fc5760405162461bcd60e51b815260040161056f90612f36565b600260d0558b6000610711828e8e8d8d611344565b9050610760816101046000856001600160a01b03166001600160a01b0316815260200190815260200160002060008f8152602001908152602001600020600101546115ca90919063ffffffff16565b975060006101046000846001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600101819055506107af828d8f60036115dd565b60ce546107c6906001600160a01b03168c8a611677565b7f26b8aa9e5d4f71b867c84264e57eab543daba6bf03a6ac7c3be51697b5132f70828e8e8e8c6040516107fd959493929190612f55565b60405180910390a15050600160d05550939a9950505050505050505050565b85838660006001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff16600381111561086b5761086b6120d1565b146108885760405162461bcd60e51b815260040161056f90612e65565b60655460ff16156108ab5760405162461bcd60e51b815260040161056f90612ef2565b600260d05414156108ce5760405162461bcd60e51b815260040161056f90612f36565b600260d055846108f05760405162461bcd60e51b815260040161056f90612fd5565b60006108ff8a8a8a8a8a61121a565b6098546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e90610934908d9085908a90600401612fe5565b602060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190613025565b6109a25760405162461bcd60e51b815260040161056f9061307a565b6001600160a01b038a81166000908152610104602090815260408083208b845290915290205416610a08576001600160a01b038a81166000908152610104602090815260408083208b8452909152902080546001600160a01b031916918a169190911790555b6001600160a01b038a166000908152610104602090815260408083208a8452909152902060010154610a3a90876116d2565b6001600160a01b03808c166000908152610104602090815260408083208c845290915290206001019190915560ce54610a7691163330896116de565b610a838a888b60016115dd565b7f21fb7d7ead2d8cc1ee15ffa7f67fd957c51ab1c3576a96207d3d2784b6dbe0328a8a8a8a8a604051610aba95949392919061308a565b60405180910390a15050600160d0555050505050505050565b6033546001600160a01b03163314610afd5760405162461bcd60e51b815260040161056f90612b97565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610b435760405162461bcd60e51b815260040161056f90613101565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610b74929190613111565b60405180910390a1505050565b6033546001600160a01b03163314610bab5760405162461bcd60e51b815260040161056f90612b97565b61058181611705565b6033546001600160a01b03163314610bde5760405162461bcd60e51b815260040161056f90612b97565b610581818051906020012061177a565b6105b133611705565b6033546001600160a01b03163314610c215760405162461bcd60e51b815260040161056f90612b97565b6105b160006117af565b6033546001600160a01b03163314610c555760405162461bcd60e51b815260040161056f90612b97565b6105818180519060200120611801565b60655460ff1615610c885760405162461bcd60e51b815260040161056f90612ef2565b6001600160a01b0380851660009081526101046020908152604080832087845290915290205485918591163314610cd15760405162461bcd60e51b815260040161056f90612ebb565b6000868587604051602001610ce89392919061315a565b60408051601f198184030181529082905280516020909101206098546311c5268f60e11b83529092506001600160a01b03169063238a4d1e90610d33908a9085908990600401612fe5565b602060405180830381600087803b158015610d4d57600080fd5b505af1158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190613025565b610da15760405162461bcd60e51b815260040161056f9061307a565b6001600160a01b038781166000908152610104602090815260408083208a84529091529081902080546001600160a01b03191692881692909217909155517f4ddee4675a37f5c882a56b9be609ea55023c460cafb24ab74c1cb024abc84b3b90610e1090899089908990613191565b60405180910390a150505050505050565b6033546001600160a01b03163314610e4b5760405162461bcd60e51b815260040161056f90612b97565b61058181611837565b610e5d336105e2565b610e795760405162461bcd60e51b815260040161056f90612bdb565b6105b16118b0565b6000610e97610e92868686866110b9565b611908565b90505b949350505050565b6033546001600160a01b03163314610ecc5760405162461bcd60e51b815260040161056f90612b97565b610ee06001600160a01b0384168383611677565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610b74939291906131b9565b6000858486836001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610f6357610f636120d1565b14610f805760405162461bcd60e51b815260040161056f90612e65565b60655460ff1615610fa35760405162461bcd60e51b815260040161056f90612ef2565b600260d0541415610fc65760405162461bcd60e51b815260040161056f90612f36565b600260d055610fd88989898989611344565b6001600160a01b038a166000908152610104602090815260408083208b845290915290206001015490945061100d90856115ca565b6001600160a01b038a166000908152610104602090815260408083208b845290915290206001015561104289888a60026115dd565b7ff87a79acd45d3f401d9b7ff78e67a64bbe1d2cfa30bb106f0eba621b4f28053f8989898760405161107794939291906131e1565b60405180910390a15050600160d0555095945050505050565b6060816040516020016110a39190612260565b6040516020818303038152906040529050919050565b600060cd5485858585805190602001206040516020016110dd959493929190613216565b604051602081830303815290604052805190602001209050949350505050565b600054610100900460ff166111185760005460ff161561111c565b303b155b6111385760405162461bcd60e51b815260040161056f90613289565b600054610100900460ff1615801561115a576000805461ffff19166101011790555b6111638a6117af565b61116c8961191b565b61117587611942565b61117e88611972565b611187866119a2565b61119185856119c9565b61119a836119fe565b6111a382611a25565b80156111b5576000805461ff00191690555b50505050505050505050565b6033546001600160a01b031633146111eb5760405162461bcd60e51b815260040161056f90612b97565b6001600160a01b0381166112115760405162461bcd60e51b815260040161056f906132dc565b610581816117af565b600061122c610e928787878787611238565b90505b95945050505050565b6000610102548686868686604051602001611258969594939291906132ec565b60405160208183030381529060405280519060200120905095945050505050565b6001600160a01b03163b151590565b60ce80546001600160a01b0319166001600160a01b0383161790556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e30906112d39083906126ca565b60405180910390a150565b60655460ff166113005760405162461bcd60e51b815260040161056f90613366565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161133a919061256f565b60405180910390a1565b609854604051636b074a0760e01b81526000916001600160a01b031690636b074a079061137590339060040161256f565b60206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190613025565b6113e15760405162461bcd60e51b815260040161056f906133b4565b60006113ef87878787610e81565b6098546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e90611424908a9085908890600401612fe5565b602060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190613025565b6114925760405162461bcd60e51b815260040161056f906133f8565b835115611581576001600160a01b038716600090815261010460209081526040808320888452909152812060010154906114d36114ce87611a4c565b611c04565b90508082116114e257816114e4565b805b6098546040516389b08f1160e01b815291955061157e916001600160a01b03909116906389b08f119061151b908d9060040161256f565b60206040518083038186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190613413565b60ce546001600160a01b03169086611677565b50505b7f086575d4de5bb5f0addd08773b7097a00aaa37120293013f54da4433812adfa787878787866040516115b8959493929190613434565b60405180910390a15095945050505050565b60006115d68284613493565b9392505050565b6001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b03861684529091529020805482919060ff1916600183600381111561162f5761162f6120d1565b02179055507fc4f15e84da288f27234e3626e64c8035b984fd65cee49fcd86b4910de1d13e7c8484848460405161166994939291906134aa565b60405180910390a150505050565b6116cd8363a9059cbb60e01b84846040516024016116969291906134df565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c15565b505050565b60006115d682846134ed565b6116ff846323b872dd60e01b85858560405160240161169693929190613505565b50505050565b61170e816105e2565b61172a5760405162461bcd60e51b815260040161056f90613547565b6001600160a01b03811660009081526097602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e906112d390839061256f565b60cd8190556040517f44e8ce8f81d5513d3e950d9a75224f8ff590d2687c88df09ffc509671aa670a1906112d39083906123a5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101028190556040517f921d5c4a3c33eaff9e0f2fee28d7dd04f45183c3070cc30adfd5d90be5154699906112d39083906123a5565b611840816105e2565b1561185d5760405162461bcd60e51b815260040161056f90613595565b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8906112d390839061256f565b60655460ff16156118d35760405162461bcd60e51b815260040161056f90612ef2565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861132d3390565b60006105dc611915611ca4565b83611ce0565b600054610100900460ff16610e4b5760405162461bcd60e51b815260040161056f906135ed565b600054610100900460ff166119695760405162461bcd60e51b815260040161056f906135ed565b61058181611d13565b600054610100900460ff166119995760405162461bcd60e51b815260040161056f906135ed565b61058181611d5e565b600054610100900460ff166105785760405162461bcd60e51b815260040161056f906135ed565b600054610100900460ff166119f05760405162461bcd60e51b815260040161056f906135ed565b6119fa8282611da9565b5050565b600054610100900460ff16610c555760405162461bcd60e51b815260040161056f906135ed565b600054610100900460ff16610bde5760405162461bcd60e51b815260040161056f906135ed565b60008082806020019051810190611a639190612df7565b9050600081602001515111611a8a5760405162461bcd60e51b815260040161056f90613631565b60005b816020015151811015611bdd57600082602001518281518110611ab257611ab2613641565b60200260200101519050600081602001515111611ae15760405162461bcd60e51b815260040161056f90613695565b60005b816020015151811015611bc857600082602001518481518110611b0957611b09613641565b60209081029190910181015160cf5481519282015186516040516354bf93b960e11b81529395506000946001600160a01b039093169363a97f277293611b5593909290916004016136a5565b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba591906136c0565b9050611bb187826116d2565b965050508080611bc0906136e1565b915050611ae4565b50508080611bd5906136e1565b915050611a8d565b5080518214611bfe5760405162461bcd60e51b815260040161056f90613728565b50919050565b60006105dc8264e8d4a51000611dea565b6000611c6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611df69092919063ffffffff16565b8051909150156116cd5780806020019051810190611c889190613025565b6116cd5760405162461bcd60e51b815260040161056f9061377f565b6000611cdb7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611cd360995490565b609a54611e05565b905090565b60008282604051602001611cf592919061378f565b60405160208183030381529060405280519060200120905092915050565b609880546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c5284906112d39083906126ca565b60cf80546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c1906112d39083906126ca565b600054610100900460ff16611dd05760405162461bcd60e51b815260040161056f906135ed565b815160209283012081519190920120609991909155609a55565b60006115d682846137d6565b6060610e9a8484600085611e3f565b60008383834630604051602001611e209594939291906137ea565b6040516020818303038152906040528051906020012090509392505050565b606082471015611e615760405162461bcd60e51b815260040161056f9061386f565b6001600160a01b0385163b611e885760405162461bcd60e51b815260040161056f906138b3565b600080866001600160a01b03168587604051611ea491906138e5565b60006040518083038185875af1925050503d8060008114611ee1576040519150601f19603f3d011682016040523d82523d6000602084013e611ee6565b606091505b5091509150611ef6828286611f01565b979650505050505050565b60608315611f105750816115d6565b825115611f205782518084602001fd5b8160405162461bcd60e51b815260040161056f91906129b7565b60006001600160a01b0382166105dc565b60006105dc82611f3a565b611f5f81611f4b565b811461058157600080fd5b80356105dc81611f56565b600060208284031215611f8a57611f8a600080fd5b6000610e9a8484611f6a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611fd157611fd1611f96565b6040525050565b6000611fe360405190565b9050611fef8282611fac565b919050565b60006001600160401b0382111561200d5761200d611f96565b601f19601f83011660200192915050565b82818337506000910152565b600061203d61203884611ff4565b611fd8565b90508281526020810184848401111561205857612058600080fd5b61206384828561201e565b509392505050565b600082601f83011261207f5761207f600080fd5b8135610e9a84826020860161202a565b6000602082840312156120a4576120a4600080fd5b81356001600160401b038111156120bd576120bd600080fd5b610e9a8482850161206b565b805b82525050565b634e487b7160e01b600052602160045260246000fd5b60058110610581576105816120d1565b80611fef816120e7565b60006105dc826120f7565b6120cb81612101565b80516040830190612126848261210c565b5060208201516116ff60208501826120c9565b60006121458383612115565b505060400190565b6000612157825190565b80845260209384019383018060005b8381101561218b57815161217a8882612139565b975060208301925050600101612166565b509495945050505050565b805160009060408401906121aa85826120c9565b506020830151848203602086015261122f828261214d565b60006115d68383612196565b60006121d8825190565b808452602084019350836020820285016121f28560200190565b8060005b85811015612227578484038952815161220f85826121c2565b94506020830160209a909a01999250506001016121f6565b5091979650505050505050565b8051600090604084019061224885826120c9565b506020830151848203602086015261122f82826121ce565b602080825281016115d68184612234565b611f5f81611f3a565b80356105dc81612271565b60006020828403121561229a5761229a600080fd5b6000610e9a848461227a565b8015156120cb565b602081016105dc82846122a6565b6001600160401b038116611f5f565b80356105dc816122bc565b80611f5f565b80356105dc816122d6565b60008060008060008060c0878903121561230357612303600080fd5b600061230f898961227a565b965050602061232089828a016122cb565b955050604061233189828a016122dc565b945050606061234289828a0161227a565b93505060808701356001600160401b0381111561236157612361600080fd5b61236d89828a0161206b565b92505060a08701356001600160401b0381111561238c5761238c600080fd5b61239889828a0161206b565b9150509295509295509295565b602081016105dc82846120c9565b6000806000606084860312156123cb576123cb600080fd5b60006123d7868661227a565b93505060206123e8868287016122dc565b92505060406123f9868287016122cb565b9150509250925092565b60048110610581576105816120d1565b80611fef81612403565b60006105dc82612413565b6120cb8161241d565b602081016105dc8284612428565b6000806040838503121561245557612455600080fd5b6000612461858561227a565b9250506020612472858286016122dc565b9150509250929050565b60008060008060008060c0878903121561249857612498600080fd5b60006124a4898961227a565b96505060206124b589828a016122cb565b95505060406124c689828a0161227a565b94505060606124d789828a016122dc565b935050608061236d89828a016122dc565b6000806000806080858703121561250157612501600080fd5b600061250d878761227a565b945050602061251e878288016122dc565b935050604061252f8782880161227a565b92505060608501356001600160401b0381111561254e5761254e600080fd5b61255a8782880161206b565b91505092959194509250565b6120cb81611f3a565b602081016105dc8284612566565b6000806000806080858703121561259657612596600080fd5b60006125a2878761227a565b94505060206125b3878288016122cb565b935050604061252f878288016122dc565b6000806000606084860312156125dc576125dc600080fd5b60006125e88686611f6a565b93505060206125f98682870161227a565b92505060406123f9868287016122dc565b600080600080600060a0868803121561262557612625600080fd5b6000612631888861227a565b9550506020612642888289016122cb565b9450506040612653888289016122dc565b93505060608601356001600160401b0381111561267257612672600080fd5b61267e8882890161206b565b92505060808601356001600160401b0381111561269d5761269d600080fd5b6126a98882890161206b565b9150509295509295909350565b60006105dc82611f4b565b6120cb816126b6565b602081016105dc82846126c1565b60006001600160401b038211156126f1576126f1611f96565b5060209081020190565b6005811061058157600080fd5b80356105dc816126fb565b60006040828403121561272857612728600080fd5b6127326040611fd8565b905060006127408484612708565b8252506020612751848483016122dc565b60208301525092915050565b600061276b612038846126d8565b8381529050602081016040840283018581111561278a5761278a600080fd5b835b818110156127b0578061279f8882612713565b84525060209092019160400161278c565b5050509392505050565b600082601f8301126127ce576127ce600080fd5b8135610e9a84826020860161275d565b6000604082840312156127f3576127f3600080fd5b6127fd6040611fd8565b9050600061280b84846122dc565b82525060208201356001600160401b0381111561282a5761282a600080fd5b612751848285016127ba565b6000612844612038846126d8565b8381529050602080820190840283018581111561286357612863600080fd5b835b818110156127b05780356001600160401b0381111561288657612886600080fd5b80860161289389826127de565b8552505060209283019201612865565b600082601f8301126128b7576128b7600080fd5b8135610e9a848260208601612836565b6000604082840312156128dc576128dc600080fd5b6128e66040611fd8565b905060006128f484846122dc565b82525060208201356001600160401b0381111561291357612913600080fd5b612751848285016128a3565b60006020828403121561293457612934600080fd5b81356001600160401b0381111561294d5761294d600080fd5b610e9a848285016128c7565b60005b8381101561297457818101518382015260200161295c565b838111156116ff5750506000910152565b600061298f825190565b8084526020840193506129a6818560208601612959565b601f01601f19169290920192915050565b602080825281016115d68184612985565b60008060008060008060008060006101208a8c0312156129ea576129ea600080fd5b60006129f68c8c61227a565b9950506020612a078c828d0161227a565b9850506040612a188c828d01611f6a565b9750506060612a298c828d01611f6a565b9650506080612a3a8c828d01611f6a565b95505060a08a01356001600160401b03811115612a5957612a59600080fd5b612a658c828d0161206b565b94505060c08a01356001600160401b03811115612a8457612a84600080fd5b612a908c828d0161206b565b93505060e08a01356001600160401b03811115612aaf57612aaf600080fd5b612abb8c828d0161206b565b9250506101008a01356001600160401b03811115612adb57612adb600080fd5b612ae78c828d0161206b565b9150509295985092959850929598565b600080600080600060a08688031215612b1257612b12600080fd5b6000612b1e888861227a565b9550506020612b2f888289016122cb565b9450506040612b408882890161227a565b9350506060612b51888289016122dc565b92505060806126a9888289016122dc565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016105dc81612b62565b601c81526000602082017f5061757365723a2043616c6c6572206973206e6f74207061757365720000000081529150612b90565b602080825281016105dc81612ba7565b80516105dc816122d6565b80516105dc816126fb565b600060408284031215612c1657612c16600080fd5b612c206040611fd8565b90506000612c2e8484612bf6565b825250602061275184848301612beb565b6000612c4d612038846126d8565b83815290506020810160408402830185811115612c6c57612c6c600080fd5b835b818110156127b05780612c818882612c01565b845250602090920191604001612c6e565b600082601f830112612ca657612ca6600080fd5b8151610e9a848260208601612c3f565b600060408284031215612ccb57612ccb600080fd5b612cd56040611fd8565b90506000612ce38484612beb565b82525060208201516001600160401b03811115612d0257612d02600080fd5b61275184828501612c92565b6000612d1c612038846126d8565b83815290506020808201908402830185811115612d3b57612d3b600080fd5b835b818110156127b05780516001600160401b03811115612d5e57612d5e600080fd5b808601612d6b8982612cb6565b8552505060209283019201612d3d565b600082601f830112612d8f57612d8f600080fd5b8151610e9a848260208601612d0e565b600060408284031215612db457612db4600080fd5b612dbe6040611fd8565b90506000612dcc8484612beb565b82525060208201516001600160401b03811115612deb57612deb600080fd5b61275184828501612d7b565b600060208284031215612e0c57612e0c600080fd5b81516001600160401b03811115612e2557612e25600080fd5b610e9a84828501612d9f565b601981526000602082017f46756e6457616c6c65743a20696e76616c6964206e6f6e63650000000000000081529150612b90565b602080825281016105dc81612e31565b602681526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f742077616c6c65748152651037bbb732b960d11b602082015291505b5060400190565b602080825281016105dc81612e75565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612b90565b602080825281016105dc81612ecb565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612b90565b602080825281016105dc81612f02565b6001600160401b0381166120cb565b60a08101612f638288612566565b612f706020830187612f46565b612f7d60408301866120c9565b612f8a6060830185612566565b612f9760808301846120c9565b9695505050505050565b601781526000602082017f46756e6457616c6c65743a207a65726f20616d6f756e7400000000000000000081529150612b90565b602080825281016105dc81612fa1565b60608101612ff38286612566565b61300060208301856120c9565b8181036040830152610e978184612985565b801515611f5f565b80516105dc81613012565b60006020828403121561303a5761303a600080fd5b6000610e9a848461301a565b601d81526000602082017f46756e6457616c6c65743a20696e76616c6964207369676e617475726500000081529150612b90565b602080825281016105dc81613046565b60a081016130988288612566565b6130a56020830187612f46565b6130b26040830186612566565b612f8a60608301856120c9565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b60208201529150612eb4565b602080825281016105dc816130bf565b6040810161311f82856126c1565b6115d660208301846120c9565b60006105dc8260601b90565b60006105dc8261312c565b6120cb61314f82611f3a565b613138565b806120cb565b60006131668286613143565b6014820191506131768285613143565b6014820191506131868284613154565b506020019392505050565b6060810161319f8286612566565b6131ac60208301856120c9565b610e9a6040830184612566565b606081016131c782866126c1565b6131d46020830185612566565b610e9a60408301846120c9565b608081016131ef8287612566565b6131fc6020830186612f46565b61320960408301856120c9565b61122f60608301846120c9565b60a0810161322482886120c9565b6132316020830187612566565b6130b26040830186612f46565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612eb4565b602080825281016105dc8161323e565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612eb4565b602080825281016105dc81613299565b60c081016132fa82896120c9565b6133076020830188612566565b6133146040830187612f46565b6133216060830186612566565b61332e60808301856120c9565b611ef660a08301846120c9565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612b90565b602080825281016105dc8161333b565b602181526000602082017f42696c6c696e673a2063616c6c6572206973206e6f7420612070726f766964658152603960f91b60208201529150612eb4565b602080825281016105dc81613376565b601a81526000602082017f42696c6c696e673a20696e76616c6964207369676e617475726500000000000081529150612b90565b602080825281016105dc816133c4565b80516105dc81612271565b60006020828403121561342857613428600080fd5b6000610e9a8484613408565b60a081016134428288612566565b61344f6020830187612f46565b61345c60408301866120c9565b818103606083015261346e8185612985565b9050612f9760808301846120c9565b634e487b7160e01b600052601160045260246000fd5b6000828210156134a5576134a561347d565b500390565b608081016134b88287612566565b6134c560208301866120c9565b6134d26040830185612f46565b61122f6060830184612428565b6040810161311f8285612566565b600082198211156135005761350061347d565b500190565b606081016131c78286612566565b601d81526000602082017f5061757365723a204163636f756e74206973206e6f742070617573657200000081529150612b90565b602080825281016105dc81613513565b602181526000602082017f5061757365723a204163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150612eb4565b602080825281016105dc81613557565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612eb4565b602080825281016105dc816135a5565b601c81526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f6164730000000081529150612b90565b602080825281016105dc816135fd565b634e487b7160e01b600052603260045260246000fd5b602181526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f616420656e74728152607960f81b60208201529150612eb4565b602080825281016105dc81613657565b606081016136b3828661210c565b6131d460208301856120c9565b6000602082840312156136d5576136d5600080fd5b6000610e9a8484612beb565b60006000198214156136f5576136f561347d565b5060010190565b6015815260006020820174109a5b1b1a5b99ce881a5b9d985b1a5908189a5b1b605a1b81529150612b90565b602080825281016105dc816136fc565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150612eb4565b602080825281016105dc81613738565b61190160f01b815260020160006137a68285613154565b6020820191506137b68284613154565b5060200192915050565b634e487b7160e01b600052601260045260246000fd5b6000826137e5576137e56137c0565b500490565b60a081016137f882886120c9565b61380560208301876120c9565b61381260408301866120c9565b61381f60608301856120c9565b612f976080830184612566565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150612eb4565b602080825281016105dc8161382c565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612b90565b602080825281016105dc8161387f565b60006138cd825190565b6138db818560208601612959565b9290920192915050565b60006115d682846138c356fea2646970667358221220a0821c0e67e96fe3f7ecf78ce32d9ab6a3bb4a0a207cc6967209fea35cb5d37064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806382dc1ec411610125578063d5ed04b6116100ad578063f2fde38b1161007c578063f2fde38b146104e6578063f8401fe6146104f9578063f960ff0b1461050c578063fc0c546a1461051f578063fc173ad21461053257600080fd5b8063d5ed04b61461047f578063da66bd6714610492578063ddc5517e146104c9578063e7356a07146104dc57600080fd5b806393563a95116100f457806393563a9514610410578063a50d817d14610423578063c2cd9b2b14610436578063c47ca60314610456578063d29ed85e1461047657600080fd5b806382dc1ec4146103c85780638456cb59146103db5780638da5cb5b146103e3578063924bf9a7146103fd57600080fd5b80635c975abb116101a85780636ef8d66d116101775780636ef8d66d1461036f578063715018a6146103775780637acc238b1461037f5780637dc186cd1461039257806380f51c12146103a557600080fd5b80635c975abb1461032b578063699256f4146103365780636b2c0f55146103495780636d9d0ae11461035c57600080fd5b8063474902a2116101e4578063474902a21461027c5780634bf1fcda1461029c5780634d30b6be146102de5780635a4c1a201461031857600080fd5b8063144fa6d7146102165780633f4ba83a1461022b578063453866001461023357806346fbf68e1461025c575b600080fd5b610229610224366004611f75565b610545565b005b610229610584565b61024661024136600461208f565b6105b3565b6040516102539190612260565b60405180910390f35b61026f61026a366004612285565b6105e2565b60405161025391906122ae565b61028f61028a3660046122e7565b610600565b60405161025391906123a5565b6102d16102aa3660046123b3565b61010360209081526000938452604080852082529284528284209052825290205460ff1681565b6040516102539190612431565b61028f6102ec36600461243f565b6001600160a01b0391909116600090815261010460209081526040808320938352929052206001015490565b61022961032636600461247c565b61081c565b60655460ff1661026f565b61022961034436600461243f565b610ad3565b610229610357366004612285565b610b81565b61022961036a36600461208f565b610bb4565b610229610bee565b610229610bf7565b61022961038d36600461208f565b610c2b565b6102296103a03660046124e8565b610c65565b61026f6103b3366004612285565b60976020526000908152604090205460ff1681565b6102296103d6366004612285565b610e21565b610229610e54565b6033546001600160a01b03165b604051610253919061256f565b61028f61040b36600461257d565b610e81565b61022961041e3660046125c4565b610ea2565b61028f61043136600461260a565b610f13565b60cf54610449906001600160a01b031681565b60405161025391906126ca565b61046961046436600461291f565b611090565b60405161025391906129b7565b61028f60cd5481565b61028f61048d36600461257d565b6110b9565b6103f06104a036600461243f565b6001600160a01b0391821660009081526101046020908152604080832093835292905220541690565b6102296104d73660046129c8565b6110fd565b61028f6101025481565b6102296104f4366004612285565b6111c1565b609854610449906001600160a01b031681565b61028f61051a366004612af7565b61121a565b60ce54610449906001600160a01b031681565b61028f610540366004612af7565b611238565b6033546001600160a01b031633146105785760405162461bcd60e51b815260040161056f90612b97565b60405180910390fd5b61058181611288565b50565b61058d336105e2565b6105a95760405162461bcd60e51b815260040161056f90612bdb565b6105b16112de565b565b604080518082019091526000815260606020820152818060200190518101906105dc9190612df7565b92915050565b6001600160a01b031660009081526097602052604090205460ff1690565b6000868587836001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610650576106506120d1565b1461066d5760405162461bcd60e51b815260040161056f90612e65565b6001600160a01b03808b166000908152610104602090815260408083208c84529091529020548b918a911633146106b65760405162461bcd60e51b815260040161056f90612ebb565b60655460ff16156106d95760405162461bcd60e51b815260040161056f90612ef2565b600260d05414156106fc5760405162461bcd60e51b815260040161056f90612f36565b600260d0558b6000610711828e8e8d8d611344565b9050610760816101046000856001600160a01b03166001600160a01b0316815260200190815260200160002060008f8152602001908152602001600020600101546115ca90919063ffffffff16565b975060006101046000846001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600101819055506107af828d8f60036115dd565b60ce546107c6906001600160a01b03168c8a611677565b7f26b8aa9e5d4f71b867c84264e57eab543daba6bf03a6ac7c3be51697b5132f70828e8e8e8c6040516107fd959493929190612f55565b60405180910390a15050600160d05550939a9950505050505050505050565b85838660006001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff16600381111561086b5761086b6120d1565b146108885760405162461bcd60e51b815260040161056f90612e65565b60655460ff16156108ab5760405162461bcd60e51b815260040161056f90612ef2565b600260d05414156108ce5760405162461bcd60e51b815260040161056f90612f36565b600260d055846108f05760405162461bcd60e51b815260040161056f90612fd5565b60006108ff8a8a8a8a8a61121a565b6098546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e90610934908d9085908a90600401612fe5565b602060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109869190613025565b6109a25760405162461bcd60e51b815260040161056f9061307a565b6001600160a01b038a81166000908152610104602090815260408083208b845290915290205416610a08576001600160a01b038a81166000908152610104602090815260408083208b8452909152902080546001600160a01b031916918a169190911790555b6001600160a01b038a166000908152610104602090815260408083208a8452909152902060010154610a3a90876116d2565b6001600160a01b03808c166000908152610104602090815260408083208c845290915290206001019190915560ce54610a7691163330896116de565b610a838a888b60016115dd565b7f21fb7d7ead2d8cc1ee15ffa7f67fd957c51ab1c3576a96207d3d2784b6dbe0328a8a8a8a8a604051610aba95949392919061308a565b60405180910390a15050600160d0555050505050505050565b6033546001600160a01b03163314610afd5760405162461bcd60e51b815260040161056f90612b97565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610b435760405162461bcd60e51b815260040161056f90613101565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610b74929190613111565b60405180910390a1505050565b6033546001600160a01b03163314610bab5760405162461bcd60e51b815260040161056f90612b97565b61058181611705565b6033546001600160a01b03163314610bde5760405162461bcd60e51b815260040161056f90612b97565b610581818051906020012061177a565b6105b133611705565b6033546001600160a01b03163314610c215760405162461bcd60e51b815260040161056f90612b97565b6105b160006117af565b6033546001600160a01b03163314610c555760405162461bcd60e51b815260040161056f90612b97565b6105818180519060200120611801565b60655460ff1615610c885760405162461bcd60e51b815260040161056f90612ef2565b6001600160a01b0380851660009081526101046020908152604080832087845290915290205485918591163314610cd15760405162461bcd60e51b815260040161056f90612ebb565b6000868587604051602001610ce89392919061315a565b60408051601f198184030181529082905280516020909101206098546311c5268f60e11b83529092506001600160a01b03169063238a4d1e90610d33908a9085908990600401612fe5565b602060405180830381600087803b158015610d4d57600080fd5b505af1158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d859190613025565b610da15760405162461bcd60e51b815260040161056f9061307a565b6001600160a01b038781166000908152610104602090815260408083208a84529091529081902080546001600160a01b03191692881692909217909155517f4ddee4675a37f5c882a56b9be609ea55023c460cafb24ab74c1cb024abc84b3b90610e1090899089908990613191565b60405180910390a150505050505050565b6033546001600160a01b03163314610e4b5760405162461bcd60e51b815260040161056f90612b97565b61058181611837565b610e5d336105e2565b610e795760405162461bcd60e51b815260040161056f90612bdb565b6105b16118b0565b6000610e97610e92868686866110b9565b611908565b90505b949350505050565b6033546001600160a01b03163314610ecc5760405162461bcd60e51b815260040161056f90612b97565b610ee06001600160a01b0384168383611677565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610b74939291906131b9565b6000858486836001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610f6357610f636120d1565b14610f805760405162461bcd60e51b815260040161056f90612e65565b60655460ff1615610fa35760405162461bcd60e51b815260040161056f90612ef2565b600260d0541415610fc65760405162461bcd60e51b815260040161056f90612f36565b600260d055610fd88989898989611344565b6001600160a01b038a166000908152610104602090815260408083208b845290915290206001015490945061100d90856115ca565b6001600160a01b038a166000908152610104602090815260408083208b845290915290206001015561104289888a60026115dd565b7ff87a79acd45d3f401d9b7ff78e67a64bbe1d2cfa30bb106f0eba621b4f28053f8989898760405161107794939291906131e1565b60405180910390a15050600160d0555095945050505050565b6060816040516020016110a39190612260565b6040516020818303038152906040529050919050565b600060cd5485858585805190602001206040516020016110dd959493929190613216565b604051602081830303815290604052805190602001209050949350505050565b600054610100900460ff166111185760005460ff161561111c565b303b155b6111385760405162461bcd60e51b815260040161056f90613289565b600054610100900460ff1615801561115a576000805461ffff19166101011790555b6111638a6117af565b61116c8961191b565b61117587611942565b61117e88611972565b611187866119a2565b61119185856119c9565b61119a836119fe565b6111a382611a25565b80156111b5576000805461ff00191690555b50505050505050505050565b6033546001600160a01b031633146111eb5760405162461bcd60e51b815260040161056f90612b97565b6001600160a01b0381166112115760405162461bcd60e51b815260040161056f906132dc565b610581816117af565b600061122c610e928787878787611238565b90505b95945050505050565b6000610102548686868686604051602001611258969594939291906132ec565b60405160208183030381529060405280519060200120905095945050505050565b6001600160a01b03163b151590565b60ce80546001600160a01b0319166001600160a01b0383161790556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e30906112d39083906126ca565b60405180910390a150565b60655460ff166113005760405162461bcd60e51b815260040161056f90613366565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161133a919061256f565b60405180910390a1565b609854604051636b074a0760e01b81526000916001600160a01b031690636b074a079061137590339060040161256f565b60206040518083038186803b15801561138d57600080fd5b505afa1580156113a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113c59190613025565b6113e15760405162461bcd60e51b815260040161056f906133b4565b60006113ef87878787610e81565b6098546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e90611424908a9085908890600401612fe5565b602060405180830381600087803b15801561143e57600080fd5b505af1158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190613025565b6114925760405162461bcd60e51b815260040161056f906133f8565b835115611581576001600160a01b038716600090815261010460209081526040808320888452909152812060010154906114d36114ce87611a4c565b611c04565b90508082116114e257816114e4565b805b6098546040516389b08f1160e01b815291955061157e916001600160a01b03909116906389b08f119061151b908d9060040161256f565b60206040518083038186803b15801561153357600080fd5b505afa158015611547573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156b9190613413565b60ce546001600160a01b03169086611677565b50505b7f086575d4de5bb5f0addd08773b7097a00aaa37120293013f54da4433812adfa787878787866040516115b8959493929190613434565b60405180910390a15095945050505050565b60006115d68284613493565b9392505050565b6001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b03861684529091529020805482919060ff1916600183600381111561162f5761162f6120d1565b02179055507fc4f15e84da288f27234e3626e64c8035b984fd65cee49fcd86b4910de1d13e7c8484848460405161166994939291906134aa565b60405180910390a150505050565b6116cd8363a9059cbb60e01b84846040516024016116969291906134df565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c15565b505050565b60006115d682846134ed565b6116ff846323b872dd60e01b85858560405160240161169693929190613505565b50505050565b61170e816105e2565b61172a5760405162461bcd60e51b815260040161056f90613547565b6001600160a01b03811660009081526097602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e906112d390839061256f565b60cd8190556040517f44e8ce8f81d5513d3e950d9a75224f8ff590d2687c88df09ffc509671aa670a1906112d39083906123a5565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101028190556040517f921d5c4a3c33eaff9e0f2fee28d7dd04f45183c3070cc30adfd5d90be5154699906112d39083906123a5565b611840816105e2565b1561185d5760405162461bcd60e51b815260040161056f90613595565b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8906112d390839061256f565b60655460ff16156118d35760405162461bcd60e51b815260040161056f90612ef2565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861132d3390565b60006105dc611915611ca4565b83611ce0565b600054610100900460ff16610e4b5760405162461bcd60e51b815260040161056f906135ed565b600054610100900460ff166119695760405162461bcd60e51b815260040161056f906135ed565b61058181611d13565b600054610100900460ff166119995760405162461bcd60e51b815260040161056f906135ed565b61058181611d5e565b600054610100900460ff166105785760405162461bcd60e51b815260040161056f906135ed565b600054610100900460ff166119f05760405162461bcd60e51b815260040161056f906135ed565b6119fa8282611da9565b5050565b600054610100900460ff16610c555760405162461bcd60e51b815260040161056f906135ed565b600054610100900460ff16610bde5760405162461bcd60e51b815260040161056f906135ed565b60008082806020019051810190611a639190612df7565b9050600081602001515111611a8a5760405162461bcd60e51b815260040161056f90613631565b60005b816020015151811015611bdd57600082602001518281518110611ab257611ab2613641565b60200260200101519050600081602001515111611ae15760405162461bcd60e51b815260040161056f90613695565b60005b816020015151811015611bc857600082602001518481518110611b0957611b09613641565b60209081029190910181015160cf5481519282015186516040516354bf93b960e11b81529395506000946001600160a01b039093169363a97f277293611b5593909290916004016136a5565b60206040518083038186803b158015611b6d57600080fd5b505afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba591906136c0565b9050611bb187826116d2565b965050508080611bc0906136e1565b915050611ae4565b50508080611bd5906136e1565b915050611a8d565b5080518214611bfe5760405162461bcd60e51b815260040161056f90613728565b50919050565b60006105dc8264e8d4a51000611dea565b6000611c6a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611df69092919063ffffffff16565b8051909150156116cd5780806020019051810190611c889190613025565b6116cd5760405162461bcd60e51b815260040161056f9061377f565b6000611cdb7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611cd360995490565b609a54611e05565b905090565b60008282604051602001611cf592919061378f565b60405160208183030381529060405280519060200120905092915050565b609880546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c5284906112d39083906126ca565b60cf80546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c1906112d39083906126ca565b600054610100900460ff16611dd05760405162461bcd60e51b815260040161056f906135ed565b815160209283012081519190920120609991909155609a55565b60006115d682846137d6565b6060610e9a8484600085611e3f565b60008383834630604051602001611e209594939291906137ea565b6040516020818303038152906040528051906020012090509392505050565b606082471015611e615760405162461bcd60e51b815260040161056f9061386f565b6001600160a01b0385163b611e885760405162461bcd60e51b815260040161056f906138b3565b600080866001600160a01b03168587604051611ea491906138e5565b60006040518083038185875af1925050503d8060008114611ee1576040519150601f19603f3d011682016040523d82523d6000602084013e611ee6565b606091505b5091509150611ef6828286611f01565b979650505050505050565b60608315611f105750816115d6565b825115611f205782518084602001fd5b8160405162461bcd60e51b815260040161056f91906129b7565b60006001600160a01b0382166105dc565b60006105dc82611f3a565b611f5f81611f4b565b811461058157600080fd5b80356105dc81611f56565b600060208284031215611f8a57611f8a600080fd5b6000610e9a8484611f6a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611fd157611fd1611f96565b6040525050565b6000611fe360405190565b9050611fef8282611fac565b919050565b60006001600160401b0382111561200d5761200d611f96565b601f19601f83011660200192915050565b82818337506000910152565b600061203d61203884611ff4565b611fd8565b90508281526020810184848401111561205857612058600080fd5b61206384828561201e565b509392505050565b600082601f83011261207f5761207f600080fd5b8135610e9a84826020860161202a565b6000602082840312156120a4576120a4600080fd5b81356001600160401b038111156120bd576120bd600080fd5b610e9a8482850161206b565b805b82525050565b634e487b7160e01b600052602160045260246000fd5b60058110610581576105816120d1565b80611fef816120e7565b60006105dc826120f7565b6120cb81612101565b80516040830190612126848261210c565b5060208201516116ff60208501826120c9565b60006121458383612115565b505060400190565b6000612157825190565b80845260209384019383018060005b8381101561218b57815161217a8882612139565b975060208301925050600101612166565b509495945050505050565b805160009060408401906121aa85826120c9565b506020830151848203602086015261122f828261214d565b60006115d68383612196565b60006121d8825190565b808452602084019350836020820285016121f28560200190565b8060005b85811015612227578484038952815161220f85826121c2565b94506020830160209a909a01999250506001016121f6565b5091979650505050505050565b8051600090604084019061224885826120c9565b506020830151848203602086015261122f82826121ce565b602080825281016115d68184612234565b611f5f81611f3a565b80356105dc81612271565b60006020828403121561229a5761229a600080fd5b6000610e9a848461227a565b8015156120cb565b602081016105dc82846122a6565b6001600160401b038116611f5f565b80356105dc816122bc565b80611f5f565b80356105dc816122d6565b60008060008060008060c0878903121561230357612303600080fd5b600061230f898961227a565b965050602061232089828a016122cb565b955050604061233189828a016122dc565b945050606061234289828a0161227a565b93505060808701356001600160401b0381111561236157612361600080fd5b61236d89828a0161206b565b92505060a08701356001600160401b0381111561238c5761238c600080fd5b61239889828a0161206b565b9150509295509295509295565b602081016105dc82846120c9565b6000806000606084860312156123cb576123cb600080fd5b60006123d7868661227a565b93505060206123e8868287016122dc565b92505060406123f9868287016122cb565b9150509250925092565b60048110610581576105816120d1565b80611fef81612403565b60006105dc82612413565b6120cb8161241d565b602081016105dc8284612428565b6000806040838503121561245557612455600080fd5b6000612461858561227a565b9250506020612472858286016122dc565b9150509250929050565b60008060008060008060c0878903121561249857612498600080fd5b60006124a4898961227a565b96505060206124b589828a016122cb565b95505060406124c689828a0161227a565b94505060606124d789828a016122dc565b935050608061236d89828a016122dc565b6000806000806080858703121561250157612501600080fd5b600061250d878761227a565b945050602061251e878288016122dc565b935050604061252f8782880161227a565b92505060608501356001600160401b0381111561254e5761254e600080fd5b61255a8782880161206b565b91505092959194509250565b6120cb81611f3a565b602081016105dc8284612566565b6000806000806080858703121561259657612596600080fd5b60006125a2878761227a565b94505060206125b3878288016122cb565b935050604061252f878288016122dc565b6000806000606084860312156125dc576125dc600080fd5b60006125e88686611f6a565b93505060206125f98682870161227a565b92505060406123f9868287016122dc565b600080600080600060a0868803121561262557612625600080fd5b6000612631888861227a565b9550506020612642888289016122cb565b9450506040612653888289016122dc565b93505060608601356001600160401b0381111561267257612672600080fd5b61267e8882890161206b565b92505060808601356001600160401b0381111561269d5761269d600080fd5b6126a98882890161206b565b9150509295509295909350565b60006105dc82611f4b565b6120cb816126b6565b602081016105dc82846126c1565b60006001600160401b038211156126f1576126f1611f96565b5060209081020190565b6005811061058157600080fd5b80356105dc816126fb565b60006040828403121561272857612728600080fd5b6127326040611fd8565b905060006127408484612708565b8252506020612751848483016122dc565b60208301525092915050565b600061276b612038846126d8565b8381529050602081016040840283018581111561278a5761278a600080fd5b835b818110156127b0578061279f8882612713565b84525060209092019160400161278c565b5050509392505050565b600082601f8301126127ce576127ce600080fd5b8135610e9a84826020860161275d565b6000604082840312156127f3576127f3600080fd5b6127fd6040611fd8565b9050600061280b84846122dc565b82525060208201356001600160401b0381111561282a5761282a600080fd5b612751848285016127ba565b6000612844612038846126d8565b8381529050602080820190840283018581111561286357612863600080fd5b835b818110156127b05780356001600160401b0381111561288657612886600080fd5b80860161289389826127de565b8552505060209283019201612865565b600082601f8301126128b7576128b7600080fd5b8135610e9a848260208601612836565b6000604082840312156128dc576128dc600080fd5b6128e66040611fd8565b905060006128f484846122dc565b82525060208201356001600160401b0381111561291357612913600080fd5b612751848285016128a3565b60006020828403121561293457612934600080fd5b81356001600160401b0381111561294d5761294d600080fd5b610e9a848285016128c7565b60005b8381101561297457818101518382015260200161295c565b838111156116ff5750506000910152565b600061298f825190565b8084526020840193506129a6818560208601612959565b601f01601f19169290920192915050565b602080825281016115d68184612985565b60008060008060008060008060006101208a8c0312156129ea576129ea600080fd5b60006129f68c8c61227a565b9950506020612a078c828d0161227a565b9850506040612a188c828d01611f6a565b9750506060612a298c828d01611f6a565b9650506080612a3a8c828d01611f6a565b95505060a08a01356001600160401b03811115612a5957612a59600080fd5b612a658c828d0161206b565b94505060c08a01356001600160401b03811115612a8457612a84600080fd5b612a908c828d0161206b565b93505060e08a01356001600160401b03811115612aaf57612aaf600080fd5b612abb8c828d0161206b565b9250506101008a01356001600160401b03811115612adb57612adb600080fd5b612ae78c828d0161206b565b9150509295985092959850929598565b600080600080600060a08688031215612b1257612b12600080fd5b6000612b1e888861227a565b9550506020612b2f888289016122cb565b9450506040612b408882890161227a565b9350506060612b51888289016122dc565b92505060806126a9888289016122dc565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016105dc81612b62565b601c81526000602082017f5061757365723a2043616c6c6572206973206e6f74207061757365720000000081529150612b90565b602080825281016105dc81612ba7565b80516105dc816122d6565b80516105dc816126fb565b600060408284031215612c1657612c16600080fd5b612c206040611fd8565b90506000612c2e8484612bf6565b825250602061275184848301612beb565b6000612c4d612038846126d8565b83815290506020810160408402830185811115612c6c57612c6c600080fd5b835b818110156127b05780612c818882612c01565b845250602090920191604001612c6e565b600082601f830112612ca657612ca6600080fd5b8151610e9a848260208601612c3f565b600060408284031215612ccb57612ccb600080fd5b612cd56040611fd8565b90506000612ce38484612beb565b82525060208201516001600160401b03811115612d0257612d02600080fd5b61275184828501612c92565b6000612d1c612038846126d8565b83815290506020808201908402830185811115612d3b57612d3b600080fd5b835b818110156127b05780516001600160401b03811115612d5e57612d5e600080fd5b808601612d6b8982612cb6565b8552505060209283019201612d3d565b600082601f830112612d8f57612d8f600080fd5b8151610e9a848260208601612d0e565b600060408284031215612db457612db4600080fd5b612dbe6040611fd8565b90506000612dcc8484612beb565b82525060208201516001600160401b03811115612deb57612deb600080fd5b61275184828501612d7b565b600060208284031215612e0c57612e0c600080fd5b81516001600160401b03811115612e2557612e25600080fd5b610e9a84828501612d9f565b601981526000602082017f46756e6457616c6c65743a20696e76616c6964206e6f6e63650000000000000081529150612b90565b602080825281016105dc81612e31565b602681526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f742077616c6c65748152651037bbb732b960d11b602082015291505b5060400190565b602080825281016105dc81612e75565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612b90565b602080825281016105dc81612ecb565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612b90565b602080825281016105dc81612f02565b6001600160401b0381166120cb565b60a08101612f638288612566565b612f706020830187612f46565b612f7d60408301866120c9565b612f8a6060830185612566565b612f9760808301846120c9565b9695505050505050565b601781526000602082017f46756e6457616c6c65743a207a65726f20616d6f756e7400000000000000000081529150612b90565b602080825281016105dc81612fa1565b60608101612ff38286612566565b61300060208301856120c9565b8181036040830152610e978184612985565b801515611f5f565b80516105dc81613012565b60006020828403121561303a5761303a600080fd5b6000610e9a848461301a565b601d81526000602082017f46756e6457616c6c65743a20696e76616c6964207369676e617475726500000081529150612b90565b602080825281016105dc81613046565b60a081016130988288612566565b6130a56020830187612f46565b6130b26040830186612566565b612f8a60608301856120c9565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b60208201529150612eb4565b602080825281016105dc816130bf565b6040810161311f82856126c1565b6115d660208301846120c9565b60006105dc8260601b90565b60006105dc8261312c565b6120cb61314f82611f3a565b613138565b806120cb565b60006131668286613143565b6014820191506131768285613143565b6014820191506131868284613154565b506020019392505050565b6060810161319f8286612566565b6131ac60208301856120c9565b610e9a6040830184612566565b606081016131c782866126c1565b6131d46020830185612566565b610e9a60408301846120c9565b608081016131ef8287612566565b6131fc6020830186612f46565b61320960408301856120c9565b61122f60608301846120c9565b60a0810161322482886120c9565b6132316020830187612566565b6130b26040830186612f46565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612eb4565b602080825281016105dc8161323e565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612eb4565b602080825281016105dc81613299565b60c081016132fa82896120c9565b6133076020830188612566565b6133146040830187612f46565b6133216060830186612566565b61332e60808301856120c9565b611ef660a08301846120c9565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612b90565b602080825281016105dc8161333b565b602181526000602082017f42696c6c696e673a2063616c6c6572206973206e6f7420612070726f766964658152603960f91b60208201529150612eb4565b602080825281016105dc81613376565b601a81526000602082017f42696c6c696e673a20696e76616c6964207369676e617475726500000000000081529150612b90565b602080825281016105dc816133c4565b80516105dc81612271565b60006020828403121561342857613428600080fd5b6000610e9a8484613408565b60a081016134428288612566565b61344f6020830187612f46565b61345c60408301866120c9565b818103606083015261346e8185612985565b9050612f9760808301846120c9565b634e487b7160e01b600052601160045260246000fd5b6000828210156134a5576134a561347d565b500390565b608081016134b88287612566565b6134c560208301866120c9565b6134d26040830185612f46565b61122f6060830184612428565b6040810161311f8285612566565b600082198211156135005761350061347d565b500190565b606081016131c78286612566565b601d81526000602082017f5061757365723a204163636f756e74206973206e6f742070617573657200000081529150612b90565b602080825281016105dc81613513565b602181526000602082017f5061757365723a204163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150612eb4565b602080825281016105dc81613557565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612eb4565b602080825281016105dc816135a5565b601c81526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f6164730000000081529150612b90565b602080825281016105dc816135fd565b634e487b7160e01b600052603260045260246000fd5b602181526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f616420656e74728152607960f81b60208201529150612eb4565b602080825281016105dc81613657565b606081016136b3828661210c565b6131d460208301856120c9565b6000602082840312156136d5576136d5600080fd5b6000610e9a8484612beb565b60006000198214156136f5576136f561347d565b5060010190565b6015815260006020820174109a5b1b1a5b99ce881a5b9d985b1a5908189a5b1b605a1b81529150612b90565b602080825281016105dc816136fc565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150612eb4565b602080825281016105dc81613738565b61190160f01b815260020160006137a68285613154565b6020820191506137b68284613154565b5060200192915050565b634e487b7160e01b600052601260045260246000fd5b6000826137e5576137e56137c0565b500490565b60a081016137f882886120c9565b61380560208301876120c9565b61381260408301866120c9565b61381f60608301856120c9565b612f976080830184612566565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150612eb4565b602080825281016105dc8161382c565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612b90565b602080825281016105dc8161387f565b60006138cd825190565b6138db818560208601612959565b9290920192915050565b60006115d682846138c356fea2646970667358221220a0821c0e67e96fe3f7ecf78ce32d9ab6a3bb4a0a207cc6967209fea35cb5d37064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 970,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 235,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 324,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3742,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "pausers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6575,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "providers",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IProviders)4243"
      },
      {
        "astId": 1670,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 1672,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 1810,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8136,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "billTypedHash",
        "offset": 0,
        "slot": "205",
        "type": "t_bytes32"
      },
      {
        "astId": 8140,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "token",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IERC20Upgradeable)462"
      },
      {
        "astId": 8144,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "adaptor",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IResourceAdaptor)8102"
      },
      {
        "astId": 339,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_status",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8547,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "rechargeTypedHash",
        "offset": 0,
        "slot": "258",
        "type": "t_bytes32"
      },
      {
        "astId": 8556,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "nonces",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4024)))"
      },
      {
        "astId": 8563,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "wallets",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Wallet)4029_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)462": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IProviders)4243": {
        "encoding": "inplace",
        "label": "contract IProviders",
        "numberOfBytes": "20"
      },
      "t_contract(IResourceAdaptor)8102": {
        "encoding": "inplace",
        "label": "contract IResourceAdaptor",
        "numberOfBytes": "20"
      },
      "t_enum(Purpose)4024": {
        "encoding": "inplace",
        "label": "enum IFundWallet.Purpose",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4024)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(uint64 => enum IFundWallet.Purpose)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4024))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Wallet)4029_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct IFundWallet.Wallet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Wallet)4029_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4024))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint64 => enum IFundWallet.Purpose))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_enum(Purpose)4024)"
      },
      "t_mapping(t_bytes32,t_struct(Wallet)4029_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IFundWallet.Wallet)",
        "numberOfBytes": "32",
        "value": "t_struct(Wallet)4029_storage"
      },
      "t_mapping(t_uint64,t_enum(Purpose)4024)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => enum IFundWallet.Purpose)",
        "numberOfBytes": "32",
        "value": "t_enum(Purpose)4024"
      },
      "t_struct(Wallet)4029_storage": {
        "encoding": "inplace",
        "label": "struct IFundWallet.Wallet",
        "members": [
          {
            "astId": 4026,
            "contract": "contracts/wallets/FundWallet.sol:FundWallet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4028,
            "contract": "contracts/wallets/FundWallet.sol:FundWallet",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}