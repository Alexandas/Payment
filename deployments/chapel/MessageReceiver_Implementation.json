{
  "address": "0xfEDFe70a3F03094DA60B93e53cf06Ecc82BD5eAE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IDstChainPayment",
          "name": "_dstChainPayment",
          "type": "address"
        }
      ],
      "name": "DstChainPaymentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "ExecutorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "MessageBusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "MessageWithTransferExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "error",
          "type": "bytes"
        }
      ],
      "name": "MessageWithTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "MessageWithTransferFallback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "dstChainPayment",
      "outputs": [
        {
          "internalType": "contract IDstChainPayment",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransfer",
      "outputs": [
        {
          "internalType": "enum MessageReceiver.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_srcChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeMessageWithTransferFallback",
      "outputs": [
        {
          "internalType": "enum MessageReceiver.ExecutionStatus",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_messageBus",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageBus",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "srcChainId",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "srcTxHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct MsgDataTypes.RouteInfo",
          "name": "route",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "dstChainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "messageId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IDstChainPayment",
          "name": "_dstChainPayment",
          "type": "address"
        }
      ],
      "name": "setDstChainPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executor",
          "type": "address"
        }
      ],
      "name": "setExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "messageBus",
          "type": "address"
        }
      ],
      "name": "setMessageBus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "withdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5708f9dfc845631fe31634f4ee20e083fa5e24829398d20b405ffabbaf2531d8",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xfEDFe70a3F03094DA60B93e53cf06Ecc82BD5eAE",
    "transactionIndex": 6,
    "gasUsed": "1533350",
    "logsBloom": "0x
    "blockHash": "0x30f110a27fc42d53ce5c971d4c2162489a1bc8b976caf871a097b4c7a39bb498",
    "transactionHash": "0x5708f9dfc845631fe31634f4ee20e083fa5e24829398d20b405ffabbaf2531d8",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 19086526,
        "transactionHash": "0x5708f9dfc845631fe31634f4ee20e083fa5e24829398d20b405ffabbaf2531d8",
        "address": "0xfEDFe70a3F03094DA60B93e53cf06Ecc82BD5eAE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0x30f110a27fc42d53ce5c971d4c2162489a1bc8b976caf871a097b4c7a39bb498"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 19086526,
        "transactionHash": "0x5708f9dfc845631fe31634f4ee20e083fa5e24829398d20b405ffabbaf2531d8",
        "address": "0xfEDFe70a3F03094DA60B93e53cf06Ecc82BD5eAE",
        "topics": [
          "0x3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e"
        ],
        "data": "0x000000000000000000000000ad204986d6cb67a5bc76a3cb8974823f43cb9aaa",
        "logIndex": 15,
        "blockHash": "0x30f110a27fc42d53ce5c971d4c2162489a1bc8b976caf871a097b4c7a39bb498"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 19086526,
        "transactionHash": "0x5708f9dfc845631fe31634f4ee20e083fa5e24829398d20b405ffabbaf2531d8",
        "address": "0xfEDFe70a3F03094DA60B93e53cf06Ecc82BD5eAE",
        "topics": [
          "0xd9436ef9ce00ffeabc5da2489701502d3bd1a5ed7b254a1981fc5ffef9828e11"
        ],
        "data": "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
        "logIndex": 16,
        "blockHash": "0x30f110a27fc42d53ce5c971d4c2162489a1bc8b976caf871a097b4c7a39bb498"
      }
    ],
    "blockNumber": 19086526,
    "cumulativeGasUsed": "2652413",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "0xAd204986D6cB67A5Bc76a3CB8974823F43Cb9AAA",
    "0xF1658C608708172655A8e70a1624c29F956Ee63D"
  ],
  "solcInputHash": "55cb943cd24eeac199a015c55188fb4b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IDstChainPayment\",\"name\":\"_dstChainPayment\",\"type\":\"address\"}],\"name\":\"DstChainPaymentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ExecutorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"MessageBusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"MessageWithTransferExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"MessageWithTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"MessageWithTransferFallback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"dstChainPayment\",\"outputs\":[{\"internalType\":\"contract IDstChainPayment\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransfer\",\"outputs\":[{\"internalType\":\"enum MessageReceiver.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeMessageWithTransferFallback\",\"outputs\":[{\"internalType\":\"enum MessageReceiver.ExecutionStatus\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_messageBus\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageBus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"srcTxHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct MsgDataTypes.RouteInfo\",\"name\":\"route\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"dstChainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"messageId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDstChainPayment\",\"name\":\"_dstChainPayment\",\"type\":\"address\"}],\"name\":\"setDstChainPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executor\",\"type\":\"address\"}],\"name\":\"setExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"messageBus\",\"type\":\"address\"}],\"name\":\"setMessageBus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"withdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/messages/MessageReceiver.sol\":\"MessageReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\tfunction withdraw(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\tfunction withdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'Payment: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x795ed1ca0da5ab6d318f00a9752a7dbef4173466e34e4cca658496d0675cc7f1\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IDstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\n\\ninterface IDstChainPayment {\\n\\n\\tstruct PaymentPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tResourceData.Payload[] payloads;\\n\\t}\\n\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\tevent Paid(address payer, IERC20Upgradeable token, PaymentPayload payload);\\n\\n\\tevent ProvidetWithdraw(address provider, IERC20Upgradeable token, address to, uint256 value);\\n\\n\\tfunction payFromSourceChain(\\n\\t\\tIERC20Upgradeable token,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata message\\n\\t) external returns (uint256 value);\\n\\n\\tfunction pay(PaymentPayload memory payload) external returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0xc3813dbd193aa5441b0b25adc1167593b210809669c4a4587f11cd9f27a16f1f\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/messages/MessageReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\nimport 'sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol';\\n\\nimport '../access/OwnerWithdrawable.sol';\\nimport '../libraries/ResourceData.sol';\\nimport '../interfaces/IDstChainPayment.sol';\\n\\ncontract MessageReceiver is OwnerWithdrawable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\tusing ResourceData for ResourceData.Payload[];\\n\\n\\tenum ExecutionStatus {\\n\\t\\tFail,\\n\\t\\tSuccess,\\n\\t\\tRetry\\n\\t}\\n\\n\\tIDstChainPayment public dstChainPayment;\\n\\n\\taddress public messageBus;\\n\\n\\taddress public executor;\\n\\n\\tevent DstChainPaymentUpdated(IDstChainPayment _dstChainPayment);\\n\\n\\tevent MessageBusUpdated(address messageBus);\\n\\n\\tevent ExecutorUpdated(address executor);\\n\\n\\tevent MessageWithTransferExecuted(address sender, IERC20Upgradeable token, uint256 amount, uint64 srcChainId, bytes message, address executor);\\n\\n\\tevent MessageWithTransferFailed(address sender, IERC20Upgradeable token, uint256 amount, uint64 srcChainId, bytes message, address executor, bytes error);\\n\\n\\tevent MessageWithTransferFallback(\\n\\t\\taddress _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes _message,\\n        address executor\\n\\t);\\n\\n\\tmodifier onlyMessageBus() {\\n\\t\\trequire(msg.sender == messageBus, 'MessageReceiver: caller is not message bus');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor(\\n\\t\\taddress owner,\\n\\t\\taddress _messageBus,\\n\\t\\taddress _executor\\n\\t) initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t_setMessageBus(_messageBus);\\n\\t\\t_setExecutor(_executor);\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress _messageBus,\\n\\t\\taddress _executor\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t_setMessageBus(_messageBus);\\n\\t\\t_setExecutor(_executor);\\n\\t}\\n\\n\\tfunction executeMessageWithTransfer(\\n        address sender,\\n        IERC20Upgradeable token,\\n        uint256 amount,\\n        uint64 srcChainId,\\n        bytes memory message,\\n        address _executor\\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\\n\\t\\trequire(executor == _executor, 'MessageReceiver: invalid executor');\\n\\t\\ttoken.safeApprove(address(dstChainPayment), amount);\\n\\t\\ttry dstChainPayment.payFromSourceChain(token, amount, message) {\\n\\t\\t\\temit MessageWithTransferExecuted(sender, token, amount, srcChainId, message, _executor);\\n\\t\\t} catch (bytes memory err) {\\n\\t\\t\\temit MessageWithTransferFailed(sender, token, amount, srcChainId, message, _executor, err);\\n\\t\\t}\\n\\t\\ttoken.safeApprove(address(dstChainPayment), 0);\\n\\t\\treturn ExecutionStatus.Success;\\n    }\\n\\n\\tfunction executeMessageWithTransferFallback(\\n        address _sender,\\n        address _token,\\n        uint256 _amount,\\n        uint64 _srcChainId,\\n        bytes memory _message,\\n        address executor\\n    ) external payable onlyMessageBus returns (ExecutionStatus) {\\n\\t\\temit MessageWithTransferFallback(_sender, _token, _amount, _srcChainId, _message, executor);\\n\\t\\treturn ExecutionStatus.Success;\\n\\t}\\n\\n\\tfunction messageId(\\n\\t\\tMsgDataTypes.RouteInfo calldata route,\\n\\t\\tuint64 dstChainId,\\n\\t\\tbytes calldata message\\n\\t) public view returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(abi.encodePacked(MsgDataTypes.MsgType.MessageOnly, route.sender, route.receiver, route.srcChainId, route.srcTxHash, dstChainId, message));\\n\\t}\\n\\n\\tfunction setDstChainPayment(IDstChainPayment _dstChainPayment) external onlyOwner {\\n\\t\\t_setDstChainPayment(_dstChainPayment);\\n\\t}\\n\\n\\tfunction _setDstChainPayment(IDstChainPayment _dstChainPayment) internal {\\n\\t\\tdstChainPayment = _dstChainPayment;\\n\\t\\temit DstChainPaymentUpdated(_dstChainPayment);\\n\\t}\\n\\n\\tfunction setMessageBus(address messageBus) external onlyOwner {\\n\\t\\t_setMessageBus(messageBus);\\n\\t}\\n\\n\\tfunction _setMessageBus(address _messageBus) internal {\\n\\t\\tmessageBus = _messageBus;\\n\\t\\temit MessageBusUpdated(messageBus);\\n\\t}\\n\\n\\tfunction setExecutor(address _executor) external onlyOwner {\\n\\t\\t_setExecutor(_executor);\\n\\t}\\n\\n\\tfunction _setExecutor(address _executor) internal {\\n\\t\\texecutor = _executor;\\n\\t\\temit ExecutorUpdated(_executor);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0xaf7b486639ad7f132762b14b68b851eb55cf46a8c4ea8a2abcbc222f39f76f0a\",\"license\":\"GPL-3.0-only\"},\"sgn-v2-contracts/contracts/message/libraries/MsgDataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity 0.8.9;\\n\\nlibrary MsgDataTypes {\\n    // bridge operation type at the sender side (src chain)\\n    enum BridgeSendType {\\n        Null,\\n        Liquidity,\\n        PegDeposit,\\n        PegBurn,\\n        PegV2Deposit,\\n        PegV2Burn,\\n        PegV2BurnFrom\\n    }\\n\\n    // bridge operation type at the receiver side (dst chain)\\n    enum TransferType {\\n        Null,\\n        LqRelay, // relay through liquidity bridge\\n        LqWithdraw, // withdraw from liquidity bridge\\n        PegMint, // mint through pegged token bridge\\n        PegWithdraw, // withdraw from original token vault\\n        PegV2Mint, // mint through pegged token bridge v2\\n        PegV2Withdraw // withdraw from original token vault v2\\n    }\\n\\n    enum MsgType {\\n        MessageWithTransfer,\\n        MessageOnly\\n    }\\n\\n    enum TxStatus {\\n        Null,\\n        Success,\\n        Fail,\\n        Fallback,\\n        Pending // transient state within a transaction\\n    }\\n\\n    struct TransferInfo {\\n        TransferType t;\\n        address sender;\\n        address receiver;\\n        address token;\\n        uint256 amount;\\n        uint64 wdseq; // only needed for LqWithdraw (refund)\\n        uint64 srcChainId;\\n        bytes32 refId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct RouteInfo {\\n        address sender;\\n        address receiver;\\n        uint64 srcChainId;\\n        bytes32 srcTxHash; // src chain msg tx hash\\n    }\\n\\n    struct MsgWithTransferExecutionParams {\\n        bytes message;\\n        TransferInfo transfer;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n\\n    struct BridgeTransferParams {\\n        bytes request;\\n        bytes[] sigs;\\n        address[] signers;\\n        uint256[] powers;\\n    }\\n}\\n\",\"keccak256\":\"0x4ac9e6e5be92e3e58adbcab75ef765458d37fd4908d764477a0f32a96f9ecbba\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c0038038062001c00833981016040819052620000349162000243565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b620000e4565b620000835760405162461bcd60e51b81526004016200007a906200029b565b60405180910390fd5b600054610100900460ff16158015620000a6576000805461ffff19166101011790555b620000b18462000102565b620000bc8362000154565b620000c782620001ad565b8015620000da576000805461ff00191690555b505050506200030f565b6000620000fc30620001fa60201b6200088a1760201c565b15905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606680546001600160a01b0319166001600160a01b0383169081179091556040517f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e91620001a291620002ff565b60405180910390a150565b606780546001600160a01b0319166001600160a01b0383161790556040517fd9436ef9ce00ffeabc5da2489701502d3bd1a5ed7b254a1981fc5ffef9828e1190620001a2908390620002ff565b6001600160a01b03163b151590565b60006001600160a01b0382165b92915050565b620002278162000209565b81146200023357600080fd5b50565b805162000216816200021c565b6000806000606084860312156200025d576200025d600080fd5b60006200026b868662000236565b93505060206200027e8682870162000236565b9250506040620002918682870162000236565b9150509250925092565b602080825281016200021681602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b620002f98162000209565b82525050565b60208101620002168284620002ee565b6118e1806200031f6000396000f3fe6080604052600436106100e85760003560e01c80638da5cb5b1161008a578063c34c08e511610059578063c34c08e514610254578063d9caed1214610274578063f2fde38b14610294578063f60cfa59146102b457600080fd5b80638da5cb5b146101c0578063a1a227fa146101e7578063bb0248aa14610207578063c0c53b8b1461023457600080fd5b8063547cad12116100c6578063547cad121461014f5780635ab7afc61461016f578063715018a6146101985780637cd2bffc146101ad57600080fd5b806307b18bde146100ed5780631c3c0ea81461010f578063429aafd91461012f575b600080fd5b3480156100f957600080fd5b5061010d610108366004610cdc565b6102e1565b005b34801561011b57600080fd5b5061010d61012a366004610d19565b610398565b34801561013b57600080fd5b5061010d61014a366004610d59565b6103ce565b34801561015b57600080fd5b5061010d61016a366004610d19565b610401565b61018261017d366004610e90565b610434565b60405161018f9190610f7f565b60405180910390f35b3480156101a457600080fd5b5061010d6104af565b6101826101bb366004610f8d565b6104e5565b3480156101cc57600080fd5b506033546001600160a01b03165b60405161018f9190610fcf565b3480156101f357600080fd5b506066546101da906001600160a01b031681565b34801561021357600080fd5b5061022761022236600461104a565b6106bf565b60405161018f91906110be565b34801561024057600080fd5b5061010d61024f3660046110cc565b610730565b34801561026057600080fd5b506067546101da906001600160a01b031681565b34801561028057600080fd5b5061010d61028f36600461111c565b6107c0565b3480156102a057600080fd5b5061010d6102af366004610d19565b610831565b3480156102c057600080fd5b506065546102d4906001600160a01b031681565b60405161018f9190611192565b6033546001600160a01b031633146103145760405162461bcd60e51b815260040161030b906111d5565b60405180910390fd5b6040516000906001600160a01b0384169083156108fc0290849084818181858888f1935050505090508061035a5760405162461bcd60e51b815260040161030b9061122a565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e4827838360405161038b92919061123a565b60405180910390a1505050565b6033546001600160a01b031633146103c25760405162461bcd60e51b815260040161030b906111d5565b6103cb81610899565b50565b6033546001600160a01b031633146103f85760405162461bcd60e51b815260040161030b906111d5565b6103cb816108ef565b6033546001600160a01b0316331461042b5760405162461bcd60e51b815260040161030b906111d5565b6103cb8161093a565b6066546000906001600160a01b031633146104615760405162461bcd60e51b815260040161030b9061129c565b7fa0b35e480a2add0100f918632470cc8260628f0e8e277690f77da458ff8f4ab787878787878760405161049a9695949392919061131a565b60405180910390a15060019695505050505050565b6033546001600160a01b031633146104d95760405162461bcd60e51b815260040161030b906111d5565b6104e36000610986565b565b6066546000906001600160a01b031633146105125760405162461bcd60e51b815260040161030b9061129c565b6067546001600160a01b0383811691161461053f5760405162461bcd60e51b815260040161030b906113ae565b606554610559906001600160a01b038881169116876109d8565b606554604051631dfbd4cf60e21b81526001600160a01b03909116906377ef533c9061058d908990899088906004016113be565b602060405180830381600087803b1580156105a757600080fd5b505af19250505080156105d7575060408051601f3d908101601f191682019092526105d4918101906113ff565b60015b610654573d808015610605576040519150601f19603f3d011682016040523d82523d6000602084013e61060a565b606091505b507f3538e4460f392ef0ea71ed8ac3c3ddd96cdb41831e212d8fe3a145e1956e85d5888888888888876040516106469796959493929190611420565b60405180910390a150610697565b507fa2ea2fb459fe24fd2d3083215ee27cdee6cd1773cd34d407ce9a5f910409ccfe87878787878760405161068e96959493929190611495565b60405180910390a15b6065546106b2906001600160a01b03888116911660006109d8565b5060019695505050505050565b600060016106d06020870187610d19565b6106e06040880160208901610d19565b6106f06060890160408a016114b0565b886060013588888860405160200161070f98979695949392919061156d565b6040516020818303038152906040528051906020012090505b949350505050565b600054610100900460ff1661074b5760005460ff161561074f565b303b155b61076b5760405162461bcd60e51b815260040161030b90611633565b600054610100900460ff1615801561078d576000805461ffff19166101011790555b61079684610986565b61079f8361093a565b6107a882610899565b80156107ba576000805461ff00191690555b50505050565b6033546001600160a01b031633146107ea5760405162461bcd60e51b815260040161030b906111d5565b6107fe6001600160a01b0384168383610ad7565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639883838360405161038b93929190611643565b6033546001600160a01b0316331461085b5760405162461bcd60e51b815260040161030b906111d5565b6001600160a01b0381166108815760405162461bcd60e51b815260040161030b906116ae565b6103cb81610986565b6001600160a01b03163b151590565b606780546001600160a01b0319166001600160a01b0383161790556040517fd9436ef9ce00ffeabc5da2489701502d3bd1a5ed7b254a1981fc5ffef9828e11906108e4908390610fcf565b60405180910390a150565b606580546001600160a01b0319166001600160a01b0383161790556040517ff2071e1b38ab3c561fb5d090a912ad00d911946da5f417b4eac46024a2f6ed60906108e4908390611192565b606680546001600160a01b0319166001600160a01b0383169081179091556040517f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e916108e491610fcf565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b801580610a605750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610a0e90309086906004016116be565b60206040518083038186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e91906113ff565b155b610a7c5760405162461bcd60e51b815260040161030b9061172c565b610ad28363095ea7b360e01b8484604051602401610a9b92919061173c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610af6565b505050565b610ad28363a9059cbb60e01b8484604051602401610a9b92919061173c565b6000610b4b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b859092919063ffffffff16565b805190915015610ad25780806020019051810190610b69919061175d565b610ad25760405162461bcd60e51b815260040161030b906117c5565b6060610b948484600085610b9e565b90505b9392505050565b606082471015610bc05760405162461bcd60e51b815260040161030b90611818565b6001600160a01b0385163b610be75760405162461bcd60e51b815260040161030b9061185c565b600080866001600160a01b03168587604051610c03919061188e565b60006040518083038185875af1925050503d8060008114610c40576040519150601f19603f3d011682016040523d82523d6000602084013e610c45565b606091505b5091509150610c55828286610c60565b979650505050505050565b60608315610c6f575081610b97565b825115610c7f5782518084602001fd5b8160405162461bcd60e51b815260040161030b919061189a565b60006001600160a01b0382165b92915050565b610cb581610c99565b81146103cb57600080fd5b8035610ca681610cac565b80610cb5565b8035610ca681610ccb565b60008060408385031215610cf257610cf2600080fd5b6000610cfe8585610cc0565b9250506020610d0f85828601610cd1565b9150509250929050565b600060208284031215610d2e57610d2e600080fd5b60006107288484610cc0565b6000610ca682610c99565b610cb581610d3a565b8035610ca681610d45565b600060208284031215610d6e57610d6e600080fd5b60006107288484610d4e565b67ffffffffffffffff8116610cb5565b8035610ca681610d7a565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610dd157610dd1610d95565b6040525050565b6000610de360405190565b9050610def8282610dab565b919050565b600067ffffffffffffffff821115610e0e57610e0e610d95565b601f19601f83011660200192915050565b82818337506000910152565b6000610e3e610e3984610df4565b610dd8565b905082815260208101848484011115610e5957610e59600080fd5b610e64848285610e1f565b509392505050565b600082601f830112610e8057610e80600080fd5b8135610728848260208601610e2b565b60008060008060008060c08789031215610eac57610eac600080fd5b6000610eb88989610cc0565b9650506020610ec989828a01610cc0565b9550506040610eda89828a01610cd1565b9450506060610eeb89828a01610d8a565b935050608087013567ffffffffffffffff811115610f0b57610f0b600080fd5b610f1789828a01610e6c565b92505060a0610f2889828a01610cc0565b9150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b600381106103cb576103cb610f35565b80610def81610f4b565b6000610ca682610f5b565b610f7981610f65565b82525050565b60208101610ca68284610f70565b60008060008060008060c08789031215610fa957610fa9600080fd5b6000610fb58989610cc0565b9650506020610ec989828a01610d4e565b610f7981610c99565b60208101610ca68284610fc6565b600060808284031215610ff257610ff2600080fd5b50919050565b60008083601f84011261100d5761100d600080fd5b50813567ffffffffffffffff81111561102857611028600080fd5b60208301915083600182028301111561104357611043600080fd5b9250929050565b60008060008060c0858703121561106357611063600080fd5b600061106f8787610fdd565b945050608061108087828801610d8a565b93505060a085013567ffffffffffffffff8111156110a0576110a0600080fd5b6110ac87828801610ff8565b95989497509550505050565b80610f79565b60208101610ca682846110b8565b6000806000606084860312156110e4576110e4600080fd5b60006110f08686610cc0565b935050602061110186828701610cc0565b925050604061111286828701610cc0565b9150509250925092565b60008060006060848603121561113457611134600080fd5b60006111408686610d4e565b935050602061115186828701610cc0565b925050604061111286828701610cd1565b60006001600160a01b038216610ca6565b6000610ca682611162565b6000610ca682611173565b610f798161117e565b60208101610ca68284611189565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610ca6816111a0565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b602082015291505b5060400190565b60208082528101610ca6816111e5565b604081016112488285611189565b610b9760208301846110b8565b602a81526000602082017f4d65737361676552656365697665723a2063616c6c6572206973206e6f74206d8152696573736167652062757360b01b60208201529150611223565b60208082528101610ca681611255565b67ffffffffffffffff8116610f79565b60005b838110156112d75781810151838201526020016112bf565b838111156107ba5750506000910152565b60006112f2825190565b8084526020840193506113098185602086016112bc565b601f01601f19169290920192915050565b60c081016113288289610fc6565b6113356020830188610fc6565b61134260408301876110b8565b61134f60608301866112ac565b818103608083015261136181856112e8565b9050610c5560a0830184610fc6565b602181526000602082017f4d65737361676552656365697665723a20696e76616c6964206578656375746f8152603960f91b60208201529150611223565b60208082528101610ca681611370565b606081016113cc8286611189565b6113d960208301856110b8565b81810360408301526113eb81846112e8565b95945050505050565b8051610ca681610ccb565b60006020828403121561141457611414600080fd5b600061072884846113f4565b60e0810161142e828a610fc6565b61143b6020830189611189565b61144860408301886110b8565b61145560608301876112ac565b818103608083015261146781866112e8565b905061147660a0830185610fc6565b81810360c083015261148881846112e8565b9998505050505050505050565b60c081016114a38289610fc6565b6113356020830188611189565b6000602082840312156114c5576114c5600080fd5b60006107288484610d8a565b600281106103cb576103cb610f35565b80610def816114d1565b6000610ca6826114e1565b6000610ca68260f81b90565b610f7961150e826114eb565b6114f6565b6000610ca68260601b90565b6000610ca682611513565b610f7961153682610c99565b61151f565b6000610ca68260c01b90565b610f7967ffffffffffffffff821661153b565b6000611567838584610e1f565b50500190565b6000611579828b611502565b600182019150611589828a61152a565b601482019150611599828961152a565b6014820191506115a98288611547565b6008820191506115b982876110b8565b6020820191506115c98286611547565b6008820191506115da82848661155a565b9a9950505050505050505050565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611223565b60208082528101610ca6816115e8565b606081016116518286611189565b61165e6020830185610fc6565b61072860408301846110b8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611223565b60208082528101610ca68161166b565b604081016116cc8285610fc6565b610b976020830184610fc6565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60208201529150611223565b60208082528101610ca6816116d9565b604081016112488285610fc6565b801515610cb5565b8051610ca68161174a565b60006020828403121561177257611772600080fd5b60006107288484611752565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150611223565b60208082528101610ca68161177e565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150611223565b60208082528101610ca6816117d5565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506111ce565b60208082528101610ca681611828565b6000611876825190565b6118848185602086016112bc565b9290920192915050565b6000610b97828461186c565b60208082528101610b9781846112e856fea2646970667358221220994f876f726f8390630d5c26dfb723c114f3f549daf9ca3dc53444ac0916ba2164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80638da5cb5b1161008a578063c34c08e511610059578063c34c08e514610254578063d9caed1214610274578063f2fde38b14610294578063f60cfa59146102b457600080fd5b80638da5cb5b146101c0578063a1a227fa146101e7578063bb0248aa14610207578063c0c53b8b1461023457600080fd5b8063547cad12116100c6578063547cad121461014f5780635ab7afc61461016f578063715018a6146101985780637cd2bffc146101ad57600080fd5b806307b18bde146100ed5780631c3c0ea81461010f578063429aafd91461012f575b600080fd5b3480156100f957600080fd5b5061010d610108366004610cdc565b6102e1565b005b34801561011b57600080fd5b5061010d61012a366004610d19565b610398565b34801561013b57600080fd5b5061010d61014a366004610d59565b6103ce565b34801561015b57600080fd5b5061010d61016a366004610d19565b610401565b61018261017d366004610e90565b610434565b60405161018f9190610f7f565b60405180910390f35b3480156101a457600080fd5b5061010d6104af565b6101826101bb366004610f8d565b6104e5565b3480156101cc57600080fd5b506033546001600160a01b03165b60405161018f9190610fcf565b3480156101f357600080fd5b506066546101da906001600160a01b031681565b34801561021357600080fd5b5061022761022236600461104a565b6106bf565b60405161018f91906110be565b34801561024057600080fd5b5061010d61024f3660046110cc565b610730565b34801561026057600080fd5b506067546101da906001600160a01b031681565b34801561028057600080fd5b5061010d61028f36600461111c565b6107c0565b3480156102a057600080fd5b5061010d6102af366004610d19565b610831565b3480156102c057600080fd5b506065546102d4906001600160a01b031681565b60405161018f9190611192565b6033546001600160a01b031633146103145760405162461bcd60e51b815260040161030b906111d5565b60405180910390fd5b6040516000906001600160a01b0384169083156108fc0290849084818181858888f1935050505090508061035a5760405162461bcd60e51b815260040161030b9061122a565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e4827838360405161038b92919061123a565b60405180910390a1505050565b6033546001600160a01b031633146103c25760405162461bcd60e51b815260040161030b906111d5565b6103cb81610899565b50565b6033546001600160a01b031633146103f85760405162461bcd60e51b815260040161030b906111d5565b6103cb816108ef565b6033546001600160a01b0316331461042b5760405162461bcd60e51b815260040161030b906111d5565b6103cb8161093a565b6066546000906001600160a01b031633146104615760405162461bcd60e51b815260040161030b9061129c565b7fa0b35e480a2add0100f918632470cc8260628f0e8e277690f77da458ff8f4ab787878787878760405161049a9695949392919061131a565b60405180910390a15060019695505050505050565b6033546001600160a01b031633146104d95760405162461bcd60e51b815260040161030b906111d5565b6104e36000610986565b565b6066546000906001600160a01b031633146105125760405162461bcd60e51b815260040161030b9061129c565b6067546001600160a01b0383811691161461053f5760405162461bcd60e51b815260040161030b906113ae565b606554610559906001600160a01b038881169116876109d8565b606554604051631dfbd4cf60e21b81526001600160a01b03909116906377ef533c9061058d908990899088906004016113be565b602060405180830381600087803b1580156105a757600080fd5b505af19250505080156105d7575060408051601f3d908101601f191682019092526105d4918101906113ff565b60015b610654573d808015610605576040519150601f19603f3d011682016040523d82523d6000602084013e61060a565b606091505b507f3538e4460f392ef0ea71ed8ac3c3ddd96cdb41831e212d8fe3a145e1956e85d5888888888888876040516106469796959493929190611420565b60405180910390a150610697565b507fa2ea2fb459fe24fd2d3083215ee27cdee6cd1773cd34d407ce9a5f910409ccfe87878787878760405161068e96959493929190611495565b60405180910390a15b6065546106b2906001600160a01b03888116911660006109d8565b5060019695505050505050565b600060016106d06020870187610d19565b6106e06040880160208901610d19565b6106f06060890160408a016114b0565b886060013588888860405160200161070f98979695949392919061156d565b6040516020818303038152906040528051906020012090505b949350505050565b600054610100900460ff1661074b5760005460ff161561074f565b303b155b61076b5760405162461bcd60e51b815260040161030b90611633565b600054610100900460ff1615801561078d576000805461ffff19166101011790555b61079684610986565b61079f8361093a565b6107a882610899565b80156107ba576000805461ff00191690555b50505050565b6033546001600160a01b031633146107ea5760405162461bcd60e51b815260040161030b906111d5565b6107fe6001600160a01b0384168383610ad7565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b639883838360405161038b93929190611643565b6033546001600160a01b0316331461085b5760405162461bcd60e51b815260040161030b906111d5565b6001600160a01b0381166108815760405162461bcd60e51b815260040161030b906116ae565b6103cb81610986565b6001600160a01b03163b151590565b606780546001600160a01b0319166001600160a01b0383161790556040517fd9436ef9ce00ffeabc5da2489701502d3bd1a5ed7b254a1981fc5ffef9828e11906108e4908390610fcf565b60405180910390a150565b606580546001600160a01b0319166001600160a01b0383161790556040517ff2071e1b38ab3c561fb5d090a912ad00d911946da5f417b4eac46024a2f6ed60906108e4908390611192565b606680546001600160a01b0319166001600160a01b0383169081179091556040517f3f8223bcd8b3b875473e9f9e14e1ad075451a2b5ffd31591655da9a01516bf5e916108e491610fcf565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b801580610a605750604051636eb1769f60e11b81526001600160a01b0384169063dd62ed3e90610a0e90309086906004016116be565b60206040518083038186803b158015610a2657600080fd5b505afa158015610a3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5e91906113ff565b155b610a7c5760405162461bcd60e51b815260040161030b9061172c565b610ad28363095ea7b360e01b8484604051602401610a9b92919061173c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610af6565b505050565b610ad28363a9059cbb60e01b8484604051602401610a9b92919061173c565b6000610b4b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610b859092919063ffffffff16565b805190915015610ad25780806020019051810190610b69919061175d565b610ad25760405162461bcd60e51b815260040161030b906117c5565b6060610b948484600085610b9e565b90505b9392505050565b606082471015610bc05760405162461bcd60e51b815260040161030b90611818565b6001600160a01b0385163b610be75760405162461bcd60e51b815260040161030b9061185c565b600080866001600160a01b03168587604051610c03919061188e565b60006040518083038185875af1925050503d8060008114610c40576040519150601f19603f3d011682016040523d82523d6000602084013e610c45565b606091505b5091509150610c55828286610c60565b979650505050505050565b60608315610c6f575081610b97565b825115610c7f5782518084602001fd5b8160405162461bcd60e51b815260040161030b919061189a565b60006001600160a01b0382165b92915050565b610cb581610c99565b81146103cb57600080fd5b8035610ca681610cac565b80610cb5565b8035610ca681610ccb565b60008060408385031215610cf257610cf2600080fd5b6000610cfe8585610cc0565b9250506020610d0f85828601610cd1565b9150509250929050565b600060208284031215610d2e57610d2e600080fd5b60006107288484610cc0565b6000610ca682610c99565b610cb581610d3a565b8035610ca681610d45565b600060208284031215610d6e57610d6e600080fd5b60006107288484610d4e565b67ffffffffffffffff8116610cb5565b8035610ca681610d7a565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610dd157610dd1610d95565b6040525050565b6000610de360405190565b9050610def8282610dab565b919050565b600067ffffffffffffffff821115610e0e57610e0e610d95565b601f19601f83011660200192915050565b82818337506000910152565b6000610e3e610e3984610df4565b610dd8565b905082815260208101848484011115610e5957610e59600080fd5b610e64848285610e1f565b509392505050565b600082601f830112610e8057610e80600080fd5b8135610728848260208601610e2b565b60008060008060008060c08789031215610eac57610eac600080fd5b6000610eb88989610cc0565b9650506020610ec989828a01610cc0565b9550506040610eda89828a01610cd1565b9450506060610eeb89828a01610d8a565b935050608087013567ffffffffffffffff811115610f0b57610f0b600080fd5b610f1789828a01610e6c565b92505060a0610f2889828a01610cc0565b9150509295509295509295565b634e487b7160e01b600052602160045260246000fd5b600381106103cb576103cb610f35565b80610def81610f4b565b6000610ca682610f5b565b610f7981610f65565b82525050565b60208101610ca68284610f70565b60008060008060008060c08789031215610fa957610fa9600080fd5b6000610fb58989610cc0565b9650506020610ec989828a01610d4e565b610f7981610c99565b60208101610ca68284610fc6565b600060808284031215610ff257610ff2600080fd5b50919050565b60008083601f84011261100d5761100d600080fd5b50813567ffffffffffffffff81111561102857611028600080fd5b60208301915083600182028301111561104357611043600080fd5b9250929050565b60008060008060c0858703121561106357611063600080fd5b600061106f8787610fdd565b945050608061108087828801610d8a565b93505060a085013567ffffffffffffffff8111156110a0576110a0600080fd5b6110ac87828801610ff8565b95989497509550505050565b80610f79565b60208101610ca682846110b8565b6000806000606084860312156110e4576110e4600080fd5b60006110f08686610cc0565b935050602061110186828701610cc0565b925050604061111286828701610cc0565b9150509250925092565b60008060006060848603121561113457611134600080fd5b60006111408686610d4e565b935050602061115186828701610cc0565b925050604061111286828701610cd1565b60006001600160a01b038216610ca6565b6000610ca682611162565b6000610ca682611173565b610f798161117e565b60208101610ca68284611189565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610ca6816111a0565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b602082015291505b5060400190565b60208082528101610ca6816111e5565b604081016112488285611189565b610b9760208301846110b8565b602a81526000602082017f4d65737361676552656365697665723a2063616c6c6572206973206e6f74206d8152696573736167652062757360b01b60208201529150611223565b60208082528101610ca681611255565b67ffffffffffffffff8116610f79565b60005b838110156112d75781810151838201526020016112bf565b838111156107ba5750506000910152565b60006112f2825190565b8084526020840193506113098185602086016112bc565b601f01601f19169290920192915050565b60c081016113288289610fc6565b6113356020830188610fc6565b61134260408301876110b8565b61134f60608301866112ac565b818103608083015261136181856112e8565b9050610c5560a0830184610fc6565b602181526000602082017f4d65737361676552656365697665723a20696e76616c6964206578656375746f8152603960f91b60208201529150611223565b60208082528101610ca681611370565b606081016113cc8286611189565b6113d960208301856110b8565b81810360408301526113eb81846112e8565b95945050505050565b8051610ca681610ccb565b60006020828403121561141457611414600080fd5b600061072884846113f4565b60e0810161142e828a610fc6565b61143b6020830189611189565b61144860408301886110b8565b61145560608301876112ac565b818103608083015261146781866112e8565b905061147660a0830185610fc6565b81810360c083015261148881846112e8565b9998505050505050505050565b60c081016114a38289610fc6565b6113356020830188611189565b6000602082840312156114c5576114c5600080fd5b60006107288484610d8a565b600281106103cb576103cb610f35565b80610def816114d1565b6000610ca6826114e1565b6000610ca68260f81b90565b610f7961150e826114eb565b6114f6565b6000610ca68260601b90565b6000610ca682611513565b610f7961153682610c99565b61151f565b6000610ca68260c01b90565b610f7967ffffffffffffffff821661153b565b6000611567838584610e1f565b50500190565b6000611579828b611502565b600182019150611589828a61152a565b601482019150611599828961152a565b6014820191506115a98288611547565b6008820191506115b982876110b8565b6020820191506115c98286611547565b6008820191506115da82848661155a565b9a9950505050505050505050565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611223565b60208082528101610ca6816115e8565b606081016116518286611189565b61165e6020830185610fc6565b61072860408301846110b8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611223565b60208082528101610ca68161166b565b604081016116cc8285610fc6565b610b976020830184610fc6565b603681526000602082017f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f81527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60208201529150611223565b60208082528101610ca6816116d9565b604081016112488285610fc6565b801515610cb5565b8051610ca68161174a565b60006020828403121561177257611772600080fd5b60006107288484611752565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150611223565b60208082528101610ca68161177e565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150611223565b60208082528101610ca6816117d5565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506111ce565b60208082528101610ca681611828565b6000611876825190565b6118848185602086016112bc565b9290920192915050565b6000610b97828461186c565b60208082528101610b9781846112e856fea2646970667358221220994f876f726f8390630d5c26dfb723c114f3f549daf9ca3dc53444ac0916ba2164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1608,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4790,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "dstChainPayment",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IDstChainPayment)4517"
      },
      {
        "astId": 4792,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "messageBus",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 4794,
        "contract": "contracts/messages/MessageReceiver.sol:MessageReceiver",
        "label": "executor",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDstChainPayment)4517": {
        "encoding": "inplace",
        "label": "contract IDstChainPayment",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}