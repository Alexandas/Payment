{
  "address": "0xfCaD8CDCA033F50819AABE8Fd04cD77014A8425e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstChainPayment",
          "type": "address"
        },
        {
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "dstChainPayment",
          "type": "address"
        }
      ],
      "name": "DstChainPaymentUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expandedStorageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expandedExpirationFee",
          "type": "uint256"
        }
      ],
      "name": "Expanded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        }
      ],
      "name": "ResourceAdaptorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        }
      ],
      "name": "ResourceTypeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adaptor",
      "outputs": [
        {
          "internalType": "contract IResourceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "availableExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dstChainPayment",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expandedStorageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expandedExpirationFee",
          "type": "uint256"
        }
      ],
      "name": "expand",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expandedStorage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expandedExpiration",
          "type": "uint256"
        }
      ],
      "name": "expandedFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expandedStorageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expandedExpirationFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "expandedStorageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expandedExpirationFee",
          "type": "uint256"
        }
      ],
      "name": "expansions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expandedStorage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expandedExpiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "expiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "expiredAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dstChainPayment",
          "type": "address"
        },
        {
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "isExpired",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resourceType",
      "outputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dstChainPayment",
          "type": "address"
        }
      ],
      "name": "setDstChainPayment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IResourceAdaptor",
          "name": "_adaptor",
          "type": "address"
        }
      ],
      "name": "setResourceAdaptor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "_resourceType",
          "type": "uint8"
        }
      ],
      "name": "setResourceType",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bd13006254685605d99c7affc4340d92c04f3c7c453ac80b3a62578d132b4e3",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xfCaD8CDCA033F50819AABE8Fd04cD77014A8425e",
    "transactionIndex": 13,
    "gasUsed": "1172933",
    "logsBloom": "0x
    "blockHash": "0x6b2aa64c21e17271d585986f5baa395716e5f67c944f50193a28adc0646853bd",
    "transactionHash": "0x5bd13006254685605d99c7affc4340d92c04f3c7c453ac80b3a62578d132b4e3",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 19065071,
        "transactionHash": "0x5bd13006254685605d99c7affc4340d92c04f3c7c453ac80b3a62578d132b4e3",
        "address": "0xfCaD8CDCA033F50819AABE8Fd04cD77014A8425e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x6b2aa64c21e17271d585986f5baa395716e5f67c944f50193a28adc0646853bd"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19065071,
        "transactionHash": "0x5bd13006254685605d99c7affc4340d92c04f3c7c453ac80b3a62578d132b4e3",
        "address": "0xfCaD8CDCA033F50819AABE8Fd04cD77014A8425e",
        "topics": [
          "0xf2071e1b38ab3c561fb5d090a912ad00d911946da5f417b4eac46024a2f6ed60"
        ],
        "data": "0x0000000000000000000000009e6219b7befcec8251c1c6f8cf608857aea78e8e",
        "logIndex": 45,
        "blockHash": "0x6b2aa64c21e17271d585986f5baa395716e5f67c944f50193a28adc0646853bd"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19065071,
        "transactionHash": "0x5bd13006254685605d99c7affc4340d92c04f3c7c453ac80b3a62578d132b4e3",
        "address": "0xfCaD8CDCA033F50819AABE8Fd04cD77014A8425e",
        "topics": [
          "0xcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c1"
        ],
        "data": "0x000000000000000000000000e88387a76b96cef7499e2ade91cbc03e13811322",
        "logIndex": 46,
        "blockHash": "0x6b2aa64c21e17271d585986f5baa395716e5f67c944f50193a28adc0646853bd"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 19065071,
        "transactionHash": "0x5bd13006254685605d99c7affc4340d92c04f3c7c453ac80b3a62578d132b4e3",
        "address": "0xfCaD8CDCA033F50819AABE8Fd04cD77014A8425e",
        "topics": [
          "0xfd8efb560fb934faf6ee365a559c93f9a480bad1f14c5041d2cb8468296f87f0"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000004",
        "logIndex": 47,
        "blockHash": "0x6b2aa64c21e17271d585986f5baa395716e5f67c944f50193a28adc0646853bd"
      }
    ],
    "blockNumber": 19065071,
    "cumulativeGasUsed": "6015824",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "0x9E6219b7befCEc8251C1c6f8CF608857AEa78e8e",
    "0xe88387A76B96ceF7499E2aDe91cBc03E13811322"
  ],
  "solcInputHash": "4a5f2ec43e2694c7d59c6f445ff0e705",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainPayment\",\"type\":\"address\"},{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"dstChainPayment\",\"type\":\"address\"}],\"name\":\"DstChainPaymentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expandedStorageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expandedExpirationFee\",\"type\":\"uint256\"}],\"name\":\"Expanded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"}],\"name\":\"ResourceAdaptorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"}],\"name\":\"ResourceTypeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adaptor\",\"outputs\":[{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"availableExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dstChainPayment\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expandedStorageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandedExpirationFee\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expandedStorage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandedExpiration\",\"type\":\"uint256\"}],\"name\":\"expandedFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expandedStorageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandedExpirationFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expandedStorageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandedExpirationFee\",\"type\":\"uint256\"}],\"name\":\"expansions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expandedStorage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandedExpiration\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"expiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"expiredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstChainPayment\",\"type\":\"address\"},{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceType\",\"outputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dstChainPayment\",\"type\":\"address\"}],\"name\":\"setDstChainPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"_adaptor\",\"type\":\"address\"}],\"name\":\"setResourceAdaptor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"_resourceType\",\"type\":\"uint8\"}],\"name\":\"setResourceType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resources/controllers/IPFSStorageController.sol\":\"IPFSStorageController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/payment/DstChainPaymentWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nabstract contract DstChainPaymentWrapper is OwnableUpgradeable {\\n\\taddress public dstChainPayment;\\n\\n\\tevent DstChainPaymentUpdated(address dstChainPayment);\\n\\n\\tmodifier onlyDstChainPayment() {\\n\\t\\trequire(msg.sender == dstChainPayment, 'DstChainPaymentWrapper: caller is not dst chain payment');\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction __Init_Dst_Chain_Payment(address _dstChainPayment) internal onlyInitializing {\\n\\t\\t_setDstChainPayment(_dstChainPayment);\\n\\t}\\n\\n\\tfunction setDstChainPayment(address _dstChainPayment) external onlyOwner {\\n\\t\\t_setDstChainPayment(_dstChainPayment);\\n\\t}\\n\\n\\tfunction _setDstChainPayment(address _dstChainPayment) internal {\\n\\t\\tdstChainPayment = _dstChainPayment;\\n\\t\\temit DstChainPaymentUpdated(_dstChainPayment);\\n\\t}\\n\\n}\",\"keccak256\":\"0x58d525d2b57be6db60acddc8d9b59db989b6f98affe2f80b718f8ae0b79b74fa\",\"license\":\"GPL-3.0-only\"},\"contracts/resources/AdaptorWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\nimport './interfaces/IAdaptorWrapper.sol';\\nimport '../libraries/ResourceData.sol';\\n\\nabstract contract AdaptorWrapper is IAdaptorWrapper, OwnableUpgradeable {\\n\\tIResourceAdaptor public override adaptor;\\n\\n\\tResourceData.ResourceType public override resourceType;\\n\\n\\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\\n\\t\\t_setResourceAdaptor(_adaptor);\\n\\t}\\n\\n\\tfunction __Init_Resource_Type(ResourceData.ResourceType _resourceType) internal onlyInitializing {\\n\\t\\t_setResourceType(_resourceType);\\n\\t}\\n\\n\\tfunction setResourceAdaptor(IResourceAdaptor _adaptor) external onlyOwner {\\n\\t\\t_setResourceAdaptor(_adaptor);\\n\\t}\\n\\n\\tfunction setResourceType(ResourceData.ResourceType _resourceType) external onlyOwner {\\n\\t\\t_setResourceType(_resourceType);\\n\\t}\\n\\n\\tfunction price() public view returns (uint256) {\\n\\t\\treturn adaptor.priceOf(resourceType);\\n\\t}\\n\\n\\tfunction getValueOf(uint256 amount) public view returns (uint256) {\\n\\t\\treturn adaptor.getValueOf(resourceType, amount);\\n\\t}\\n\\n\\tfunction getAmountOf(uint256 value) public view returns (uint256) {\\n\\t\\treturn adaptor.getAmountOf(resourceType, value);\\n\\t}\\n\\n\\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\\n\\t\\tadaptor = _adaptor;\\n\\t\\temit ResourceAdaptorUpdated(_adaptor);\\n\\t}\\n\\n\\tfunction _setResourceType(ResourceData.ResourceType _resourceType) internal {\\n\\t\\tresourceType = _resourceType;\\n\\t\\temit ResourceTypeUpdated(_resourceType);\\n\\t}\\n}\\n\",\"keccak256\":\"0x568debd8a6cbb5c9d16073ca3c8cf7f7e73f44823c0ae54869601474a10c587c\",\"license\":\"UNLICENSE\"},\"contracts/resources/controllers/IPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '../AdaptorWrapper.sol';\\nimport '../interfaces/IIPFSStorageController.sol';\\nimport '../../payment/DstChainPaymentWrapper.sol';\\n\\ncontract IPFSStorageController is IIPFSStorageController, DstChainPaymentWrapper, AdaptorWrapper {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tmapping(bytes32 => IPFSStorage) internal ipfsStorage;\\n\\n\\tconstructor(\\n\\t\\taddress owner,\\n\\t\\taddress dstChainPayment,\\n\\t\\tIResourceAdaptor adaptor\\n\\t) initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Dst_Chain_Payment(dstChainPayment);\\n\\t\\t__Init_Resource_Adaptor(adaptor);\\n\\t\\t__Init_Resource_Type(ResourceData.ResourceType.IPFSStorage);\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress dstChainPayment,\\n\\t\\tIResourceAdaptor adaptor\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Dst_Chain_Payment(dstChainPayment);\\n\\t\\t__Init_Resource_Adaptor(adaptor);\\n\\t\\t__Init_Resource_Type(ResourceData.ResourceType.IPFSStorage);\\n\\t}\\n\\n\\tfunction expand(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external override onlyDstChainPayment returns (uint256) {\\n\\t\\t(uint256 expandedStorage, uint256 expandedExpiration) = expansions(account, expandedStorageFee, expandedExpirationFee);\\n\\t\\tif (isExpired(account)) {\\n\\t\\t\\tipfsStorage[account].startTime = block.timestamp;\\n\\t\\t\\tipfsStorage[account].amount = expandedStorage;\\n\\t\\t\\tipfsStorage[account].expiration = expandedExpiration;\\n\\t\\t} else {\\n\\t\\t\\tipfsStorage[account].amount = ipfsStorage[account].amount.add(expandedStorage);\\n\\t\\t\\tipfsStorage[account].expiration = ipfsStorage[account].expiration.add(expandedExpiration);\\n\\t\\t}\\n\\n\\t\\temit Expanded(account, expandedStorageFee, expandedExpirationFee);\\n\\t\\treturn expandedStorageFee.add(expandedExpirationFee);\\n\\t}\\n\\n\\tfunction isExpired(bytes32 account) public view override returns (bool) {\\n\\t\\treturn block.timestamp > startTime(account).add(expiration(account));\\n\\t}\\n\\n\\tfunction startTime(bytes32 account) public view override returns (uint256) {\\n\\t\\treturn ipfsStorage[account].startTime;\\n\\t}\\n\\n\\tfunction availableExpiration(bytes32 account) public view override returns (uint256) {\\n\\t\\trequire(!isExpired(account), 'IPFSStorageController: account is expired.');\\n\\t\\treturn expiredAt(account).sub(block.timestamp);\\n\\t}\\n\\n\\tfunction expiration(bytes32 account) public view override returns (uint256) {\\n\\t\\treturn ipfsStorage[account].expiration;\\n\\t}\\n\\n\\tfunction expiredAt(bytes32 account) public view override returns (uint256) {\\n\\t\\treturn startTime(account).add(expiration(account));\\n\\t}\\n\\n\\tfunction balanceOf(bytes32 account) public view override returns (uint256) {\\n\\t\\trequire(!isExpired(account), 'IPFSStorageController: account is expired.');\\n\\t\\treturn ipfsStorage[account].amount;\\n\\t}\\n\\n\\tfunction expandedFee(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorage,\\n\\t\\tuint256 expandedExpiration\\n\\t) public view override returns (uint256 expandedStorageFee, uint256 expandedExpirationFee) {\\n\\t\\tif (isExpired(account)) {\\n\\t\\t\\trequire(expandedStorage > 0 && expandedExpiration > 0, 'IPFSStorageController: invalid params with expired account');\\n\\t\\t\\texpandedStorageFee = getValueOf(expandedStorage);\\n\\t\\t\\texpandedExpirationFee = expandedStorage.mul(expandedExpiration);\\n\\t\\t} else {\\n\\t\\t\\trequire(expandedStorage > 0 || expandedExpiration > 0, 'IPFSStorageController: invalid params');\\n\\t\\t\\texpandedStorageFee = expandedStorage.mul(getValueOf(availableExpiration(account)));\\n\\t\\t\\texpandedExpirationFee = expandedExpiration.mul(getValueOf(balanceOf(account).add(expandedStorage)));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction expansions(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) public view override returns (uint256 expandedStorage, uint256 expandedExpiration) {\\n\\t\\tif (isExpired(account)) {\\n\\t\\t\\trequire(expandedStorageFee > 0 && expandedExpirationFee > 0, 'IPFSStorageController: invalid params with expired account');\\n\\t\\t\\texpandedStorage = expandedStorageFee.div(price());\\n\\t\\t\\texpandedExpiration = expandedExpirationFee.div(expandedStorage);\\n\\t\\t} else {\\n\\t\\t\\trequire(expandedStorageFee > 0 || expandedExpirationFee > 0, 'IPFSStorageController: invalid params');\\n\\t\\t\\texpandedStorage = expandedStorageFee.div(getValueOf(availableExpiration(account)));\\n\\t\\t\\texpandedExpiration = expandedExpirationFee.div(getValueOf(balanceOf(account).add(expandedStorage)));\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xcdd5a2d8a0564666236d44818c466fe3e8760d4d500898e990f4fff878fe9608\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IAdaptorWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IResourceAdaptor.sol';\\nimport '../../libraries/ResourceData.sol';\\n\\ninterface IAdaptorWrapper {\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\tevent ResourceTypeUpdated(ResourceData.ResourceType resourceType);\\n\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n\\n\\tfunction resourceType() external view returns (ResourceData.ResourceType);\\n\\n\\tfunction price() external view returns (uint256);\\n\\n\\tfunction getValueOf(uint256 amount) external view returns (uint256);\\n\\n\\tfunction getAmountOf(uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd34f9e364967a82a04fea655b14e3d70c214f3735737cf59f7643fbaeaa6f735\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IIPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './IAdaptorWrapper.sol';\\n\\ninterface IIPFSStorageController is IAdaptorWrapper {\\n\\tstruct IPFSStorage {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tevent Expanded(bytes32 account, uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\tfunction expand(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external returns (uint256);\\n\\n\\tfunction isExpired(bytes32 account) external view returns (bool);\\n\\n\\tfunction startTime(bytes32 account) external view returns (uint256);\\n\\n\\tfunction availableExpiration(bytes32 account) external view returns (uint256);\\n\\n\\tfunction expiration(bytes32 account) external view returns (uint256);\\n\\n\\tfunction expiredAt(bytes32 account) external view returns (uint256);\\n\\n\\tfunction balanceOf(bytes32 account) external view returns (uint256);\\n\\n\\tfunction expandedFee(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorage,\\n\\t\\tuint256 expandedExpiration\\n\\t) external view returns (uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\tfunction expansions(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external view returns (uint256 expandedStorage, uint256 expandedExpiration);\\n}\\n\",\"keccak256\":\"0xda13c1cb10e7860d2776f95ef597f349c8b047f9f1a0ad6adde71dc2caa70a00\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\ninterface IResourceAdaptor {\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf60bb837ce179f97f69cc642ef0b775cc58c952824869b89df3d29729133b738\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200177938038062001779833981016040819052620000349162000370565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b620000f0565b620000835760405162461bcd60e51b81526004016200007a9062000416565b60405180910390fd5b600054610100900460ff16158015620000a6576000805461ffff19166101011790555b620000b1846200010e565b620000bc8362000160565b620000c78262000198565b620000d36004620001cd565b8015620000e6576000805461ff00191690555b505050506200054d565b600062000108306200020260201b620009c91760201c565b15905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166200018a5760405162461bcd60e51b81526004016200007a9062000471565b620001958162000211565b50565b600054610100900460ff16620001c25760405162461bcd60e51b81526004016200007a9062000471565b620001958162000269565b600054610100900460ff16620001f75760405162461bcd60e51b81526004016200007a9062000471565b6200019581620002b6565b6001600160a01b03163b151590565b606580546001600160a01b0319166001600160a01b0383161790556040517ff2071e1b38ab3c561fb5d090a912ad00d911946da5f417b4eac46024a2f6ed60906200025e90839062000494565b60405180910390a150565b606680546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c1906200025e908390620004db565b6066805482919060ff60a01b1916600160a01b836004811115620002de57620002de620004eb565b02179055507ffd8efb560fb934faf6ee365a559c93f9a480bad1f14c5041d2cb8468296f87f0816040516200025e91906200053d565b60006001600160a01b0382165b92915050565b620003328162000314565b81146200019557600080fd5b8051620003218162000327565b6000620003218262000314565b62000332816200034b565b8051620003218162000358565b6000806000606084860312156200038a576200038a600080fd5b60006200039886866200033e565b9350506020620003ab868287016200033e565b9250506040620003be8682870162000363565b9150509250925092565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b602080825281016200032181620003c8565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506200040f565b60208082528101620003218162000428565b6200048e8162000314565b82525050565b6020810162000321828462000483565b60006001600160a01b03821662000321565b60006200032182620004a4565b60006200032182620004b6565b6200048e81620004c3565b60208101620003218284620004d0565b634e487b7160e01b600052602160045260246000fd5b60058110620001955762000195620004eb565b80620005208162000501565b919050565b6000620003218262000514565b6200048e8162000525565b6020810162000321828462000532565b61121c806200055d6000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c8063715018a6116100b8578063dc28b0f31161007c578063dc28b0f3146102c5578063f2fde38b146102d8578063f4daa3be146102eb578063f60cfa59146102fe578063f74d561f14610311578063f7d221901461032457600080fd5b8063715018a6146102685780638da5cb5b14610270578063a035b1fe1461028a578063c0c53b8b14610292578063c2cd9b2b146102a557600080fd5b80634513f23d1161010a5780634513f23d146101cb5780634e7c0d9a146101de57806356406fa5146101ff578063691b2a6d146102225780636c7f1542146102355780636db2feb21461024857600080fd5b806306570749146101475780630ab2b6b9146101705780633b148f59146101835780634235fec0146101a3578063429aafd9146101b6575b600080fd5b61015a610155366004610be1565b610345565b6040516101679190610c12565b60405180910390f35b61015a61017e366004610be1565b6103d9565b61015a610191366004610be1565b60009081526067602052604090205490565b61015a6101b1366004610c20565b610417565b6101c96101c4366004610c95565b610534565b005b6101c96101d9366004610cd5565b61056a565b6101f16101ec366004610c20565b61059d565b604051610167929190610cf6565b61015a61020d366004610be1565b60009081526067602052604090206001015490565b6101c9610230366004610d29565b610666565b61015a610243366004610be1565b610699565b61025b610256366004610be1565b6106d7565b6040516101679190610d52565b6101c961070a565b6033546001600160a01b03165b6040516101679190610d69565b61015a610740565b6101c96102a0366004610d77565b6107d1565b6066546102b8906001600160a01b031681565b6040516101679190610dd1565b6101f16102d3366004610c20565b61086b565b6101c96102e6366004610c95565b61091a565b61015a6102f9366004610be1565b610973565b60655461027d906001600160a01b031681565b61015a61031f366004610be1565b6109ae565b60665461033890600160a01b900460ff1681565b6040516101679190610e28565b60665460405163a6170b5160e01b81526000916001600160a01b0381169163a6170b519161038391600160a01b90910460ff16908690600401610e36565b60206040518083038186803b15801561039b57600080fd5b505afa1580156103af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d39190610e4f565b92915050565b606654604051630d1f7d6360e31b81526000916001600160a01b038116916368fbeb189161038391600160a01b90910460ff16908690600401610e36565b6065546000906001600160a01b0316331461044d5760405162461bcd60e51b815260040161044490610ecd565b60405180910390fd5b60008061045b86868661059d565b91509150610468866106d7565b15610490576000868152606760205260409020428155600281018390556001018190556104e3565b6000868152606760205260409020600201546104ac90836109d8565b60008781526067602052604090206002810191909155600101546104d090826109d8565b6000878152606760205260409020600101555b7f5395fb578323cdb0b69f604c363dd84cab44b6f6e054c61d61c8a7ddf6e6998c86868660405161051693929190610edd565b60405180910390a161052885856109d8565b925050505b9392505050565b6033546001600160a01b0316331461055e5760405162461bcd60e51b815260040161044490610f05565b610567816109e4565b50565b6033546001600160a01b031633146105945760405162461bcd60e51b815260040161044490610f05565b61056781610a3a565b6000806105a9856106d7565b156105ff576000841180156105be5750600083115b6105da5760405162461bcd60e51b815260040161044490610f99565b6105ec6105e5610740565b8590610a85565b91506105f88383610a85565b905061065e565b600084118061060e5750600083115b61062a5760405162461bcd60e51b815260040161044490610feb565b6106396105e561017e87610973565b915061065b61065461017e8461064e89610699565b906109d8565b8490610a85565b90505b935093915050565b6033546001600160a01b031633146106905760405162461bcd60e51b815260040161044490610f05565b61056781610a91565b60006106a4826106d7565b156106c15760405162461bcd60e51b815260040161044490611042565b5060009081526067602052604090206002015490565b600081815260676020526040812060010154610702905b60008481526067602052604090205461064e565b421192915050565b6033546001600160a01b031633146107345760405162461bcd60e51b815260040161044490610f05565b61073e6000610aea565b565b60665460405163912397c360e01b81526000916001600160a01b0381169163912397c39161077c91600160a01b90910460ff1690600401610e28565b60206040518083038186803b15801561079457600080fd5b505afa1580156107a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cc9190610e4f565b905090565b600054610100900460ff166107ec5760005460ff16156107f0565b303b155b61080c5760405162461bcd60e51b81526004016104449061109d565b600054610100900460ff1615801561082e576000805461ffff19166101011790555b61083784610aea565b61084083610b3c565b61084982610b63565b6108536004610b8a565b8015610865576000805461ff00191690555b50505050565b600080610877856106d7565b156108bd5760008411801561088c5750600083115b6108a85760405162461bcd60e51b815260040161044490610f99565b6108b1846103d9565b91506105f88484610bb1565b60008411806108cc5750600083115b6108e85760405162461bcd60e51b815260040161044490610feb565b6108fe6108f761017e87610973565b8590610bb1565b915061065b61091361017e8661064e89610699565b8490610bb1565b6033546001600160a01b031633146109445760405162461bcd60e51b815260040161044490610f05565b6001600160a01b03811661096a5760405162461bcd60e51b8152600401610444906110f0565b61056781610aea565b600061097e826106d7565b1561099b5760405162461bcd60e51b815260040161044490611042565b6103d3426109a8846109ae565b90610bbd565b6000818152606760205260408120600101546103d3906106ee565b6001600160a01b03163b151590565b600061052d8284611116565b606580546001600160a01b0319166001600160a01b0383161790556040517ff2071e1b38ab3c561fb5d090a912ad00d911946da5f417b4eac46024a2f6ed6090610a2f908390610d69565b60405180910390a150565b606680546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c190610a2f908390610dd1565b600061052d8284611144565b6066805482919060ff60a01b1916600160a01b836004811115610ab657610ab6610ddf565b02179055507ffd8efb560fb934faf6ee365a559c93f9a480bad1f14c5041d2cb8468296f87f081604051610a2f9190610e28565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661055e5760405162461bcd60e51b8152600401610444906111a0565b600054610100900460ff166105945760405162461bcd60e51b8152600401610444906111a0565b600054610100900460ff166106905760405162461bcd60e51b8152600401610444906111a0565b600061052d82846111b0565b600061052d82846111cf565b805b811461056757600080fd5b80356103d381610bc9565b600060208284031215610bf657610bf6600080fd5b6000610c028484610bd6565b949350505050565b805b82525050565b602081016103d38284610c0a565b600080600060608486031215610c3857610c38600080fd5b6000610c448686610bd6565b9350506020610c5586828701610bd6565b9250506040610c6686828701610bd6565b9150509250925092565b60006001600160a01b0382166103d3565b610bcb81610c70565b80356103d381610c81565b600060208284031215610caa57610caa600080fd5b6000610c028484610c8a565b60006103d382610c70565b610bcb81610cb6565b80356103d381610cc1565b600060208284031215610cea57610cea600080fd5b6000610c028484610cca565b60408101610d048285610c0a565b61052d6020830184610c0a565b6005811061056757600080fd5b80356103d381610d11565b600060208284031215610d3e57610d3e600080fd5b6000610c028484610d1e565b801515610c0c565b602081016103d38284610d4a565b610c0c81610c70565b602081016103d38284610d60565b600080600060608486031215610d8f57610d8f600080fd5b6000610d9b8686610c8a565b9350506020610dac86828701610c8a565b9250506040610c6686828701610cca565b60006103d382610cb6565b610c0c81610dbd565b602081016103d38284610dc8565b634e487b7160e01b600052602160045260246000fd5b6005811061056757610567610ddf565b80610e0f81610df5565b919050565b60006103d382610e05565b610c0c81610e14565b602081016103d38284610e1f565b60408101610d048285610e1f565b80516103d381610bc9565b600060208284031215610e6457610e64600080fd5b6000610c028484610e44565b603781526000602082017f447374436861696e5061796d656e74577261707065723a2063616c6c6572206981527f73206e6f742064737420636861696e207061796d656e74000000000000000000602082015291505b5060400190565b602080825281016103d381610e70565b60608101610eeb8286610c0a565b610ef86020830185610c0a565b610c026040830184610c0a565b60208082528181019081527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726040830152606082016103d3565b603a81526000602082017f4950465353746f72616765436f6e74726f6c6c65723a20696e76616c6964207081527f6172616d7320776974682065787069726564206163636f756e7400000000000060208201529150610ec6565b602080825281016103d381610f3f565b602581526000602082017f4950465353746f72616765436f6e74726f6c6c65723a20696e76616c696420708152646172616d7360d81b60208201529150610ec6565b602080825281016103d381610fa9565b602a81526000602082017f4950465353746f72616765436f6e74726f6c6c65723a206163636f756e742069815269399032bc3834b932b21760b11b60208201529150610ec6565b602080825281016103d381610ffb565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150610ec6565b602080825281016103d381611052565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150610ec6565b602080825281016103d3816110ad565b634e487b7160e01b600052601160045260246000fd5b6000821982111561112957611129611100565b500190565b634e487b7160e01b600052601260045260246000fd5b6000826111535761115361112e565b500490565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150610ec6565b602080825281016103d381611158565b60008160001904831182151516156111ca576111ca611100565b500290565b6000828210156111e1576111e1611100565b50039056fea2646970667358221220a60712ee8f38c199e1cf3949764c6cab3fb6db6db1853aea1d0375b39eaa98a564736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1608,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5548,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "dstChainPayment",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 6461,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "adaptor",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(IResourceAdaptor)7975"
      },
      {
        "astId": 6465,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "resourceType",
        "offset": 20,
        "slot": "102",
        "type": "t_enum(ResourceType)3821"
      },
      {
        "astId": 7051,
        "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
        "label": "ipfsStorage",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_bytes32,t_struct(IPFSStorage)7793_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IResourceAdaptor)7975": {
        "encoding": "inplace",
        "label": "contract IResourceAdaptor",
        "numberOfBytes": "20"
      },
      "t_enum(ResourceType)3821": {
        "encoding": "inplace",
        "label": "enum ResourceData.ResourceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_struct(IPFSStorage)7793_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IIPFSStorageController.IPFSStorage)",
        "numberOfBytes": "32",
        "value": "t_struct(IPFSStorage)7793_storage"
      },
      "t_struct(IPFSStorage)7793_storage": {
        "encoding": "inplace",
        "label": "struct IIPFSStorageController.IPFSStorage",
        "members": [
          {
            "astId": 7788,
            "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
            "label": "startTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7790,
            "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
            "label": "expiration",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7792,
            "contract": "contracts/resources/controllers/IPFSStorageController.sol:IPFSStorageController",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}