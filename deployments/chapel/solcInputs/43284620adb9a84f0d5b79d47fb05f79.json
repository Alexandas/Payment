{
  "language": "Solidity",
  "sources": {
    "contracts/resources/controllers/normal/NormalResourceController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport '../../AdaptorWrapper.sol';\nimport '../../interfaces/INormalResourceController.sol';\nimport '../../../payment/DstChainPaymentWrapper.sol';\n\nabstract contract NormalResourceController is INormalResourceController, DstChainPaymentWrapper, AdaptorWrapper {\n\tusing SafeMathUpgradeable for uint256;\n\n\tmapping(bytes32 => uint256) internal balances;\n\n\tfunction __Init_Normal_Resource_Controller(\n\t\taddress owner,\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor,\n\t\tResourceData.ResourceType resourceType\n\t) internal onlyInitializing {\n\t\t_transferOwnership(owner);\n\t\t__Init_Dst_Chain_Payment(dstChainPayment);\n\t\t__Init_Resource_Adaptor(adaptor);\n\t\t__Init_Resource_Type(resourceType);\n\t}\n\n\tfunction expand(bytes32 account, uint256 value) external override onlyDstChainPayment returns(uint256) {\n\t\tuint256 amount = getAmountOf(value);\n\t\tbalances[account] = balances[account].add(amount);\n\t\temit Expanded(account, value);\n\t\treturn value;\n\t}\n\n\tfunction balanceOf(bytes32 account) public view override returns(uint256) {\n\t\treturn balances[account];\n\t}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "contracts/resources/AdaptorWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nimport './interfaces/IAdaptorWrapper.sol';\nimport '../libraries/ResourceData.sol';\n\nabstract contract AdaptorWrapper is IAdaptorWrapper, OwnableUpgradeable {\n\tIResourceAdaptor public override adaptor;\n\n\tResourceData.ResourceType public override resourceType;\n\n\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\n\t\t_setResourceAdaptor(_adaptor);\n\t}\n\n\tfunction __Init_Resource_Type(ResourceData.ResourceType _resourceType) internal onlyInitializing {\n\t\t_setResourceType(_resourceType);\n\t}\n\n\tfunction setResourceAdaptor(IResourceAdaptor _adaptor) external onlyOwner {\n\t\t_setResourceAdaptor(_adaptor);\n\t}\n\n\tfunction setResourceType(ResourceData.ResourceType _resourceType) external onlyOwner {\n\t\t_setResourceType(_resourceType);\n\t}\n\n\tfunction price() public view returns (uint256) {\n\t\treturn adaptor.priceOf(resourceType);\n\t}\n\n\tfunction getValueOf(uint256 amount) public view returns (uint256) {\n\t\treturn adaptor.getValueOf(resourceType, amount);\n\t}\n\n\tfunction getAmountOf(uint256 value) public view returns (uint256) {\n\t\treturn adaptor.getAmountOf(resourceType, value);\n\t}\n\n\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\n\t\tadaptor = _adaptor;\n\t\temit ResourceAdaptorUpdated(_adaptor);\n\t}\n\n\tfunction _setResourceType(ResourceData.ResourceType _resourceType) internal {\n\t\tresourceType = _resourceType;\n\t\temit ResourceTypeUpdated(_resourceType);\n\t}\n}\n"
    },
    "contracts/resources/interfaces/INormalResourceController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './IAdaptorWrapper.sol';\n\ninterface INormalResourceController is IAdaptorWrapper {\n\tevent Expanded(bytes32 account, uint256 value);\n\n\tfunction expand(bytes32 account, uint256 value) external returns(uint256);\n\n\tfunction balanceOf(bytes32 account) external view returns (uint256);\n}\n"
    },
    "contracts/payment/DstChainPaymentWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract DstChainPaymentWrapper is OwnableUpgradeable {\n\taddress public dstChainPayment;\n\n\tevent DstChainPaymentUpdated(address dstChainPayment);\n\n\tmodifier onlyDstChainPayment() {\n\t\trequire(msg.sender == dstChainPayment, 'DstChainPaymentWrapper: caller is not dst chain payment');\n\t\t_;\n\t}\n\n\tfunction __Init_Dst_Chain_Payment(address _dstChainPayment) internal onlyInitializing {\n\t\t_setDstChainPayment(_dstChainPayment);\n\t}\n\n\tfunction setDstChainPayment(address _dstChainPayment) external onlyOwner {\n\t\t_setDstChainPayment(_dstChainPayment);\n\t}\n\n\tfunction _setDstChainPayment(address _dstChainPayment) internal {\n\t\tdstChainPayment = _dstChainPayment;\n\t\temit DstChainPaymentUpdated(_dstChainPayment);\n\t}\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/resources/interfaces/IAdaptorWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '../interfaces/IResourceAdaptor.sol';\nimport '../../libraries/ResourceData.sol';\n\ninterface IAdaptorWrapper {\n\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\n\n\tevent ResourceTypeUpdated(ResourceData.ResourceType resourceType);\n\n\tfunction adaptor() external view returns (IResourceAdaptor);\n\n\tfunction resourceType() external view returns (ResourceData.ResourceType);\n\n\tfunction price() external view returns (uint256);\n\n\tfunction getValueOf(uint256 amount) external view returns (uint256);\n\n\tfunction getAmountOf(uint256 value) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/ResourceData.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nlibrary ResourceData {\n\n\tenum ResourceType {\n\t\tNull,\n\t\tBuildingTime,\n\t\tBandwidth,\n\t\tARStorage,\n\t\tIPFSStorage\n\t}\n\n\tstruct Payload {\n\t\tResourceData.ResourceType resourceType;\n\t\tuint256[] values;\n\t}\n\n}"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/resources/interfaces/IResourceAdaptor.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '../../libraries/ResourceData.sol';\n\ninterface IResourceAdaptor {\n\n\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\n\n\tfunction getValueAt(\n\t\tResourceData.ResourceType resourceType,\n\t\tuint256 amount,\n\t\tuint256 _indexBlock\n\t) external view returns (uint256);\n\n\tfunction getAmountAt(\n\t\tResourceData.ResourceType resourceType,\n\t\tuint256 value,\n\t\tuint256 _indexBlock\n\t) external view returns (uint256);\n\n\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\n\n\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\n\n\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\n}\n"
    },
    "contracts/resources/controllers/normal/BuildingTimeController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './NormalResourceController.sol';\n\ncontract BuildingTimeController is NormalResourceController {\n\tconstructor(\n\t\taddress owner,\t\t\n\t\taddress dstChainPayment,\n \t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.BuildingTime);\n\t}\n\n\tfunction initialize(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.BuildingTime);\n\t}\n}\n"
    },
    "contracts/resources/controllers/normal/BandwidthController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './NormalResourceController.sol';\n\ncontract BandwidthController is NormalResourceController {\n\tconstructor(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.Bandwidth);\n\t}\n\n\tfunction initialize(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.Bandwidth);\n\t}\n}\n"
    },
    "contracts/resources/controllers/IPFSStorageController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport '../AdaptorWrapper.sol';\nimport '../interfaces/IIPFSStorageController.sol';\nimport '../../payment/DstChainPaymentWrapper.sol';\n\ncontract IPFSStorageController is IIPFSStorageController, DstChainPaymentWrapper, AdaptorWrapper {\n\tusing SafeMathUpgradeable for uint256;\n\n\tmapping(bytes32 => IPFSStorage) internal ipfsStorage;\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Dst_Chain_Payment(dstChainPayment);\n\t\t__Init_Resource_Adaptor(adaptor);\n\t\t__Init_Resource_Type(ResourceData.ResourceType.IPFSStorage);\n\t}\n\n\tfunction initialize(\n\t\taddress owner,\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Dst_Chain_Payment(dstChainPayment);\n\t\t__Init_Resource_Adaptor(adaptor);\n\t\t__Init_Resource_Type(ResourceData.ResourceType.IPFSStorage);\n\t}\n\n\tfunction expand(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) external override onlyDstChainPayment returns (uint256) {\n\t\t(uint256 expandedStorage, uint256 expandedExpiration) = expansions(account, expandedStorageFee, expandedExpirationFee);\n\t\tif (isExpired(account)) {\n\t\t\tipfsStorage[account].startTime = block.timestamp;\n\t\t\tipfsStorage[account].amount = expandedStorage;\n\t\t\tipfsStorage[account].expiration = expandedExpiration;\n\t\t} else {\n\t\t\tipfsStorage[account].amount = ipfsStorage[account].amount.add(expandedStorage);\n\t\t\tipfsStorage[account].expiration = ipfsStorage[account].expiration.add(expandedExpiration);\n\t\t}\n\n\t\temit Expanded(account, expandedStorageFee, expandedExpirationFee);\n\t\treturn expandedStorageFee.add(expandedExpirationFee);\n\t}\n\n\tfunction isExpired(bytes32 account) public view override returns (bool) {\n\t\treturn block.timestamp > startTime(account).add(expiration(account));\n\t}\n\n\tfunction startTime(bytes32 account) public view override returns (uint256) {\n\t\treturn ipfsStorage[account].startTime;\n\t}\n\n\tfunction availableExpiration(bytes32 account) public view override returns (uint256) {\n\t\trequire(!isExpired(account), 'IPFSStorageController: account is expired.');\n\t\treturn expiredAt(account).sub(block.timestamp);\n\t}\n\n\tfunction expiration(bytes32 account) public view override returns (uint256) {\n\t\treturn ipfsStorage[account].expiration;\n\t}\n\n\tfunction expiredAt(bytes32 account) public view override returns (uint256) {\n\t\treturn startTime(account).add(expiration(account));\n\t}\n\n\tfunction balanceOf(bytes32 account) public view override returns (uint256) {\n\t\trequire(!isExpired(account), 'IPFSStorageController: account is expired.');\n\t\treturn ipfsStorage[account].amount;\n\t}\n\n\tfunction expandedFee(\n\t\tbytes32 account,\n\t\tuint256 expandedStorage,\n\t\tuint256 expandedExpiration\n\t) public view override returns (uint256 expandedStorageFee, uint256 expandedExpirationFee) {\n\t\tif (isExpired(account)) {\n\t\t\trequire(expandedStorage > 0 && expandedExpiration > 0, 'IPFSStorageController: invalid params with expired account');\n\t\t\texpandedStorageFee = getValueOf(expandedStorage);\n\t\t\texpandedExpirationFee = expandedStorage.mul(expandedExpiration);\n\t\t} else {\n\t\t\trequire(expandedStorage > 0 || expandedExpiration > 0, 'IPFSStorageController: invalid params');\n\t\t\texpandedStorageFee = expandedStorage.mul(getValueOf(availableExpiration(account)));\n\t\t\texpandedExpirationFee = expandedExpiration.mul(getValueOf(balanceOf(account).add(expandedStorage)));\n\t\t}\n\t}\n\n\tfunction expansions(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) public view override returns (uint256 expandedStorage, uint256 expandedExpiration) {\n\t\tif (isExpired(account)) {\n\t\t\trequire(expandedStorageFee > 0 && expandedExpirationFee > 0, 'IPFSStorageController: invalid params with expired account');\n\t\t\texpandedStorage = expandedStorageFee.div(price());\n\t\t\texpandedExpiration = expandedExpirationFee.div(expandedStorage);\n\t\t} else {\n\t\t\trequire(expandedStorageFee > 0 || expandedExpirationFee > 0, 'IPFSStorageController: invalid params');\n\t\t\texpandedStorage = expandedStorageFee.div(getValueOf(availableExpiration(account)));\n\t\t\texpandedExpiration = expandedExpirationFee.div(getValueOf(balanceOf(account).add(expandedStorage)));\n\t\t}\n\t}\n}\n"
    },
    "contracts/resources/interfaces/IIPFSStorageController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\nimport './IAdaptorWrapper.sol';\n\ninterface IIPFSStorageController is IAdaptorWrapper {\n\tstruct IPFSStorage {\n\t\tuint256 startTime;\n\t\tuint256 expiration;\n\t\tuint256 amount;\n\t}\n\n\tevent Expanded(bytes32 account, uint256 expandedStorageFee, uint256 expandedExpirationFee);\n\n\tfunction expand(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) external returns (uint256);\n\n\tfunction isExpired(bytes32 account) external view returns (bool);\n\n\tfunction startTime(bytes32 account) external view returns (uint256);\n\n\tfunction availableExpiration(bytes32 account) external view returns (uint256);\n\n\tfunction expiration(bytes32 account) external view returns (uint256);\n\n\tfunction expiredAt(bytes32 account) external view returns (uint256);\n\n\tfunction balanceOf(bytes32 account) external view returns (uint256);\n\n\tfunction expandedFee(\n\t\tbytes32 account,\n\t\tuint256 expandedStorage,\n\t\tuint256 expandedExpiration\n\t) external view returns (uint256 expandedStorageFee, uint256 expandedExpirationFee);\n\n\tfunction expansions(\n\t\tbytes32 account,\n\t\tuint256 expandedStorageFee,\n\t\tuint256 expandedExpirationFee\n\t) external view returns (uint256 expandedStorage, uint256 expandedExpiration);\n}\n"
    },
    "contracts/payment/DstChainPayment.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\n\nimport '../resources/ControllersWrapper.sol';\nimport '../interfaces/IDstChainPayment.sol';\nimport '../providers/ProvidersWrapper.sol';\nimport '../messages/MessageReceiverWrapper.sol';\nimport '../access/OwnerWithdrawable.sol';\nimport './ResourPayloadTool.sol';\n\ncontract DstChainPayment is\n\tIDstChainPayment,\n\tResourPayloadTool,\n\tMessageReceiverWrapper,\n\tReentrancyGuardUpgradeable,\n\tProvidersWrapper,\n\tControllersWrapper,\n\tOwnerWithdrawable\n{\n\tusing SafeMathUpgradeable for uint256;\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tIERC20Upgradeable public token;\n\n\tmapping(address => uint256) public providerBalances;\n\n\tconstructor(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIProviders providers,\n\t\taddress messageReceiver,\n\t\tIERC20Upgradeable token\n\t) initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Providers(providers);\n\t\t__Init_Message_Receiver(messageReceiver);\n\t\t__Init_Token(token);\n\t}\n\n\tfunction Init_Payment(\n\t\taddress owner,\n\t\taddress pauser,\n\t\tIProviders providers,\n\t\taddress messageReceiver,\n\t\tIERC20Upgradeable token\n\t) external initializer {\n\t\t_transferOwnership(owner);\n\t\t__Init_Pauser(pauser);\n\t\t__Init_Providers(providers);\n\t\t__Init_Message_Receiver(messageReceiver);\n\t\t__Init_Token(token);\n\t}\n\n\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\n\t\t_setToken(_token);\n\t}\n\n\tfunction convertSourceChainPayloads(uint256 amount, ResourceData.Payload[] memory payloads) public view returns (ResourceData.Payload[] memory) {\n\t\treturn _convertSourceChainPayloads(amount, payloads);\n\t}\n\n\tfunction payFromSourceChain(\n\t\tIERC20Upgradeable _token,\n\t\tuint256 dstAmount,\n\t\tbytes calldata message\n\t) external override onlyMessageReceiver whenNotPaused nonReentrant returns (uint256 value) {\n\t\trequire(decimals(_token) == 6, 'DstChainPayment: invalid token decimals');\n\t\trequire(token == _token, 'DstChainPayment: invalid token');\n\t\t(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) = decodeSourceChainMessage(message);\n\t\tPaymentPayload memory payload = PaymentPayload(provider, nonce, account, _convertSourceChainPayloads(exchange(dstAmount), payloads));\n\t\treturn _pay(payload);\n\t}\n\n\tfunction pay(PaymentPayload memory payload) public override whenNotPaused nonReentrant returns (uint256 value) {\n\t\treturn _pay(payload);\n\t}\n\n\tfunction _pay(PaymentPayload memory payload) internal returns (uint256 value) {\n\t\trequire(providers.isProvider(payload.provider), 'DstChainPayment: nonexistent provider');\n\t\tvalue = _processPayloads(payload.account, payload.payloads);\n\t\tvalue = exchangeReverse(10 ** 12);\n\t\ttoken.safeTransferFrom(msg.sender, address(this), value);\n\t\tproviderBalances[payload.provider] = providerBalances[payload.provider].add(value);\n\n\t\temit Paid(msg.sender, token, payload);\n\t}\n\n\tfunction _processPayloads(bytes32 account, ResourceData.Payload[] memory payloads) internal returns (uint256 value) {\n\t\trequire(payloads.length > 0, 'DstChainPayment: invalid payloads');\n\t\tfor (uint256 i = 0; i < payloads.length; i++) {\n\t\t\tResourceData.Payload memory payload = payloads[i];\n\t\t\tif (payload.resourceType == ResourceData.ResourceType.BuildingTime) {\n\t\t\t\tvalue = value.add(_processNormalResource(buildingTimeController, account, payload));\n\t\t\t} else if (payload.resourceType == ResourceData.ResourceType.ARStorage) {\n\t\t\t\tvalue = value.add(_processNormalResource(arStorageController, account, payload));\n\t\t\t} else if (payload.resourceType == ResourceData.ResourceType.Bandwidth) {\n\t\t\t\tvalue = value.add(_processNormalResource(bandwidthController, account, payload));\n\t\t\t} else if (payload.resourceType == ResourceData.ResourceType.IPFSStorage) {\n\t\t\t\tvalue = value.add(_processIPFSStorage(ipfsStorageController, account, payload));\n\t\t\t} else {\n\t\t\t\trevert('DstChainPayment: unknown resource type');\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction exchange(uint256 amount) internal view returns (uint256 value) {\n\t\treturn amount.mul(10**12);\n\t}\n\n\tfunction exchangeReverse(uint256 amount) internal view returns (uint256 value) {\n\t\treturn amount.div(10**12);\n\t}\n\n\tfunction decimals(IERC20Upgradeable token) public view returns (uint256 value) {\n\t\t(bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSelector(bytes4(keccak256('decimals()'))));\n\t\trequire(success, 'DstChainPayment: no decimals');\n\t\treturn abi.decode(data, (uint256));\n\t}\n\n\tfunction _processNormalResource(\n\t\tINormalResourceController controller,\n\t\tbytes32 account,\n\t\tResourceData.Payload memory payload\n\t) internal returns (uint256 value) {\n\t\trequire(payload.values.length == 1, 'DstChainPayment: invalid token value length');\n\t\treturn controller.expand(account, payload.values[0]);\n\t}\n\n\tfunction _processIPFSStorage(\n\t\tIIPFSStorageController controller,\n\t\tbytes32 account,\n\t\tResourceData.Payload memory payload\n\t) internal returns (uint256 value) {\n\t\trequire(payload.values.length == 2, 'DstChainPayment: invalid token value');\n\t\treturn controller.expand(account, payload.values[0], payload.values[1]);\n\t}\n\n\tfunction providerWithdraw(\n\t\tIERC20Upgradeable token,\n\t\taddress to,\n\t\tuint256 value\n\t) external whenNotPaused nonReentrant {\n\t\trequire(providers.isProvider(msg.sender), 'DstChainPayment: caller is not a provider');\n\t\trequire(providerBalances[msg.sender] >= value, 'DstChainPayment: insufficient provider balance');\n\t\tproviderBalances[msg.sender] = providerBalances[msg.sender].sub(value);\n\t\ttoken.safeTransfer(to, value);\n\n\t\temit ProvidetWithdraw(msg.sender, token, to, value);\n\t}\n\n\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\n\t\t_setToken(_token);\n\t}\n\n\tfunction _setToken(IERC20Upgradeable _token) internal {\n\t\ttoken = _token;\n\t\temit TokenUpdated(_token);\n\t}\n\n\tfunction decodeSourceChainMessage(bytes memory message)\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\taddress provider,\n\t\t\tuint64 nonce,\n\t\t\tbytes32 account,\n\t\t\tResourceData.Payload[] memory payloads\n\t\t)\n\t{\n\t\t(provider, nonce, account, payloads) = abi.decode(message, (address, uint64, bytes32, ResourceData.Payload[]));\n\t}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/resources/ControllersWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '../resources/interfaces/INormalResourceController.sol';\nimport '../resources/interfaces/IIPFSStorageController.sol';\n\nabstract contract ControllersWrapper is OwnableUpgradeable {\n\n\tINormalResourceController public buildingTimeController;\n\n\tINormalResourceController public bandwidthController;\n\n\tINormalResourceController public arStorageController;\n\n\tIIPFSStorageController public ipfsStorageController;\n\n\tevent BuildingTimeControllerUpdated(INormalResourceController _buildingTimeController);\n\n\tevent BandwidthControllerUpdated(INormalResourceController _bandwidthController);\n\n\tevent ARStorageControllerUpdated(INormalResourceController _arStorageController);\n\n\tevent IPFSStorageControllerUpdated(IIPFSStorageController _ipfsStorageController);\n\n\tfunction setBuildingTimeController(INormalResourceController _buildingTimeController) external onlyOwner {\n\t\t_setBuildingTimeController(_buildingTimeController);\n\t}\n\n\tfunction setBandwidthController(INormalResourceController _bandwidthController) external onlyOwner {\n\t\t_setBandwidthController(_bandwidthController);\n\t}\n\n\tfunction setARStorageController(INormalResourceController _arStorageController) external onlyOwner {\n\t\t_setARStorageController(_arStorageController);\n\t}\n\n\tfunction setIPFSStorageController(IIPFSStorageController _ipfsStorageController) external onlyOwner {\n\t\t_setIPFSStorageController(_ipfsStorageController);\n\t}\n\n\tfunction _setBuildingTimeController(INormalResourceController _buildingTimeController) internal {\n\t\tbuildingTimeController = _buildingTimeController;\n\t\temit BuildingTimeControllerUpdated(_buildingTimeController);\n\t}\n\n\tfunction _setBandwidthController(INormalResourceController _bandwidthController) internal {\n\t\tbandwidthController = _bandwidthController;\n\t\temit BandwidthControllerUpdated(_bandwidthController);\n\t}\n\n\tfunction _setARStorageController(INormalResourceController _arStorageController) internal {\n\t\tarStorageController = _arStorageController;\n\t\temit ARStorageControllerUpdated(_arStorageController);\n\t}\n\n\tfunction _setIPFSStorageController(IIPFSStorageController _ipfsStorageController) internal {\n\t\tipfsStorageController = _ipfsStorageController;\n\t\temit IPFSStorageControllerUpdated(_ipfsStorageController);\n\t}\n\n}\n"
    },
    "contracts/interfaces/IDstChainPayment.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '../libraries/ResourceData.sol';\n\ninterface IDstChainPayment {\n\n\tstruct PaymentPayload {\n\t\taddress provider;\n\t\tuint64 nonce;\n\t\tbytes32 account;\n\t\tResourceData.Payload[] payloads;\n\t}\n\n\tevent TokenUpdated(IERC20Upgradeable token);\n\n\tevent Paid(address payer, IERC20Upgradeable token, PaymentPayload payload);\n\n\tevent ProvidetWithdraw(address provider, IERC20Upgradeable token, address to, uint256 value);\n\n\tfunction payFromSourceChain(\n\t\tIERC20Upgradeable token,\n\t\tuint256 amount,\n\t\tbytes calldata message\n\t) external returns (uint256 value);\n\n\tfunction pay(PaymentPayload memory payload) external returns (uint256 value);\n\n}\n"
    },
    "contracts/providers/ProvidersWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\nimport '../access/Pauser.sol';\nimport '../interfaces/IProvidersWrapper.sol';\n\nabstract contract ProvidersWrapper is IProvidersWrapper, Pauser {\n\tIProviders public override providers;\n\n\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\n\t\t_setProviders(_providers);\n\t}\n\n\tfunction _setProviders(IProviders _providers) internal {\n\t\tproviders = _providers;\n\t\temit ProvidersUpdated(_providers);\n\t}\n}\n"
    },
    "contracts/messages/MessageReceiverWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\nabstract contract MessageReceiverWrapper is OwnableUpgradeable {\n\taddress public messageReceiver;\n\n\tevent MessageReceiverUpdated(address messageReceiver);\n\n\tmodifier onlyMessageReceiver() {\n\t\trequire(msg.sender == messageReceiver, 'MessageReceiverWrapper: caller is not message receiver');\n\t\t_;\n\t}\n\n\tfunction __Init_Message_Receiver(address _messageReceiver) internal onlyInitializing {\n\t\t_setMessageReceiver(_messageReceiver);\n\t}\n\n\tfunction setMessageReceiver(address _messageReceiver) external onlyOwner {\n\t\t_setMessageReceiver(_messageReceiver);\n\t}\n\n\tfunction _setMessageReceiver(address _messageReceiver) internal {\n\t\tmessageReceiver = _messageReceiver;\n\t\temit MessageReceiverUpdated(_messageReceiver);\n\t}\n\n}"
    },
    "contracts/access/OwnerWithdrawable.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\n\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\n\tusing SafeERC20Upgradeable for IERC20Upgradeable;\n\n\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\n\n\tevent NativeWithdrawal(address to, uint256 value);\n\n\tfunction withdraw(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\n\t\ttoken.safeTransfer(to, value);\n\t\temit Withdrawal(token, to, value);\n\t}\n\n\tfunction withdrawNative(address payable to, uint256 value) external onlyOwner {\n\t\tbool success = to.send(value);\n\t\trequire(success, 'Payment: withdraw native token failed');\n\t\temit NativeWithdrawal(to, value);\n\t}\n\n}\n"
    },
    "contracts/payment/ResourPayloadTool.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\n\nimport '../libraries/ResourceData.sol';\n\nabstract contract ResourPayloadTool {\n\tusing SafeMathUpgradeable for uint256;\n\n\tfunction _convertSourceChainPayloads(uint256 dstAmount, ResourceData.Payload[] memory payloads) internal pure returns (ResourceData.Payload[] memory newPayloads) {\n\t\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payload length');\n\t\tuint256 total = totalValue(payloads);\n\t\trequire(total > 0, 'ResourPayloadTool: zero values');\n\t\tfor (uint256 i = 0; i < payloads.length; i++) {\n\t\t\trequire(payloads[i].values.length > 0, 'ResourPayloadTool: invalid value length');\n\t\t\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\n\t\t\t\tpayloads[i].values[j] = payloads[i].values[j].mul(dstAmount).div(total);\n\t\t\t}\n\t\t}\n\t\treturn payloads;\n\t}\n\n\tfunction totalValue(ResourceData.Payload[] memory payloads) public pure returns (uint256 value) {\n\t\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payloads length');\n\t\tfor (uint256 i = 0; i < payloads.length; i++) {\n\t\t\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\n\t\t\t\tvalue = value.add(payloads[i].values[j]);\n\t\t\t}\n\t\t}\n\t}\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20Upgradeable.sol\";\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/access/Pauser.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\n\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\n\tmapping(address => bool) public pausers;\n\n\tevent PauserAdded(address account);\n\tevent PauserRemoved(address account);\n\n\tfunction __Init_Pauser(address account) internal onlyInitializing {\n\t\t_addPauser(account);\n\t}\n\n\tmodifier onlyPauser() {\n\t\trequire(isPauser(msg.sender), 'Pauser: Caller is not pauser');\n\t\t_;\n\t}\n\n\tfunction pause() public onlyPauser {\n\t\t_pause();\n\t}\n\n\tfunction unpause() public onlyPauser {\n\t\t_unpause();\n\t}\n\n\tfunction isPauser(address account) public view returns (bool) {\n\t\treturn pausers[account];\n\t}\n\n\tfunction addPauser(address account) public onlyOwner {\n\t\t_addPauser(account);\n\t}\n\n\tfunction removePauser(address account) public onlyOwner {\n\t\t_removePauser(account);\n\t}\n\n\tfunction renouncePauser() public {\n\t\t_removePauser(msg.sender);\n\t}\n\n\tfunction _addPauser(address account) private {\n\t\trequire(!isPauser(account), 'Pauser: Account is already pauser');\n\t\tpausers[account] = true;\n\t\temit PauserAdded(account);\n\t}\n\n\tfunction _removePauser(address account) private {\n\t\trequire(isPauser(account), 'Pauser: Account is not pauser');\n\t\tpausers[account] = false;\n\t\temit PauserRemoved(account);\n\t}\n}\n"
    },
    "contracts/interfaces/IProvidersWrapper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport '../interfaces/IProviders.sol';\n\ninterface IProvidersWrapper {\n\tevent ProvidersUpdated(IProviders providers);\n\n\tfunction providers() external view returns (IProviders);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/interfaces/IProviders.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\ninterface IProviders {\n\tevent ProviderUpdated(address provider, address wallet);\n\n\tevent RemoveProvider(address provider);\n\n\tfunction isProvider(address provider) external view returns (bool);\n\n\tfunction wallets(address provider) external view returns (address);\n\n\tfunction isValidSignature(\n\t\taddress provider,\n\t\tbytes32 hash,\n\t\tbytes memory signature\n\t) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/resources/controllers/normal/ARStorageController.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSE\n\npragma solidity >=0.8.0;\n\nimport './NormalResourceController.sol';\n\ncontract ARStorageController is NormalResourceController {\n\tconstructor(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.ARStorage);\n\t}\n\n\tfunction initialize(\n\t\taddress owner, \t\t\n\t\taddress dstChainPayment,\n\t\tIResourceAdaptor adaptor\n\t) external initializer {\n\t\t__Init_Normal_Resource_Controller(owner, dstChainPayment, adaptor, ResourceData.ResourceType.ARStorage);\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}