{
  "address": "0x661739950da390Fb4D82BC406CeD2586d45188bd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bills",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Billing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "BillsTypedHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "enum IFundWallet.Purpose",
          "name": "purpose",
          "type": "uint8"
        }
      ],
      "name": "NonceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "RechargeTypedHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Recharged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        }
      ],
      "name": "ResourceAdaptorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "WalletOwnerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adaptor",
      "outputs": [
        {
          "internalType": "contract IResourceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bills",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "billsHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "billsTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "decodeBills",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "indexBlock",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "enum ResourceData.ResourceType",
                  "name": "resourceType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBilling.BillEntry[]",
              "name": "entries",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBilling.Bill[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "indexBlock",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "enum ResourceData.ResourceType",
                  "name": "resourceType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256",
                  "name": "amount",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IBilling.BillEntry[]",
              "name": "entries",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBilling.Bill[]",
          "name": "bills",
          "type": "tuple[]"
        }
      ],
      "name": "encodeBills",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bills",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "hashTypedDataV4ForBills",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "hashTypedDataV4ForRecharge",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        },
        {
          "internalType": "contract IProviders",
          "name": "_providers",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rechargeTypes",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "billsTypes",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "matchResourceToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "matchTokenToResource",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "enum IFundWallet.Purpose",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providers",
      "outputs": [
        {
          "internalType": "contract IProviders",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recharge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rechargeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rechargeTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resourceDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "setBillsTypedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "setRechargeTypedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bills",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "spend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferWalletOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "account",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "bills",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBilling.Payload",
          "name": "payload",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5190205d77e4c262b29a0907965b5f660a95360f32868299285dd2627a9cfc71",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x661739950da390Fb4D82BC406CeD2586d45188bd",
    "transactionIndex": 20,
    "gasUsed": "3430302",
    "logsBloom": "0x
    "blockHash": "0xc76a16c2587878b365c7a1c0d1c41de10988d3be1e237e459448c76a3da66d87",
    "transactionHash": "0x5190205d77e4c262b29a0907965b5f660a95360f32868299285dd2627a9cfc71",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 26386433,
        "transactionHash": "0x5190205d77e4c262b29a0907965b5f660a95360f32868299285dd2627a9cfc71",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000068cea306ed7f720000000000000000000000000000000000000000000000002d58f7598a3d7e89000000000000000000000000000000000000000000001758dc8c8820af60e57e0000000000000000000000000000000000000000000000002cf028b6834fff17000000000000000000000000000000000000000000001758dcf556c3b64e64f0",
        "logIndex": 40,
        "blockHash": "0xc76a16c2587878b365c7a1c0d1c41de10988d3be1e237e459448c76a3da66d87"
      }
    ],
    "blockNumber": 26386433,
    "cumulativeGasUsed": "3850302",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c6c0c8a8d7c7c073cf1bd53c2ef166bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bills\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Billing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BillsTypedHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enum IFundWallet.Purpose\",\"name\":\"purpose\",\"type\":\"uint8\"}],\"name\":\"NonceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"RechargeTypedHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recharged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"}],\"name\":\"ResourceAdaptorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WalletOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adaptor\",\"outputs\":[{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bills\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"billsHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billsTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"decodeBills\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.BillEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.Bill[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.BillEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.Bill[]\",\"name\":\"bills\",\"type\":\"tuple[]\"}],\"name\":\"encodeBills\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bills\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"hashTypedDataV4ForBills\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashTypedDataV4ForRecharge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"},{\"internalType\":\"contract IProviders\",\"name\":\"_providers\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rechargeTypes\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"billsTypes\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"matchResourceToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"matchTokenToResource\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"enum IFundWallet.Purpose\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"contract IProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rechargeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rechargeTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resourceDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"setBillsTypedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"setRechargeTypedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bills\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"spend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferWalletOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bills\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.Payload\",\"name\":\"payload\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"FundWallet contract\",\"kind\":\"dev\",\"methods\":{\"addPauser(address)\":{\"details\":\"add a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"balanceOf(address,bytes32)\":{\"details\":\"return balance of account\",\"params\":{\"account\":\"user account\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"balance of account account\"}},\"billsHash(address,uint64,bytes32,bytes,uint256)\":{\"details\":\"return hash for bills\",\"params\":{\"account\":\"user account\",\"bills\":\"user bills\",\"expiration\":\"bills expiration\",\"nonce\":\"nonce\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"bills hash\"}},\"decodeBills(bytes)\":{\"details\":\"decode bill bytes to user bill\",\"params\":{\"data\":\"bill bytes\"},\"returns\":{\"_0\":\"user bills\"}},\"encodeBills((uint256,(uint8,uint256)[])[])\":{\"details\":\"encode bill to bytes\",\"params\":{\"bills\":\"user bills\"},\"returns\":{\"_0\":\"bills bytes\"}},\"hashTypedDataV4ForBills(address,uint64,bytes32,bytes,uint256)\":{\"details\":\"return hash typed v4 for sign\",\"params\":{\"account\":\"user account\",\"bills\":\"user bills\",\"nonce\":\"nonce\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"bills hash typed v4\"}},\"hashTypedDataV4ForRecharge(address,uint64,bytes32,uint256)\":{\"details\":\"return recharge hash typed v4\",\"params\":{\"account\":\"user account\",\"amount\":\"token amount\",\"nonce\":\"nonce\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"recharge hash typed v4\"}},\"initialize(address,address,address,address,address,string,string,string,string)\":{\"details\":\"proxy initialize function\",\"params\":{\"_providers\":\"providers contract address\",\"_token\":\"token address\",\"adaptor\":\"resource adaptor contract address\",\"billsTypes\":\"bills types\",\"name\":\"EIP712 domain name\",\"owner\":\"contract owner\",\"pauser\":\"contract pauser\",\"rechargeTypes\":\"recharge types\",\"version\":\"EIP712 domain version\"}},\"isPauser(address)\":{\"details\":\"whether the account is the contract pauser\",\"params\":{\"account\":\"address\"},\"returns\":{\"_0\":\"whether account is a pauser\"}},\"matchResourceToToken(uint256)\":{\"details\":\"match value to token decimals\",\"params\":{\"value\":\"resource value\"},\"returns\":{\"_0\":\"token value\"}},\"matchTokenToResource(uint256)\":{\"details\":\"match token amount to resource decimals\",\"params\":{\"value\":\"token amount with resource decimals\"},\"returns\":{\"_0\":\"resource value\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(address,bytes32)\":{\"details\":\"return owner of account\",\"params\":{\"account\":\"user account\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"owner wallet owner for account\"}},\"ownerWithdrawERC20(address,address,uint256)\":{\"details\":\"withdraw token\",\"params\":{\"to\":\"receiver address\",\"token\":\"token address\",\"value\":\"token value\"}},\"ownerWithdrawNative(address,uint256)\":{\"details\":\"withdraw ETH\",\"params\":{\"to\":\"receiver address\",\"value\":\"token value\"}},\"pause()\":{\"details\":\"pause the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"recharge(address,uint64,bytes32,uint256,bytes)\":{\"details\":\"recharge for account\",\"params\":{\"account\":\"user account\",\"amount\":\"token amount\",\"nonce\":\"nonce\",\"provider\":\"provider address\",\"signature\":\"provider signature\"}},\"rechargeHash(address,uint64,bytes32,uint256)\":{\"details\":\"return recharge typed hash\",\"params\":{\"account\":\"user account\",\"amount\":\"token amount\",\"nonce\":\"nonce\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"recharge typed hash\"}},\"removePauser(address)\":{\"details\":\"remove a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renouncePauser()\":{\"details\":\"remove a pauser for the contract\"},\"resourceDecimals()\":{\"details\":\"return resource decimals\",\"returns\":{\"_0\":\"resource decimals\"}},\"setBillsTypedHash(string)\":{\"details\":\"update bills typed hash\",\"params\":{\"types\":\"bills types\"}},\"setRechargeTypedHash(string)\":{\"details\":\"update recharge typed hash\",\"params\":{\"types\":\"recharge types\"}},\"setToken(address)\":{\"details\":\"update token\",\"params\":{\"_token\":\"token address\"}},\"spend(address,uint64,bytes32,bytes,uint256,bytes)\":{\"details\":\"spend bills for account\",\"params\":{\"account\":\"user account\",\"bills\":\"bills bytes\",\"expiration\":\"tx expiration\",\"fee\":\"bills fee\",\"nonce\":\"nonce\",\"provider\":\"provider address\",\"signature\":\"provider signature\"}},\"tokenDecimals()\":{\"details\":\"return token decimals\",\"returns\":{\"_0\":\"token decimals\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"transferWalletOwner(address,bytes32,address)\":{\"details\":\"transfer wallet owner for account\",\"params\":{\"account\":\"user account\",\"newOwner\":\"new wallet owner for account\",\"provider\":\"provider address\"}},\"unpause()\":{\"details\":\"unpause the contract\"},\"withdraw((address,uint64,bytes32,bytes,uint256),address,uint256,bytes)\":{\"details\":\"withdraw token for account\",\"params\":{\"amount\":\"token amount\",\"payload\":\"bill payload\",\"signature\":\"provider signature\",\"to\":\"token receiver\"},\"returns\":{\"fee\":\"bill fee\"}}},\"stateVariables\":{\"nonces\":{\"details\":\"provider nonces for account\"},\"rechargeTypedHash\":{\"details\":\"keccak256(\\\"Recharge(address provider,uint64 nonce,bytes32 account,uint256 amount)\\\")\"},\"wallets\":{\"details\":\"account wallet\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wallets/FundWallet.sol\":\"FundWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev Make the contract owner can withdraw token and eth\\nabstract contract OwnerWithdrawable is OwnableUpgradeable {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// @dev emit when token is withdrawn\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\t/// @dev emit when ETH is withdrawn\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\t/// @dev withdraw token\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawERC20(\\n\\t\\tIERC20Upgradeable token,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\t/// @dev withdraw ETH\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'Payment: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n}\\n\",\"keccak256\":\"0x72fea5efb40ec63d685563e8bf1946794c47a8f96c161b437e85c34d5e508fa5\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev make contract pausable\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\t/// @dev all pausers\\n\\tmapping(address => bool) public pausers;\\n\\n\\t/// @dev emit when pauser is added\\n\\t/// @param account pauser address\\n\\tevent PauserAdded(address account);\\n\\n\\t/// @dev emit when pauser is removed\\n\\t/// @param account pauser address\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: caller is not the pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev pause the contract\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/// @dev unpause the contract\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/// @dev whether the account is the contract pauser\\n\\t/// @param account address\\n\\t/// @return whether account is a pauser\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\t/// @dev add a pauser for the contract\\n\\t/// @param account address\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\t/// @param account address\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: account is not pauser');\\n\\t\\tdelete pausers[account];\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0xf3e014f7643fa5d6b1106f7378bc0b5303de164aecb40f653631648b6606b8a0\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBilling.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\nimport '../resources/interfaces/IResourceAdaptor.sol';\\nimport './IProvidersWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev Billing interface\\ninterface IBilling is IProvidersWrapper {\\n\\tstruct BillEntry {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct Bill {\\n\\t\\tuint256 indexBlock;\\n\\t\\tBillEntry[] entries;\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tbytes bills;\\n\\t\\tuint256 expiration;\\n\\t}\\n\\n\\t/// @dev emit when BillTypedHash updated\\n\\t/// @param hash BillTypedHash\\n\\tevent BillsTypedHashUpdated(bytes32 hash);\\n\\n\\t/// @dev emit when resource adaptor updated\\n\\t/// @param adaptor resource adaptor address\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\t/// @dev emit when bills finalized\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param bills bills data\\n\\t/// @param amount fee\\n\\tevent Billing(address provider, uint64 nonce, bytes32 account, bytes bills, uint256 amount);\\n\\n\\t/// @dev get bills types hash\\n\\t/// @return type hash for bills\\n\\tfunction billsTypedHash() external view returns (bytes32);\\n\\n\\t/// @dev get the resource adaptor\\n\\t/// @return resource adaptor address\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n}\\n\",\"keccak256\":\"0x50adb77a525ef258f8bca210b6f5636129425a79daec110145ef193384b19a8d\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IFundWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBilling.sol';\\n\\n/// @author Alexandas\\n/// @dev FundWallet interface\\ninterface IFundWallet is IBilling {\\n\\tenum Purpose {\\n\\t\\tNull,\\n\\t\\tRecharge,\\n\\t\\tSpend,\\n\\t\\tWithdraw\\n\\t}\\n\\n\\tstruct Wallet {\\n\\t\\taddress owner;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @dev emit when recharge type hash updated\\n\\t/// @param hash recharge type hash\\n\\tevent RechargeTypedHashUpdated(bytes32 hash);\\n\\n\\t/// @dev emit when nonce updated\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param nonce nonce\\n\\t/// @param purpose nonce used for\\n\\tevent NonceUpdated(address provider, bytes32 account, uint64 nonce, Purpose purpose);\\n\\n\\t/// @dev emit when wallet owner changed\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param newOwner new wallet owner for `account`\\n\\tevent WalletOwnerTransferred(address provider, bytes32 account, address newOwner);\\n\\n\\t/// @dev emit when account recharged\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\tevent Recharged(address provider, uint64 nonce, bytes32 account, uint256 amount);\\n\\n\\t/// @dev emit when user withdrawn\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\tevent Withdrawn(address provider, uint64 nonce, bytes32 account, address to, uint256 amount);\\n\\n\\t/// @dev return recharge typed hash\\n\\tfunction rechargeTypedHash() external view returns (bytes32);\\n\\n\\t/// @dev return owner of account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return owner wallet owner for account\\n\\tfunction ownerOf(address provider, bytes32 account) external view returns (address);\\n\\n\\t/// @dev transfer wallet owner for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param newOwner new wallet owner for account\\n\\tfunction transferWalletOwner(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress newOwner\\n\\t) external;\\n\\n\\t/// @dev recharge for account\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\t/// @param signature provider signature\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external;\\n\\n\\t/// @dev withdraw token for account\\n\\t/// @param payload bill payload\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\t/// @param signature provider signature\\n\\t/// @return fee bill fee\\n\\tfunction withdraw(\\n\\t\\tPayload memory payload,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n\\t/// @dev spend bill for account\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param bills bills bytes\\n\\t/// @param expiration tx expiration\\n\\t/// @param signature provider signature\\n\\t/// @param fee bills fee\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 expiration,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n}\\n\",\"keccak256\":\"0xe816fcdb9aa9da53fd84dded23b6e542e7ded9a350a58b3ac0ddc2333481b34a\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev providers interface\\ninterface IProviders {\\n\\t/// @dev emit when provider is added\\n\\t/// @param provider provider address\\n\\tevent AddProvider(address provider);\\n\\n\\t/// @dev emit when provider removed\\n\\t/// @param provider provider address\\n\\tevent RemoveProvider(address provider);\\n\\n\\t/// @dev return whether address is a provider\\n\\t/// @param provider address\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\t/// @dev return whether a valid signature\\n\\t/// @param provider address\\n\\t/// @param hash message hash\\n\\t/// @param signature provider signature for message hash\\n\\t/// @return is valid signature\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0x41438f3e610374e6a6ac3653b14c8455cf7c3c9678b5e09cdf427d0743bdf687\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IProviders.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper interface\\ninterface IProvidersWrapper {\\n\\t/// @dev emit when providers contract updated\\n\\t/// @param providers providers contract\\n\\tevent ProvidersUpdated(IProviders providers);\\n\\n\\t/// @dev return providers contract address\\n\\tfunction providers() external view returns (IProviders);\\n}\\n\",\"keccak256\":\"0xd8f8806f95355c07323f77cf322865ca78fc7311fa1dab62c7ddb015fb34d44f\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev resource data library\\nlibrary ResourceData {\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd1ce9795c92610cd6d718894a8badc6f38aa4accdbcf716fcfe3422a945ff35b\",\"license\":\"UNLICENSE\"},\"contracts/payment/ResourcePayTokenWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev token wrapper contract\\nabstract contract ResourcePayTokenWrapper is Initializable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t/// @dev token address\\n\\tIERC20Upgradeable public token;\\n\\n\\t/// @dev emit when token updated\\n\\t/// @param token token address\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\t/// @dev initialize token\\n\\t/// @param _token token address\\n\\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction _setToken(IERC20Upgradeable _token) internal {\\n\\t\\trequire(address(_token) != address(0), 'ResourcePayTokenWrapper: zero address');\\n\\t\\ttoken = _token;\\n\\t\\temit TokenUpdated(token);\\n\\t}\\n\\n\\t/// @dev match token amount to resource decimals\\n\\t/// @param value token amount with resource decimals\\n\\t/// @return resource value\\n\\tfunction matchTokenToResource(uint256 value) public view returns (uint256) {\\n\\t\\tuint256 _tokenDecimals = tokenDecimals();\\n\\t\\tuint256 _resourceDecimals = resourceDecimals();\\n\\t\\tif (_tokenDecimals <= _resourceDecimals) {\\n\\t\\t\\treturn value.mul(10**(_resourceDecimals.sub(_tokenDecimals)));\\n\\t\\t}\\n\\t\\treturn value.div(10**(_tokenDecimals.sub(_resourceDecimals)));\\n\\t}\\n\\n\\t/// @dev match value to token decimals\\n\\t/// @param value resource value\\n\\t/// @return token value\\n\\tfunction matchResourceToToken(uint256 value) public view returns (uint256) {\\n\\t\\tuint256 _tokenDecimals = tokenDecimals();\\n\\t\\tuint256 _resourceDecimals = resourceDecimals();\\n\\t\\tif (_tokenDecimals <= _resourceDecimals) {\\n\\t\\t\\treturn value.div(10**(_resourceDecimals.sub(_tokenDecimals)));\\n\\t\\t}\\n\\t\\treturn value.mul(10**(_tokenDecimals.sub(_resourceDecimals)));\\n\\t}\\n\\n\\t/// @dev return resource decimals\\n\\t/// @return resource decimals\\n\\tfunction resourceDecimals() public view returns (uint256) {\\n\\t\\treturn 18;\\n\\t}\\n\\n\\t/// @dev return token decimals\\n\\t/// @return token decimals\\n\\tfunction tokenDecimals() public view returns (uint256) {\\n\\t\\t// keccak256(bytes4('decimals()'))\\n\\t\\t(bool success, bytes memory data) = address(token).staticcall(hex'313ce567');\\n\\t\\trequire(success, 'ResourcePayTokenWrapper: invalid token');\\n\\t\\treturn abi.decode(data, (uint256));\\n\\t}\\n}\\n\",\"keccak256\":\"0x5e32fd1668dea621e75c3cda6bc8c120dcc526fffe68ed2b2b2151ce7ac61a4a\",\"license\":\"UNLICENSE\"},\"contracts/providers/ProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '../interfaces/IProvidersWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper contract\\nabstract contract ProvidersWrapper is IProvidersWrapper, Initializable {\\n\\t/// @dev providers contract address\\n\\tIProviders public override providers;\\n\\n\\t/// @dev initialize providers contract\\n\\t/// @param _providers providers contract address\\n\\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\\n\\t\\t_setProviders(_providers);\\n\\t}\\n\\n\\tfunction _setProviders(IProviders _providers) internal {\\n\\t\\tproviders = _providers;\\n\\t\\temit ProvidersUpdated(_providers);\\n\\t}\\n}\\n\",\"keccak256\":\"0xcb18f1276cfa2c7d9eaf9764fabacdc39df2823de77342acfec0aa8732062863\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adpator interface\\ninterface IResourceAdaptor {\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @dev emit when price updated\\n\\t/// @param adaptors price adaptors\\n\\tevent PriceAdaptorsUpdated(PriceAdaptor[] adaptors);\\n\\n\\t/// @dev get price for resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param _indexBlock block number\\n\\t/// @return price for resource at a specific block\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\t/// @dev get value for `amount` resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @param _indexBlock block number\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @param _indexBlock block numer\\n\\t/// @return resource amount\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value in resource decimals(18)\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe7ab80ce01c39a5e059cbfb689ace99d515f400d69236f6086893cd3d0cb0b94\",\"license\":\"UNLICENSE\"},\"contracts/wallets/Billing.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol';\\n\\nimport '../providers/ProvidersWrapper.sol';\\nimport '../interfaces/IBilling.sol';\\nimport '../resources/interfaces/IResourceAdaptor.sol';\\nimport '../payment/ResourcePayTokenWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev Billing contract\\nabstract contract Billing is IBilling, ResourcePayTokenWrapper, ProvidersWrapper, EIP712Upgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tstruct SpendPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tbytes bill;\\n\\t\\tbytes signature;\\n\\t}\\n\\n\\t/// @dev keccak256(\\\"Bills(address provider,uint64 nonce,bytes32 account,bytes bills,uint256 expiration)\\\")\\n\\tbytes32 public override billsTypedHash;\\n\\n\\t/// @dev resource adaptor contract address\\n\\tIResourceAdaptor public override adaptor;\\n\\n\\t/// @dev initialize bills type hash\\n\\t/// @param types bills types\\n\\tfunction __Init_Bills_Typed_Hash(string memory types) internal onlyInitializing {\\n\\t\\t_setBillsTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\t/// @dev initialize resource adaptor\\n\\t/// @param _adaptor resource adaptor contract address\\n\\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\\n\\t\\t_setResourceAdaptor(_adaptor);\\n\\t}\\n\\n\\t/// @dev return hash for bills\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param bills user bills\\n\\t/// @param expiration bills expiration\\n\\t/// @return bills hash\\n\\tfunction billsHash(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 expiration\\n\\t) public view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(billsTypedHash, provider, nonce, account, keccak256(bills), expiration));\\n\\t}\\n\\n\\t/// @dev return hash typed v4 for sign\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param bills user bills\\n\\t/// @return bills hash typed v4\\n\\tfunction hashTypedDataV4ForBills(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 expiration\\n\\t) public view returns (bytes32) {\\n\\t\\treturn _hashTypedDataV4(billsHash(provider, nonce, account, bills, expiration));\\n\\t}\\n\\n\\t/// @dev encode bill to bytes\\n\\t/// @param bills user bills\\n\\t/// @return bills bytes\\n\\tfunction encodeBills(Bill[] memory bills) external pure returns (bytes memory) {\\n\\t\\treturn abi.encode(bills);\\n\\t}\\n\\n\\t/// @dev decode bill bytes to user bill\\n\\t/// @param data bill bytes\\n\\t/// @return user bills\\n\\tfunction decodeBills(bytes memory data) external pure returns (Bill[] memory) {\\n\\t\\treturn abi.decode(data, (Bill[]));\\n\\t}\\n\\n\\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\\n\\t\\trequire(address(_adaptor) != address(0), 'Billing: zero address');\\n\\t\\tadaptor = _adaptor;\\n\\t\\temit ResourceAdaptorUpdated(_adaptor);\\n\\t}\\n\\n\\tfunction _validateBills(bytes memory data) internal view returns (uint256 value) {\\n\\t\\tBill[] memory bills = abi.decode(data, (Bill[]));\\n\\t\\trequire(bills.length > 0, 'Billing: empty bill payloads');\\n\\t\\tfor (uint256 i = 0; i < bills.length; i++) {\\n\\t\\t\\tBill memory bill = bills[i];\\n\\t\\t\\trequire(bill.entries.length > 0, 'Billing: empty bill entry');\\n\\t\\t\\tfor (uint256 j = 0; j < bill.entries.length; j++) {\\n\\t\\t\\t\\tBillEntry memory entry = bill.entries[i];\\n\\t\\t\\t\\tuint256 billing = adaptor.getValueAt(entry.resourceType, entry.amount, bill.indexBlock);\\n\\t\\t\\t\\tvalue = value.add(billing);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _spend(\\n\\t\\tPayload memory payload,\\n\\t\\tbytes memory signature\\n\\t) internal returns (uint256 amount) {\\n\\t\\trequire(payload.expiration > block.timestamp, 'Billing: tx expired');\\n\\t\\trequire(providers.isProvider(msg.sender), 'Billing: caller is not a provider');\\n\\t\\tbytes32 hash = hashTypedDataV4ForBills(payload.provider, payload.nonce, payload.account, payload.bills, payload.expiration);\\n\\t\\trequire(providers.isValidSignature(payload.provider, hash, signature), 'Billing: invalid signature');\\n\\t\\tif (payload.bills.length > 0) {\\n\\t\\t\\tuint256 balance = balanceOf(payload.provider, payload.account);\\n\\t\\t\\tamount = matchResourceToToken(_validateBills(payload.bills));\\n\\t\\t\\trequire(balance >= amount, 'Billing: insufficient balance');\\n\\t\\t}\\n\\n\\t\\temit Billing(payload.provider, payload.nonce, payload.account, payload.bills, amount);\\n\\t}\\n\\n\\tfunction _setBillsTypedHash(bytes32 hash) internal {\\n\\t\\tbillsTypedHash = hash;\\n\\t\\temit BillsTypedHashUpdated(hash);\\n\\t}\\n\\n\\tfunction balanceOf(address provider, bytes32 account) public view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xdd168ec524172d33c2f98f5396e940fcf391f469e51424a0ba797131f408a30c\",\"license\":\"UNLICENSE\"},\"contracts/wallets/FundWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport './Billing.sol';\\nimport '../interfaces/IFundWallet.sol';\\nimport '../access/OwnerWithdrawable.sol';\\nimport '../access/Pauser.sol';\\n\\n/// @author Alexandas\\n/// @dev FundWallet contract\\ncontract FundWallet is IFundWallet, Billing, OwnerWithdrawable, Pauser, ReentrancyGuardUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// @dev keccak256(\\\"Recharge(address provider,uint64 nonce,bytes32 account,uint256 amount)\\\")\\n\\tbytes32 public override rechargeTypedHash;\\n\\n\\t/// @dev provider nonces for account\\n\\tmapping(address => mapping(bytes32 => mapping(uint64 => Purpose))) public nonces;\\n\\n\\t/// @dev account wallet\\n\\tmapping(address => mapping(bytes32 => Wallet)) internal wallets;\\n\\n\\tmodifier onlyWalletOwner(address provider, bytes32 account) {\\n\\t\\trequire(wallets[provider][account].owner == msg.sender, 'FundWallet: caller is not wallet owner');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier nonNonce(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint64 nonce\\n\\t) {\\n\\t\\trequire(nonces[provider][account][nonce] == Purpose.Null, 'FundWallet: invalid nonce');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\t/// @param owner contract owner\\n\\t/// @param pauser contract pauser\\n\\t/// @param adaptor resource adaptor contract address\\n\\t/// @param _providers providers contract address\\n\\t/// @param _token token address\\n\\t/// @param name EIP712 domain name\\n\\t/// @param version EIP712 domain version\\n\\t/// @param rechargeTypes recharge types\\n\\t/// @param billsTypes bills types\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIResourceAdaptor adaptor,\\n\\t\\tIProviders _providers,\\n\\t\\tIERC20Upgradeable _token,\\n\\t\\tstring memory name,\\n\\t\\tstring memory version,\\n\\t\\tstring memory rechargeTypes,\\n\\t\\tstring memory billsTypes\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Providers(_providers);\\n\\t\\t__Init_Resource_Adaptor(adaptor);\\n\\t\\t__Init_Token(_token);\\n\\t\\t__EIP712_init(name, version);\\n\\t\\t__Init_Recharge_Typed_Hash(rechargeTypes);\\n\\t\\t__Init_Bills_Typed_Hash(billsTypes);\\n\\t}\\n\\n\\t/// @dev initialize recharge typed hash\\n\\t/// @param types recharge types\\n\\tfunction __Init_Recharge_Typed_Hash(string memory types) internal onlyInitializing {\\n\\t\\t_setRechargeTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\t/// @dev recharge for account\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\t/// @param signature provider signature\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) whenNotPaused nonReentrant {\\n\\t\\tif (ownerOf(provider, account) != address(0)) {\\n\\t\\t\\trequire(ownerOf(provider, account) == msg.sender, 'FundWallet: caller is not the wallet owner');\\n\\t\\t} else {\\n\\t\\t\\t_setWalletOwner(provider, account, msg.sender);\\n\\t\\t}\\n\\t\\t_recharge(provider, nonce, account, amount, signature);\\n\\t}\\n\\n\\tfunction _recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) internal {\\n\\t\\trequire(amount > 0, 'FundWallet: zero amount');\\n\\t\\tbytes32 hash = hashTypedDataV4ForRecharge(provider, nonce, account, amount);\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\\n\\t\\twallets[provider][account].amount = wallets[provider][account].amount.add(amount);\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Recharge);\\n\\n\\t\\temit Recharged(provider, nonce, account, amount);\\n\\t}\\n\\n\\t/// @dev spend bills for account\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param bills bills bytes\\n\\t/// @param expiration tx expiration\\n\\t/// @param signature provider signature\\n\\t/// @param fee bills fee\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bills,\\n\\t\\tuint256 expiration,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) whenNotPaused nonReentrant returns (uint256 fee) {\\n\\t\\tfee = _spend(Payload(provider, nonce, account, bills, expiration), signature);\\n\\t\\twallets[provider][account].amount = wallets[provider][account].amount.sub(fee);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Spend);\\n\\t}\\n\\n\\t/// @dev withdraw token for account\\n\\t/// @param payload bill payload\\n\\t/// @param to token receiver\\n\\t/// @param amount token amount\\n\\t/// @param signature provider signature\\n\\t/// @return fee bill fee\\n\\tfunction withdraw(\\n\\t\\tPayload memory payload,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(payload.provider, payload.account, payload.nonce) onlyWalletOwner(payload.provider, payload.account) whenNotPaused nonReentrant returns (uint256 fee) {\\n\\t\\tfee = _spend(payload, signature);\\n\\t\\taddress provider = payload.provider;\\n\\t\\tbytes32 account = payload.account;\\n\\t\\tuint64 nonce = payload.nonce;\\n\\t\\tuint256 left = wallets[provider][account].amount.sub(fee);\\n\\t\\taddress receiver = to;\\n\\t\\tuint256 value = amount;\\n\\t\\trequire(left >= value, 'FundWallet: insufficient balance');\\n\\t\\twallets[provider][account].amount = left.sub(value);\\n\\t\\ttoken.safeTransfer(receiver, value);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Withdraw);\\n\\n\\t\\temit Withdrawn(provider, nonce, account, receiver, value);\\n\\t}\\n\\n\\t/// @dev transfer wallet owner for account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param newOwner new wallet owner for account\\n\\tfunction transferWalletOwner(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress newOwner\\n\\t) external override whenNotPaused onlyWalletOwner(provider, account) {\\n\\t\\trequire(ownerOf(provider, account) != address(0), 'FundWallet: nonexistent wallet owner');\\n\\t\\trequire(newOwner != address(0), 'FundWallet: zero address');\\n\\t\\t_setWalletOwner(provider, account, newOwner);\\n\\t}\\n\\n\\tfunction _setWalletOwner(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress owner\\n\\t) internal {\\n\\t\\twallets[provider][account].owner = owner;\\n\\t\\temit WalletOwnerTransferred(provider, account, owner);\\n\\t}\\n\\n\\t/// @dev return owner of account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return owner wallet owner for account\\n\\tfunction ownerOf(address provider, bytes32 account) public view override returns (address) {\\n\\t\\treturn wallets[provider][account].owner;\\n\\t}\\n\\n\\t/// @dev return balance of account\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @return balance of account account\\n\\tfunction balanceOf(address provider, bytes32 account) public view override returns (uint256) {\\n\\t\\treturn wallets[provider][account].amount;\\n\\t}\\n\\n\\t/// @dev update recharge typed hash\\n\\t/// @param types recharge types\\n\\tfunction setRechargeTypedHash(string memory types) external onlyOwner {\\n\\t\\t_setRechargeTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\t/// @dev update bills typed hash\\n\\t/// @param types bills types\\n\\tfunction setBillsTypedHash(string memory types) external onlyOwner {\\n\\t\\t_setBillsTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\t/// @dev update token\\n\\t/// @param _token token address\\n\\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\t/// @dev return recharge typed hash\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\t/// @return recharge typed hash\\n\\tfunction rechargeHash(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(rechargeTypedHash, provider, nonce, account, amount));\\n\\t}\\n\\n\\t/// @dev return recharge hash typed v4\\n\\t/// @param provider provider address\\n\\t/// @param nonce nonce\\n\\t/// @param account user account\\n\\t/// @param amount token amount\\n\\t/// @return recharge hash typed v4\\n\\tfunction hashTypedDataV4ForRecharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn _hashTypedDataV4(rechargeHash(provider, nonce, account, amount));\\n\\t}\\n\\n\\tfunction _setRechargeTypedHash(bytes32 hash) internal {\\n\\t\\trechargeTypedHash = hash;\\n\\t\\temit RechargeTypedHashUpdated(hash);\\n\\t}\\n\\n\\tfunction _updateNonce(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tuint64 nonce,\\n\\t\\tPurpose purpose\\n\\t) internal {\\n\\t\\tnonces[provider][account][nonce] = purpose;\\n\\t\\temit NonceUpdated(provider, account, nonce, purpose);\\n\\t}\\n}\\n\",\"keccak256\":\"0x922414507c862e6c0e4d73c0277fff77b8b7906b682f27d33c4c4f4a8e7a1805\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b620000396200009e565b620000615760405162461bcd60e51b81526004016200005890620000cb565b60405180910390fd5b600054610100900460ff1615801562000084576000805461ffff19166101011790555b801562000097576000805461ff00191690555b5062000124565b6000620000b630620000bc60201b620011a71760201c565b15905090565b6001600160a01b03163b151590565b602080825281016200011e81602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b613c9c80620001346000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063715018a61161013b57806393563a95116100b8578063f12973d31161007c578063f12973d314610523578063f2fde38b14610536578063f674529614610549578063f8401fe61461055c578063fc0c546a1461056f57600080fd5b806393563a95146104c0578063c2cd9b2b146104d3578063da66bd67146104f3578063ddc5517e14610506578063e7356a071461051957600080fd5b8063822a3f74116100ff578063822a3f741461046557806382dc1ec4146104785780638456cb591461048b5780638da5cb5b146104935780638f1a1438146104ad57600080fd5b8063715018a6146103f4578063746cb256146103fc5780637acc238b1461040f57806380124a431461042257806380f51c121461044257600080fd5b80634bf1fcda116101c95780635fce61d51161018d5780635fce61d5146103b657806368b86954146103bf578063699256f4146103c65780636b2c0f55146103d95780636ef8d66d146103ec57600080fd5b80634bf1fcda146103095780634d30b6be1461034b5780635ab9d73b146103855780635c975abb146103985780635e81e331146103a357600080fd5b80633b97e856116102105780633b97e856146102b35780633f4ba83a146102bb5780633fe1d581146102c357806346e9398b146102d657806346fbf68e146102e957600080fd5b8063144fa6d71461024257806324496dbb146102575780632c7959241461026a57806335a609bc14610293575b600080fd5b61025561025036600461207b565b610588565b005b6102556102653660046120c1565b6105c7565b61027d610278366004612224565b61069e565b60405161028a91906122ea565b60405180910390f35b6102a66102a13660046122f8565b610817565b60405161028a9190612495565b61027d610833565b6102556108df565b61027d6102d13660046124a6565b61090e565b61027d6102e436600461250a565b61092f565b6102fc6102f736600461259c565b610977565b60405161028a91906125c5565b61033e6103173660046125d3565b61010260209081526000938452604080852082529284528284209052825290205460ff1681565b60405161028a9190612647565b61027d610359366004612655565b6001600160a01b0391909116600090815261010360209081526040808320938352929052206001015490565b610255610393366004612692565b610995565b609c5460ff166102fc565b61027d6103b13660046127b7565b610ac3565b61027d60365481565b601261027d565b6102556103d4366004612655565b610cf7565b6102556103e736600461259c565b610da5565b610255610dd8565b610255610de1565b61027d61040a36600461250a565b610e15565b61025561041d3660046122f8565b610e31565b610435610430366004612a31565b610e6b565b60405161028a9190612ac9565b6102fc61045036600461259c565b60ce6020526000908152604090205460ff1681565b6102556104733660046122f8565b610e94565b61025561048636600461259c565b610ece565b610255610f01565b606a546001600160a01b03165b60405161028a9190612ae3565b61027d6104bb3660046124a6565b610f2e565b6102556104ce366004612af1565b610f6c565b6037546104e6906001600160a01b031681565b60405161028a9190612b4b565b6104a0610501366004612655565b610fdd565b610255610514366004612b59565b611006565b61027d6101015481565b61027d610531366004612c88565b6110ca565b61025561054436600461259c565b61111e565b61027d610557366004612c88565b611177565b6001546104e6906001600160a01b031681565b6000546104e6906201000090046001600160a01b031681565b606a546001600160a01b031633146105bb5760405162461bcd60e51b81526004016105b290612cde565b60405180910390fd5b6105c4816111b6565b50565b609c5460ff16156105ea5760405162461bcd60e51b81526004016105b290612d15565b6001600160a01b03808416600090815261010360209081526040808320868452909152902054849184911633146106335760405162461bcd60e51b81526004016105b290612d6b565b600061063f8686610fdd565b6001600160a01b031614156106665760405162461bcd60e51b81526004016105b290612dbc565b6001600160a01b03831661068c5760405162461bcd60e51b81526004016105b290612e00565b610697858585611245565b5050505050565b6000868587836001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b038616845290915290205460ff1660038111156106ee576106ee612332565b1461070b5760405162461bcd60e51b81526004016105b290612e44565b609c5460ff161561072e5760405162461bcd60e51b81526004016105b290612d15565b600260cf5414156107515760405162461bcd60e51b81526004016105b290612e88565b600260cf8190555061079b6040518060a001604052808c6001600160a01b031681526020018b6001600160401b031681526020018a815260200189815260200188815250866112b4565b6001600160a01b038b166000908152610103602090815260408083208c84529091529020600101549094506107d09085611504565b6001600160a01b038b166000908152610103602090815260408083208c84529091529020600101556108058a898b6002611517565b5050600160cf55509695505050505050565b60608180602001905181019061082d919061304c565b92915050565b60008060008060029054906101000a90046001600160a01b03166001600160a01b031660405161086290613086565b600060405180830381855afa9150503d806000811461089d576040519150601f19603f3d011682016040523d82523d6000602084013e6108a2565b606091505b5091509150816108c45760405162461bcd60e51b81526004016105b2906130de565b808060200190518101906108d891906130ee565b9250505090565b6108e833610977565b6109045760405162461bcd60e51b81526004016105b290613141565b61090c6115b1565b565b600061092461091f86868686610f2e565b611617565b90505b949350505050565b600060365486868686805190602001208660405160200161095596959493929190613160565b6040516020818303038152906040528051906020012090505b95945050505050565b6001600160a01b0316600090815260ce602052604090205460ff1690565b84838560006001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b038616845290915290205460ff1660038111156109e4576109e4612332565b14610a015760405162461bcd60e51b81526004016105b290612e44565b609c5460ff1615610a245760405162461bcd60e51b81526004016105b290612d15565b600260cf541415610a475760405162461bcd60e51b81526004016105b290612e88565b600260cf556000610a588988610fdd565b6001600160a01b031614610a9c5733610a718988610fdd565b6001600160a01b031614610a975760405162461bcd60e51b81526004016105b2906131f6565b610aa7565b610aa7888733611245565b610ab4888888888861162a565b5050600160cf55505050505050565b8351604085015160208601516000929190836001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610b1f57610b1f612332565b14610b3c5760405162461bcd60e51b81526004016105b290612e44565b87516040808a01516001600160a01b0380841660009081526101036020908152848220848352905292909220549091163314610b8a5760405162461bcd60e51b81526004016105b290612d6b565b609c5460ff1615610bad5760405162461bcd60e51b81526004016105b290612d15565b600260cf541415610bd05760405162461bcd60e51b81526004016105b290612e88565b600260cf55610bdf8a886112b4565b8a516040808d01516020808f01516001600160a01b0385166000908152610103835284812084825290925292812060010154949a509293909290610c23908b611504565b90508c8c80831015610c475760405162461bcd60e51b81526004016105b290613238565b610c518382611504565b6001600160a01b038088166000908152610103602090815260408083208a84529091528120600101929092559054610c9291620100009091041683836117c1565b610c9f8686866003611517565b7f26b8aa9e5d4f71b867c84264e57eab543daba6bf03a6ac7c3be51697b5132f708685878585604051610cd6959493929190613248565b60405180910390a15050600160cf5550979c9b505050505050505050505050565b606a546001600160a01b03163314610d215760405162461bcd60e51b81526004016105b290612cde565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610d675760405162461bcd60e51b81526004016105b2906132cc565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610d989291906132dc565b60405180910390a1505050565b606a546001600160a01b03163314610dcf5760405162461bcd60e51b81526004016105b290612cde565b6105c48161181c565b61090c3361181c565b606a546001600160a01b03163314610e0b5760405162461bcd60e51b81526004016105b290612cde565b61090c6000611891565b6000610e2761091f878787878761092f565b9695505050505050565b606a546001600160a01b03163314610e5b5760405162461bcd60e51b81526004016105b290612cde565b6105c481805190602001206118e3565b606081604051602001610e7e9190612495565b6040516020818303038152906040529050919050565b606a546001600160a01b03163314610ebe5760405162461bcd60e51b81526004016105b290612cde565b6105c48180519060200120611919565b606a546001600160a01b03163314610ef85760405162461bcd60e51b81526004016105b290612cde565b6105c48161194e565b610f0a33610977565b610f265760405162461bcd60e51b81526004016105b290613141565b61090c6119c7565b60006101015485858585604051602001610f4c9594939291906132f7565b604051602081830303815290604052805190602001209050949350505050565b606a546001600160a01b03163314610f965760405162461bcd60e51b81526004016105b290612cde565b610faa6001600160a01b03841683836117c1565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610d989392919061332c565b6001600160a01b0391821660009081526101036020908152604080832093835292905220541690565b600054610100900460ff166110215760005460ff1615611025565b303b155b6110415760405162461bcd60e51b81526004016105b29061339f565b600054610100900460ff16158015611063576000805461ffff19166101011790555b61106c8a611891565b61107589611a1f565b61107e87611a46565b61108788611a76565b61109086611aa6565b61109a8585611acd565b6110a383611b02565b6110ac82611b29565b80156110be576000805461ff00191690555b50505050505050505050565b6000806110d5610833565b905060128082116110ff576109276110ed8284611504565b6110f890600a6134d3565b8590611b50565b61092761110c8383611504565b61111790600a6134d3565b8590611b5c565b606a546001600160a01b031633146111485760405162461bcd60e51b81526004016105b290612cde565b6001600160a01b03811661116e5760405162461bcd60e51b81526004016105b290613525565b6105c481611891565b600080611182610833565b9050601280821161119a5761092761110c8284611504565b6109276110ed8383611504565b6001600160a01b03163b151590565b6001600160a01b0381166111dc5760405162461bcd60e51b81526004016105b290613577565b6000805462010000600160b01b031916620100006001600160a01b03848116820292909217928390556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e309361123a9392900490911690612b4b565b60405180910390a150565b6001600160a01b038381166000908152610103602090815260408083208684529091529081902080546001600160a01b03191692841692909217909155517f4ddee4675a37f5c882a56b9be609ea55023c460cafb24ab74c1cb024abc84b3b90610d9890859085908590613587565b6000428360800151116112d95760405162461bcd60e51b81526004016105b2906135d9565b600154604051636b074a0760e01b81526001600160a01b0390911690636b074a0790611309903390600401612ae3565b60206040518083038186803b15801561132157600080fd5b505afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135991906135fc565b6113755760405162461bcd60e51b81526004016105b29061365b565b600061139884600001518560200151866040015187606001518860800151610e15565b60015485516040516311c5268f60e11b81529293506001600160a01b039091169163238a4d1e916113cf918590889060040161366b565b602060405180830381600087803b1580156113e957600080fd5b505af11580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142191906135fc565b61143d5760405162461bcd60e51b81526004016105b2906136cc565b606084015151156114ae5783516040808601516001600160a01b039092166000908152610103602090815282822093825292909252812060010154905061148a6105318660600151611b68565b9250828110156114ac5760405162461bcd60e51b81526004016105b290613710565b505b7f086575d4de5bb5f0addd08773b7097a00aaa37120293013f54da4433812adfa78460000151856020015186604001518760600151866040516114f5959493929190613720565b60405180910390a15092915050565b60006115108284613769565b9392505050565b6001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b03861684529091529020805482919060ff1916600183600381111561156957611569612332565b02179055507fc4f15e84da288f27234e3626e64c8035b984fd65cee49fcd86b4910de1d13e7c848484846040516115a39493929190613780565b60405180910390a150505050565b609c5460ff166115d35760405162461bcd60e51b81526004016105b2906137e0565b609c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161160d9190612ae3565b60405180910390a1565b600061082d611624611cf4565b83611d30565b6000821161164a5760405162461bcd60e51b81526004016105b290613824565b60006116588686868661090e565b6001546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e9061168d9089908590879060040161366b565b602060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df91906135fc565b6116fb5760405162461bcd60e51b81526004016105b290613868565b6001600160a01b03861660009081526101036020908152604080832087845290915290206001015461172d9084611d63565b6001600160a01b03808816600090815261010360209081526040808320898452909152812060010192909255905461176f916201000090910416333086611d6f565b61177c8685876001611517565b7f20615f51b8701e825dbc8fd5f5e6909964726a9082f971d65f494860fd3ae396868686866040516117b19493929190613878565b60405180910390a1505050505050565b6118178363a9059cbb60e01b84846040516024016117e09291906138ad565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d96565b505050565b61182581610977565b6118415760405162461bcd60e51b81526004016105b2906138ef565b6001600160a01b038116600090815260ce602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9061123a908390612ae3565b606a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101018190556040517f921d5c4a3c33eaff9e0f2fee28d7dd04f45183c3070cc30adfd5d90be51546999061123a9083906122ea565b60368190556040517fff0ac6417b45aca293f36f486c055ff8f1a6df297264ffe0a52b04395ad5f31c9061123a9083906122ea565b61195781610977565b156119745760405162461bcd60e51b81526004016105b29061393d565b6001600160a01b038116600090815260ce602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89061123a908390612ae3565b609c5460ff16156119ea5760405162461bcd60e51b81526004016105b290612d15565b609c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116003390565b600054610100900460ff16610ef85760405162461bcd60e51b81526004016105b290613995565b600054610100900460ff16611a6d5760405162461bcd60e51b81526004016105b290613995565b6105c481611e25565b600054610100900460ff16611a9d5760405162461bcd60e51b81526004016105b290613995565b6105c481611e70565b600054610100900460ff166105bb5760405162461bcd60e51b81526004016105b290613995565b600054610100900460ff16611af45760405162461bcd60e51b81526004016105b290613995565b611afe8282611ee1565b5050565b600054610100900460ff16610e5b5760405162461bcd60e51b81526004016105b290613995565b600054610100900460ff16610ebe5760405162461bcd60e51b81526004016105b290613995565b600061151082846139bb565b600061151082846139cf565b60008082806020019051810190611b7f919061304c565b90506000815111611ba25760405162461bcd60e51b81526004016105b290613a22565b60005b8151811015611ced576000828281518110611bc257611bc2613a32565b60200260200101519050600081602001515111611bf15760405162461bcd60e51b81526004016105b290613a7c565b60005b816020015151811015611cd857600082602001518481518110611c1957611c19613a32565b60209081029190910181015160375481519282015186516040516354bf93b960e11b81529395506000946001600160a01b039093169363a97f277293611c659390929091600401613a8c565b60206040518083038186803b158015611c7d57600080fd5b505afa158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb591906130ee565b9050611cc18782611d63565b965050508080611cd090613aa7565b915050611bf4565b50508080611ce590613aa7565b915050611ba5565b5050919050565b6000611d2b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611d2360025490565b600354611f22565b905090565b60008282604051602001611d45929190613ac8565b60405160208183030381529060405280519060200120905092915050565b60006115108284613af9565b611d90846323b872dd60e01b8585856040516024016117e093929190613b11565b50505050565b6000611deb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f5c9092919063ffffffff16565b8051909150156118175780806020019051810190611e0991906135fc565b6118175760405162461bcd60e51b81526004016105b290613b66565b600180546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c52849061123a908390612b4b565b6001600160a01b038116611e965760405162461bcd60e51b81526004016105b290613ba2565b603780546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c19061123a908390612b4b565b600054610100900460ff16611f085760405162461bcd60e51b81526004016105b290613995565b815160209283012081519190920120600291909155600355565b60008383834630604051602001611f3d959493929190613bb2565b6040516020818303038152906040528051906020012090509392505050565b60606109278484600085856001600160a01b0385163b611f8e5760405162461bcd60e51b81526004016105b290613c28565b600080866001600160a01b03168587604051611faa9190613c5a565b60006040518083038185875af1925050503d8060008114611fe7576040519150601f19603f3d011682016040523d82523d6000602084013e611fec565b606091505b5091509150611ffc828286612007565b979650505050505050565b60608315612016575081611510565b8251156120265782518084602001fd5b8160405162461bcd60e51b81526004016105b29190612ac9565b60006001600160a01b03821661082d565b600061082d82612040565b61206581612051565b81146105c457600080fd5b803561082d8161205c565b60006020828403121561209057612090600080fd5b60006109278484612070565b61206581612040565b803561082d8161209c565b80612065565b803561082d816120b0565b6000806000606084860312156120d9576120d9600080fd5b60006120e586866120a5565b93505060206120f6868287016120b6565b9250506040612107868287016120a5565b9150509250925092565b6001600160401b038116612065565b803561082d81612111565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156121665761216661212b565b6040525050565b600061217860405190565b90506121848282612141565b919050565b60006001600160401b038211156121a2576121a261212b565b601f19601f83011660200192915050565b82818337506000910152565b60006121d26121cd84612189565b61216d565b9050828152602081018484840111156121ed576121ed600080fd5b6121f88482856121b3565b509392505050565b600082601f83011261221457612214600080fd5b81356109278482602086016121bf565b60008060008060008060c0878903121561224057612240600080fd5b600061224c89896120a5565b965050602061225d89828a01612120565b955050604061226e89828a016120b6565b94505060608701356001600160401b0381111561228d5761228d600080fd5b61229989828a01612200565b93505060806122aa89828a016120b6565b92505060a08701356001600160401b038111156122c9576122c9600080fd5b6122d589828a01612200565b9150509295509295509295565b805b82525050565b6020810161082d82846122e2565b60006020828403121561230d5761230d600080fd5b81356001600160401b0381111561232657612326600080fd5b61092784828501612200565b634e487b7160e01b600052602160045260246000fd5b600581106105c4576105c4612332565b8061218481612348565b600061082d82612358565b6122e481612362565b80516040830190612387848261236d565b506020820151611d9060208501826122e2565b60006123a68383612376565b505060400190565b60006123b8825190565b80845260209384019383018060005b838110156123ec5781516123db888261239a565b9750602083019250506001016123c7565b509495945050505050565b8051600090604084019061240b85826122e2565b506020830151848203602086015261096e82826123ae565b600061151083836123f7565b6000612439825190565b808452602084019350836020820285016124538560200190565b8060005b8581101561248857848403895281516124708582612423565b94506020830160209a909a0199925050600101612457565b5091979650505050505050565b60208082528101611510818461242f565b600080600080608085870312156124bf576124bf600080fd5b60006124cb87876120a5565b94505060206124dc87828801612120565b93505060406124ed878288016120b6565b92505060606124fe878288016120b6565b91505092959194509250565b600080600080600060a0868803121561252557612525600080fd5b600061253188886120a5565b955050602061254288828901612120565b9450506040612553888289016120b6565b93505060608601356001600160401b0381111561257257612572600080fd5b61257e88828901612200565b925050608061258f888289016120b6565b9150509295509295909350565b6000602082840312156125b1576125b1600080fd5b600061092784846120a5565b8015156122e4565b6020810161082d82846125bd565b6000806000606084860312156125eb576125eb600080fd5b60006125f786866120a5565b9350506020612608868287016120b6565b925050604061210786828701612120565b600481106105c4576105c4612332565b8061218481612619565b600061082d82612629565b6122e481612633565b6020810161082d828461263e565b6000806040838503121561266b5761266b600080fd5b600061267785856120a5565b9250506020612688858286016120b6565b9150509250929050565b600080600080600060a086880312156126ad576126ad600080fd5b60006126b988886120a5565b95505060206126ca88828901612120565b94505060406126db888289016120b6565b93505060606126ec888289016120b6565b92505060808601356001600160401b0381111561270b5761270b600080fd5b61258f88828901612200565b600060a0828403121561272c5761272c600080fd5b61273660a061216d565b9050600061274484846120a5565b825250602061275584848301612120565b6020830152506040612769848285016120b6565b60408301525060608201356001600160401b0381111561278b5761278b600080fd5b61279784828501612200565b60608301525060806127ab848285016120b6565b60808301525092915050565b600080600080608085870312156127d0576127d0600080fd5b84356001600160401b038111156127e9576127e9600080fd5b6127f587828801612717565b9450506020612806878288016120a5565b9350506040612817878288016120b6565b92505060608501356001600160401b0381111561283657612836600080fd5b6124fe87828801612200565b60006001600160401b0382111561285b5761285b61212b565b5060209081020190565b600581106105c457600080fd5b803561082d81612865565b60006040828403121561289257612892600080fd5b61289c604061216d565b905060006128aa8484612872565b82525060206128bb848483016120b6565b60208301525092915050565b60006128d56121cd84612842565b838152905060208101604084028301858111156128f4576128f4600080fd5b835b8181101561291a5780612909888261287d565b8452506020909201916040016128f6565b5050509392505050565b600082601f83011261293857612938600080fd5b81356109278482602086016128c7565b60006040828403121561295d5761295d600080fd5b612967604061216d565b9050600061297584846120b6565b82525060208201356001600160401b0381111561299457612994600080fd5b6128bb84828501612924565b60006129ae6121cd84612842565b838152905060208082019084028301858111156129cd576129cd600080fd5b835b8181101561291a5780356001600160401b038111156129f0576129f0600080fd5b8086016129fd8982612948565b85525050602092830192016129cf565b600082601f830112612a2157612a21600080fd5b81356109278482602086016129a0565b600060208284031215612a4657612a46600080fd5b81356001600160401b03811115612a5f57612a5f600080fd5b61092784828501612a0d565b60005b83811015612a86578181015183820152602001612a6e565b83811115611d905750506000910152565b6000612aa1825190565b808452602084019350612ab8818560208601612a6b565b601f01601f19169290920192915050565b602080825281016115108184612a97565b6122e481612040565b6020810161082d8284612ada565b600080600060608486031215612b0957612b09600080fd5b6000612b158686612070565b9350506020612b26868287016120a5565b9250506040612107868287016120b6565b600061082d82612051565b6122e481612b37565b6020810161082d8284612b42565b60008060008060008060008060006101208a8c031215612b7b57612b7b600080fd5b6000612b878c8c6120a5565b9950506020612b988c828d016120a5565b9850506040612ba98c828d01612070565b9750506060612bba8c828d01612070565b9650506080612bcb8c828d01612070565b95505060a08a01356001600160401b03811115612bea57612bea600080fd5b612bf68c828d01612200565b94505060c08a01356001600160401b03811115612c1557612c15600080fd5b612c218c828d01612200565b93505060e08a01356001600160401b03811115612c4057612c40600080fd5b612c4c8c828d01612200565b9250506101008a01356001600160401b03811115612c6c57612c6c600080fd5b612c788c828d01612200565b9150509295985092959850929598565b600060208284031215612c9d57612c9d600080fd5b600061092784846120b6565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161082d81612ca9565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612cd7565b6020808252810161082d81612cee565b602681526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f742077616c6c65748152651037bbb732b960d11b602082015291505b5060400190565b6020808252810161082d81612d25565b602481526000602082017f46756e6457616c6c65743a206e6f6e6578697374656e742077616c6c6574206f8152633bb732b960e11b60208201529150612d64565b6020808252810161082d81612d7b565b601881526000602082017f46756e6457616c6c65743a207a65726f2061646472657373000000000000000081529150612cd7565b6020808252810161082d81612dcc565b601981526000602082017f46756e6457616c6c65743a20696e76616c6964206e6f6e63650000000000000081529150612cd7565b6020808252810161082d81612e10565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612cd7565b6020808252810161082d81612e54565b805161082d816120b0565b805161082d81612865565b600060408284031215612ec357612ec3600080fd5b612ecd604061216d565b90506000612edb8484612ea3565b82525060206128bb84848301612e98565b6000612efa6121cd84612842565b83815290506020810160408402830185811115612f1957612f19600080fd5b835b8181101561291a5780612f2e8882612eae565b845250602090920191604001612f1b565b600082601f830112612f5357612f53600080fd5b8151610927848260208601612eec565b600060408284031215612f7857612f78600080fd5b612f82604061216d565b90506000612f908484612e98565b82525060208201516001600160401b03811115612faf57612faf600080fd5b6128bb84828501612f3f565b6000612fc96121cd84612842565b83815290506020808201908402830185811115612fe857612fe8600080fd5b835b8181101561291a5780516001600160401b0381111561300b5761300b600080fd5b8086016130188982612f63565b8552505060209283019201612fea565b600082601f83011261303c5761303c600080fd5b8151610927848260208601612fbb565b60006020828403121561306157613061600080fd5b81516001600160401b0381111561307a5761307a600080fd5b61092784828501613028565b63313ce56760e01b815260006004820161082d565b602681526000602082017f5265736f75726365506179546f6b656e577261707065723a20696e76616c6964815265103a37b5b2b760d11b60208201529150612d64565b6020808252810161082d8161309b565b60006020828403121561310357613103600080fd5b60006109278484612e98565b60208082527f5061757365723a2063616c6c6572206973206e6f74207468652070617573657291019081526000612cd7565b6020808252810161082d8161310f565b6001600160401b0381166122e4565b60c0810161316e82896122e2565b61317b6020830188612ada565b6131886040830187613151565b61319560608301866122e2565b6131a260808301856122e2565b611ffc60a08301846122e2565b602a81526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f7420746865207761815269363632ba1037bbb732b960b11b60208201529150612d64565b6020808252810161082d816131af565b60208082527f46756e6457616c6c65743a20696e73756666696369656e742062616c616e636591019081526000612cd7565b6020808252810161082d81613206565b60a081016132568288612ada565b6132636020830187613151565b61327060408301866122e2565b61327d6060830185612ada565b610e2760808301846122e2565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b60208201529150612d64565b6020808252810161082d8161328a565b604081016132ea8285612b42565b61151060208301846122e2565b60a0810161330582886122e2565b6133126020830187612ada565b61331f6040830186613151565b61327d60608301856122e2565b6060810161333a8286612b42565b6133476020830185612ada565b61092760408301846122e2565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612d64565b6020808252810161082d81613354565b634e487b7160e01b600052601160045260246000fd5b80825b6001851115613404578086048111156133e3576133e36133af565b60018516156133f157908102905b80026133fd8560011c90565b94506133c8565b94509492505050565b60008261341c57506001611510565b8161342957506000611510565b816001811461343f576002811461344957613476565b6001915050611510565b60ff84111561345a5761345a6133af565b8360020a915084821115613470576134706133af565b50611510565b5060208310610133831016604e8410600b84101617156134a9575081810a838111156134a4576134a46133af565b611510565b6134b684848460016133c5565b925090508184048111156134cc576134cc6133af565b0292915050565b6000611510600019848461340d565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612d64565b6020808252810161082d816134e2565b602581526000602082017f5265736f75726365506179546f6b656e577261707065723a207a65726f206164815264647265737360d81b60208201529150612d64565b6020808252810161082d81613535565b606081016135958286612ada565b6135a260208301856122e2565b6109276040830184612ada565b6013815260006020820172109a5b1b1a5b99ce881d1e08195e1c1a5c9959606a1b81529150612cd7565b6020808252810161082d816135af565b801515612065565b805161082d816135e9565b60006020828403121561361157613611600080fd5b600061092784846135f1565b602181526000602082017f42696c6c696e673a2063616c6c6572206973206e6f7420612070726f766964658152603960f91b60208201529150612d64565b6020808252810161082d8161361d565b606081016136798286612ada565b61368660208301856122e2565b81810360408301526109248184612a97565b601a81526000602082017f42696c6c696e673a20696e76616c6964207369676e617475726500000000000081529150612cd7565b6020808252810161082d81613698565b601d81526000602082017f42696c6c696e673a20696e73756666696369656e742062616c616e636500000081529150612cd7565b6020808252810161082d816136dc565b60a0810161372e8288612ada565b61373b6020830187613151565b61374860408301866122e2565b818103606083015261375a8185612a97565b9050610e2760808301846122e2565b60008282101561377b5761377b6133af565b500390565b6080810161378e8287612ada565b61379b60208301866122e2565b6137a86040830185613151565b61096e606083018461263e565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612cd7565b6020808252810161082d816137b5565b601781526000602082017f46756e6457616c6c65743a207a65726f20616d6f756e7400000000000000000081529150612cd7565b6020808252810161082d816137f0565b601d81526000602082017f46756e6457616c6c65743a20696e76616c6964207369676e617475726500000081529150612cd7565b6020808252810161082d81613834565b608081016138868287612ada565b6138936020830186613151565b6138a060408301856122e2565b61096e60608301846122e2565b604081016132ea8285612ada565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f742070617573657200000081529150612cd7565b6020808252810161082d816138bb565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150612d64565b6020808252810161082d816138ff565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612d64565b6020808252810161082d8161394d565b634e487b7160e01b600052601260045260246000fd5b6000826139ca576139ca6139a5565b500490565b60008160001904831182151516156139e9576139e96133af565b500290565b601c81526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f6164730000000081529150612cd7565b6020808252810161082d816139ee565b634e487b7160e01b600052603260045260246000fd5b601981526000602082017f42696c6c696e673a20656d7074792062696c6c20656e7472790000000000000081529150612cd7565b6020808252810161082d81613a48565b60608101613a9a828661236d565b61334760208301856122e2565b6000600019821415613abb57613abb6133af565b5060010190565b806122e4565b61190160f01b81526002016000613adf8285613ac2565b602082019150613aef8284613ac2565b5060200192915050565b60008219821115613b0c57613b0c6133af565b500190565b6060810161333a8286612ada565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150612d64565b6020808252810161082d81613b1f565b601581526000602082017442696c6c696e673a207a65726f206164647265737360581b81529150612cd7565b6020808252810161082d81613b76565b60a08101613bc082886122e2565b613bcd60208301876122e2565b613bda60408301866122e2565b613be760608301856122e2565b610e276080830184612ada565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612cd7565b6020808252810161082d81613bf4565b6000613c42825190565b613c50818560208601612a6b565b9290920192915050565b60006115108284613c3856fea26469706673582212209041ea12748a40c653cb2655d463df18faa159d535b6fc35e5f88e354f8443de64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061023d5760003560e01c8063715018a61161013b57806393563a95116100b8578063f12973d31161007c578063f12973d314610523578063f2fde38b14610536578063f674529614610549578063f8401fe61461055c578063fc0c546a1461056f57600080fd5b806393563a95146104c0578063c2cd9b2b146104d3578063da66bd67146104f3578063ddc5517e14610506578063e7356a071461051957600080fd5b8063822a3f74116100ff578063822a3f741461046557806382dc1ec4146104785780638456cb591461048b5780638da5cb5b146104935780638f1a1438146104ad57600080fd5b8063715018a6146103f4578063746cb256146103fc5780637acc238b1461040f57806380124a431461042257806380f51c121461044257600080fd5b80634bf1fcda116101c95780635fce61d51161018d5780635fce61d5146103b657806368b86954146103bf578063699256f4146103c65780636b2c0f55146103d95780636ef8d66d146103ec57600080fd5b80634bf1fcda146103095780634d30b6be1461034b5780635ab9d73b146103855780635c975abb146103985780635e81e331146103a357600080fd5b80633b97e856116102105780633b97e856146102b35780633f4ba83a146102bb5780633fe1d581146102c357806346e9398b146102d657806346fbf68e146102e957600080fd5b8063144fa6d71461024257806324496dbb146102575780632c7959241461026a57806335a609bc14610293575b600080fd5b61025561025036600461207b565b610588565b005b6102556102653660046120c1565b6105c7565b61027d610278366004612224565b61069e565b60405161028a91906122ea565b60405180910390f35b6102a66102a13660046122f8565b610817565b60405161028a9190612495565b61027d610833565b6102556108df565b61027d6102d13660046124a6565b61090e565b61027d6102e436600461250a565b61092f565b6102fc6102f736600461259c565b610977565b60405161028a91906125c5565b61033e6103173660046125d3565b61010260209081526000938452604080852082529284528284209052825290205460ff1681565b60405161028a9190612647565b61027d610359366004612655565b6001600160a01b0391909116600090815261010360209081526040808320938352929052206001015490565b610255610393366004612692565b610995565b609c5460ff166102fc565b61027d6103b13660046127b7565b610ac3565b61027d60365481565b601261027d565b6102556103d4366004612655565b610cf7565b6102556103e736600461259c565b610da5565b610255610dd8565b610255610de1565b61027d61040a36600461250a565b610e15565b61025561041d3660046122f8565b610e31565b610435610430366004612a31565b610e6b565b60405161028a9190612ac9565b6102fc61045036600461259c565b60ce6020526000908152604090205460ff1681565b6102556104733660046122f8565b610e94565b61025561048636600461259c565b610ece565b610255610f01565b606a546001600160a01b03165b60405161028a9190612ae3565b61027d6104bb3660046124a6565b610f2e565b6102556104ce366004612af1565b610f6c565b6037546104e6906001600160a01b031681565b60405161028a9190612b4b565b6104a0610501366004612655565b610fdd565b610255610514366004612b59565b611006565b61027d6101015481565b61027d610531366004612c88565b6110ca565b61025561054436600461259c565b61111e565b61027d610557366004612c88565b611177565b6001546104e6906001600160a01b031681565b6000546104e6906201000090046001600160a01b031681565b606a546001600160a01b031633146105bb5760405162461bcd60e51b81526004016105b290612cde565b60405180910390fd5b6105c4816111b6565b50565b609c5460ff16156105ea5760405162461bcd60e51b81526004016105b290612d15565b6001600160a01b03808416600090815261010360209081526040808320868452909152902054849184911633146106335760405162461bcd60e51b81526004016105b290612d6b565b600061063f8686610fdd565b6001600160a01b031614156106665760405162461bcd60e51b81526004016105b290612dbc565b6001600160a01b03831661068c5760405162461bcd60e51b81526004016105b290612e00565b610697858585611245565b5050505050565b6000868587836001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b038616845290915290205460ff1660038111156106ee576106ee612332565b1461070b5760405162461bcd60e51b81526004016105b290612e44565b609c5460ff161561072e5760405162461bcd60e51b81526004016105b290612d15565b600260cf5414156107515760405162461bcd60e51b81526004016105b290612e88565b600260cf8190555061079b6040518060a001604052808c6001600160a01b031681526020018b6001600160401b031681526020018a815260200189815260200188815250866112b4565b6001600160a01b038b166000908152610103602090815260408083208c84529091529020600101549094506107d09085611504565b6001600160a01b038b166000908152610103602090815260408083208c84529091529020600101556108058a898b6002611517565b5050600160cf55509695505050505050565b60608180602001905181019061082d919061304c565b92915050565b60008060008060029054906101000a90046001600160a01b03166001600160a01b031660405161086290613086565b600060405180830381855afa9150503d806000811461089d576040519150601f19603f3d011682016040523d82523d6000602084013e6108a2565b606091505b5091509150816108c45760405162461bcd60e51b81526004016105b2906130de565b808060200190518101906108d891906130ee565b9250505090565b6108e833610977565b6109045760405162461bcd60e51b81526004016105b290613141565b61090c6115b1565b565b600061092461091f86868686610f2e565b611617565b90505b949350505050565b600060365486868686805190602001208660405160200161095596959493929190613160565b6040516020818303038152906040528051906020012090505b95945050505050565b6001600160a01b0316600090815260ce602052604090205460ff1690565b84838560006001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b038616845290915290205460ff1660038111156109e4576109e4612332565b14610a015760405162461bcd60e51b81526004016105b290612e44565b609c5460ff1615610a245760405162461bcd60e51b81526004016105b290612d15565b600260cf541415610a475760405162461bcd60e51b81526004016105b290612e88565b600260cf556000610a588988610fdd565b6001600160a01b031614610a9c5733610a718988610fdd565b6001600160a01b031614610a975760405162461bcd60e51b81526004016105b2906131f6565b610aa7565b610aa7888733611245565b610ab4888888888861162a565b5050600160cf55505050505050565b8351604085015160208601516000929190836001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610b1f57610b1f612332565b14610b3c5760405162461bcd60e51b81526004016105b290612e44565b87516040808a01516001600160a01b0380841660009081526101036020908152848220848352905292909220549091163314610b8a5760405162461bcd60e51b81526004016105b290612d6b565b609c5460ff1615610bad5760405162461bcd60e51b81526004016105b290612d15565b600260cf541415610bd05760405162461bcd60e51b81526004016105b290612e88565b600260cf55610bdf8a886112b4565b8a516040808d01516020808f01516001600160a01b0385166000908152610103835284812084825290925292812060010154949a509293909290610c23908b611504565b90508c8c80831015610c475760405162461bcd60e51b81526004016105b290613238565b610c518382611504565b6001600160a01b038088166000908152610103602090815260408083208a84529091528120600101929092559054610c9291620100009091041683836117c1565b610c9f8686866003611517565b7f26b8aa9e5d4f71b867c84264e57eab543daba6bf03a6ac7c3be51697b5132f708685878585604051610cd6959493929190613248565b60405180910390a15050600160cf5550979c9b505050505050505050505050565b606a546001600160a01b03163314610d215760405162461bcd60e51b81526004016105b290612cde565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610d675760405162461bcd60e51b81526004016105b2906132cc565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610d989291906132dc565b60405180910390a1505050565b606a546001600160a01b03163314610dcf5760405162461bcd60e51b81526004016105b290612cde565b6105c48161181c565b61090c3361181c565b606a546001600160a01b03163314610e0b5760405162461bcd60e51b81526004016105b290612cde565b61090c6000611891565b6000610e2761091f878787878761092f565b9695505050505050565b606a546001600160a01b03163314610e5b5760405162461bcd60e51b81526004016105b290612cde565b6105c481805190602001206118e3565b606081604051602001610e7e9190612495565b6040516020818303038152906040529050919050565b606a546001600160a01b03163314610ebe5760405162461bcd60e51b81526004016105b290612cde565b6105c48180519060200120611919565b606a546001600160a01b03163314610ef85760405162461bcd60e51b81526004016105b290612cde565b6105c48161194e565b610f0a33610977565b610f265760405162461bcd60e51b81526004016105b290613141565b61090c6119c7565b60006101015485858585604051602001610f4c9594939291906132f7565b604051602081830303815290604052805190602001209050949350505050565b606a546001600160a01b03163314610f965760405162461bcd60e51b81526004016105b290612cde565b610faa6001600160a01b03841683836117c1565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610d989392919061332c565b6001600160a01b0391821660009081526101036020908152604080832093835292905220541690565b600054610100900460ff166110215760005460ff1615611025565b303b155b6110415760405162461bcd60e51b81526004016105b29061339f565b600054610100900460ff16158015611063576000805461ffff19166101011790555b61106c8a611891565b61107589611a1f565b61107e87611a46565b61108788611a76565b61109086611aa6565b61109a8585611acd565b6110a383611b02565b6110ac82611b29565b80156110be576000805461ff00191690555b50505050505050505050565b6000806110d5610833565b905060128082116110ff576109276110ed8284611504565b6110f890600a6134d3565b8590611b50565b61092761110c8383611504565b61111790600a6134d3565b8590611b5c565b606a546001600160a01b031633146111485760405162461bcd60e51b81526004016105b290612cde565b6001600160a01b03811661116e5760405162461bcd60e51b81526004016105b290613525565b6105c481611891565b600080611182610833565b9050601280821161119a5761092761110c8284611504565b6109276110ed8383611504565b6001600160a01b03163b151590565b6001600160a01b0381166111dc5760405162461bcd60e51b81526004016105b290613577565b6000805462010000600160b01b031916620100006001600160a01b03848116820292909217928390556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e309361123a9392900490911690612b4b565b60405180910390a150565b6001600160a01b038381166000908152610103602090815260408083208684529091529081902080546001600160a01b03191692841692909217909155517f4ddee4675a37f5c882a56b9be609ea55023c460cafb24ab74c1cb024abc84b3b90610d9890859085908590613587565b6000428360800151116112d95760405162461bcd60e51b81526004016105b2906135d9565b600154604051636b074a0760e01b81526001600160a01b0390911690636b074a0790611309903390600401612ae3565b60206040518083038186803b15801561132157600080fd5b505afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061135991906135fc565b6113755760405162461bcd60e51b81526004016105b29061365b565b600061139884600001518560200151866040015187606001518860800151610e15565b60015485516040516311c5268f60e11b81529293506001600160a01b039091169163238a4d1e916113cf918590889060040161366b565b602060405180830381600087803b1580156113e957600080fd5b505af11580156113fd573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142191906135fc565b61143d5760405162461bcd60e51b81526004016105b2906136cc565b606084015151156114ae5783516040808601516001600160a01b039092166000908152610103602090815282822093825292909252812060010154905061148a6105318660600151611b68565b9250828110156114ac5760405162461bcd60e51b81526004016105b290613710565b505b7f086575d4de5bb5f0addd08773b7097a00aaa37120293013f54da4433812adfa78460000151856020015186604001518760600151866040516114f5959493929190613720565b60405180910390a15092915050565b60006115108284613769565b9392505050565b6001600160a01b03841660009081526101026020908152604080832086845282528083206001600160401b03861684529091529020805482919060ff1916600183600381111561156957611569612332565b02179055507fc4f15e84da288f27234e3626e64c8035b984fd65cee49fcd86b4910de1d13e7c848484846040516115a39493929190613780565b60405180910390a150505050565b609c5460ff166115d35760405162461bcd60e51b81526004016105b2906137e0565b609c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405161160d9190612ae3565b60405180910390a1565b600061082d611624611cf4565b83611d30565b6000821161164a5760405162461bcd60e51b81526004016105b290613824565b60006116588686868661090e565b6001546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e9061168d9089908590879060040161366b565b602060405180830381600087803b1580156116a757600080fd5b505af11580156116bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116df91906135fc565b6116fb5760405162461bcd60e51b81526004016105b290613868565b6001600160a01b03861660009081526101036020908152604080832087845290915290206001015461172d9084611d63565b6001600160a01b03808816600090815261010360209081526040808320898452909152812060010192909255905461176f916201000090910416333086611d6f565b61177c8685876001611517565b7f20615f51b8701e825dbc8fd5f5e6909964726a9082f971d65f494860fd3ae396868686866040516117b19493929190613878565b60405180910390a1505050505050565b6118178363a9059cbb60e01b84846040516024016117e09291906138ad565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611d96565b505050565b61182581610977565b6118415760405162461bcd60e51b81526004016105b2906138ef565b6001600160a01b038116600090815260ce602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e9061123a908390612ae3565b606a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101018190556040517f921d5c4a3c33eaff9e0f2fee28d7dd04f45183c3070cc30adfd5d90be51546999061123a9083906122ea565b60368190556040517fff0ac6417b45aca293f36f486c055ff8f1a6df297264ffe0a52b04395ad5f31c9061123a9083906122ea565b61195781610977565b156119745760405162461bcd60e51b81526004016105b29061393d565b6001600160a01b038116600090815260ce602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f89061123a908390612ae3565b609c5460ff16156119ea5760405162461bcd60e51b81526004016105b290612d15565b609c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586116003390565b600054610100900460ff16610ef85760405162461bcd60e51b81526004016105b290613995565b600054610100900460ff16611a6d5760405162461bcd60e51b81526004016105b290613995565b6105c481611e25565b600054610100900460ff16611a9d5760405162461bcd60e51b81526004016105b290613995565b6105c481611e70565b600054610100900460ff166105bb5760405162461bcd60e51b81526004016105b290613995565b600054610100900460ff16611af45760405162461bcd60e51b81526004016105b290613995565b611afe8282611ee1565b5050565b600054610100900460ff16610e5b5760405162461bcd60e51b81526004016105b290613995565b600054610100900460ff16610ebe5760405162461bcd60e51b81526004016105b290613995565b600061151082846139bb565b600061151082846139cf565b60008082806020019051810190611b7f919061304c565b90506000815111611ba25760405162461bcd60e51b81526004016105b290613a22565b60005b8151811015611ced576000828281518110611bc257611bc2613a32565b60200260200101519050600081602001515111611bf15760405162461bcd60e51b81526004016105b290613a7c565b60005b816020015151811015611cd857600082602001518481518110611c1957611c19613a32565b60209081029190910181015160375481519282015186516040516354bf93b960e11b81529395506000946001600160a01b039093169363a97f277293611c659390929091600401613a8c565b60206040518083038186803b158015611c7d57600080fd5b505afa158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb591906130ee565b9050611cc18782611d63565b965050508080611cd090613aa7565b915050611bf4565b50508080611ce590613aa7565b915050611ba5565b5050919050565b6000611d2b7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611d2360025490565b600354611f22565b905090565b60008282604051602001611d45929190613ac8565b60405160208183030381529060405280519060200120905092915050565b60006115108284613af9565b611d90846323b872dd60e01b8585856040516024016117e093929190613b11565b50505050565b6000611deb826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611f5c9092919063ffffffff16565b8051909150156118175780806020019051810190611e0991906135fc565b6118175760405162461bcd60e51b81526004016105b290613b66565b600180546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c52849061123a908390612b4b565b6001600160a01b038116611e965760405162461bcd60e51b81526004016105b290613ba2565b603780546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c19061123a908390612b4b565b600054610100900460ff16611f085760405162461bcd60e51b81526004016105b290613995565b815160209283012081519190920120600291909155600355565b60008383834630604051602001611f3d959493929190613bb2565b6040516020818303038152906040528051906020012090509392505050565b60606109278484600085856001600160a01b0385163b611f8e5760405162461bcd60e51b81526004016105b290613c28565b600080866001600160a01b03168587604051611faa9190613c5a565b60006040518083038185875af1925050503d8060008114611fe7576040519150601f19603f3d011682016040523d82523d6000602084013e611fec565b606091505b5091509150611ffc828286612007565b979650505050505050565b60608315612016575081611510565b8251156120265782518084602001fd5b8160405162461bcd60e51b81526004016105b29190612ac9565b60006001600160a01b03821661082d565b600061082d82612040565b61206581612051565b81146105c457600080fd5b803561082d8161205c565b60006020828403121561209057612090600080fd5b60006109278484612070565b61206581612040565b803561082d8161209c565b80612065565b803561082d816120b0565b6000806000606084860312156120d9576120d9600080fd5b60006120e586866120a5565b93505060206120f6868287016120b6565b9250506040612107868287016120a5565b9150509250925092565b6001600160401b038116612065565b803561082d81612111565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156121665761216661212b565b6040525050565b600061217860405190565b90506121848282612141565b919050565b60006001600160401b038211156121a2576121a261212b565b601f19601f83011660200192915050565b82818337506000910152565b60006121d26121cd84612189565b61216d565b9050828152602081018484840111156121ed576121ed600080fd5b6121f88482856121b3565b509392505050565b600082601f83011261221457612214600080fd5b81356109278482602086016121bf565b60008060008060008060c0878903121561224057612240600080fd5b600061224c89896120a5565b965050602061225d89828a01612120565b955050604061226e89828a016120b6565b94505060608701356001600160401b0381111561228d5761228d600080fd5b61229989828a01612200565b93505060806122aa89828a016120b6565b92505060a08701356001600160401b038111156122c9576122c9600080fd5b6122d589828a01612200565b9150509295509295509295565b805b82525050565b6020810161082d82846122e2565b60006020828403121561230d5761230d600080fd5b81356001600160401b0381111561232657612326600080fd5b61092784828501612200565b634e487b7160e01b600052602160045260246000fd5b600581106105c4576105c4612332565b8061218481612348565b600061082d82612358565b6122e481612362565b80516040830190612387848261236d565b506020820151611d9060208501826122e2565b60006123a68383612376565b505060400190565b60006123b8825190565b80845260209384019383018060005b838110156123ec5781516123db888261239a565b9750602083019250506001016123c7565b509495945050505050565b8051600090604084019061240b85826122e2565b506020830151848203602086015261096e82826123ae565b600061151083836123f7565b6000612439825190565b808452602084019350836020820285016124538560200190565b8060005b8581101561248857848403895281516124708582612423565b94506020830160209a909a0199925050600101612457565b5091979650505050505050565b60208082528101611510818461242f565b600080600080608085870312156124bf576124bf600080fd5b60006124cb87876120a5565b94505060206124dc87828801612120565b93505060406124ed878288016120b6565b92505060606124fe878288016120b6565b91505092959194509250565b600080600080600060a0868803121561252557612525600080fd5b600061253188886120a5565b955050602061254288828901612120565b9450506040612553888289016120b6565b93505060608601356001600160401b0381111561257257612572600080fd5b61257e88828901612200565b925050608061258f888289016120b6565b9150509295509295909350565b6000602082840312156125b1576125b1600080fd5b600061092784846120a5565b8015156122e4565b6020810161082d82846125bd565b6000806000606084860312156125eb576125eb600080fd5b60006125f786866120a5565b9350506020612608868287016120b6565b925050604061210786828701612120565b600481106105c4576105c4612332565b8061218481612619565b600061082d82612629565b6122e481612633565b6020810161082d828461263e565b6000806040838503121561266b5761266b600080fd5b600061267785856120a5565b9250506020612688858286016120b6565b9150509250929050565b600080600080600060a086880312156126ad576126ad600080fd5b60006126b988886120a5565b95505060206126ca88828901612120565b94505060406126db888289016120b6565b93505060606126ec888289016120b6565b92505060808601356001600160401b0381111561270b5761270b600080fd5b61258f88828901612200565b600060a0828403121561272c5761272c600080fd5b61273660a061216d565b9050600061274484846120a5565b825250602061275584848301612120565b6020830152506040612769848285016120b6565b60408301525060608201356001600160401b0381111561278b5761278b600080fd5b61279784828501612200565b60608301525060806127ab848285016120b6565b60808301525092915050565b600080600080608085870312156127d0576127d0600080fd5b84356001600160401b038111156127e9576127e9600080fd5b6127f587828801612717565b9450506020612806878288016120a5565b9350506040612817878288016120b6565b92505060608501356001600160401b0381111561283657612836600080fd5b6124fe87828801612200565b60006001600160401b0382111561285b5761285b61212b565b5060209081020190565b600581106105c457600080fd5b803561082d81612865565b60006040828403121561289257612892600080fd5b61289c604061216d565b905060006128aa8484612872565b82525060206128bb848483016120b6565b60208301525092915050565b60006128d56121cd84612842565b838152905060208101604084028301858111156128f4576128f4600080fd5b835b8181101561291a5780612909888261287d565b8452506020909201916040016128f6565b5050509392505050565b600082601f83011261293857612938600080fd5b81356109278482602086016128c7565b60006040828403121561295d5761295d600080fd5b612967604061216d565b9050600061297584846120b6565b82525060208201356001600160401b0381111561299457612994600080fd5b6128bb84828501612924565b60006129ae6121cd84612842565b838152905060208082019084028301858111156129cd576129cd600080fd5b835b8181101561291a5780356001600160401b038111156129f0576129f0600080fd5b8086016129fd8982612948565b85525050602092830192016129cf565b600082601f830112612a2157612a21600080fd5b81356109278482602086016129a0565b600060208284031215612a4657612a46600080fd5b81356001600160401b03811115612a5f57612a5f600080fd5b61092784828501612a0d565b60005b83811015612a86578181015183820152602001612a6e565b83811115611d905750506000910152565b6000612aa1825190565b808452602084019350612ab8818560208601612a6b565b601f01601f19169290920192915050565b602080825281016115108184612a97565b6122e481612040565b6020810161082d8284612ada565b600080600060608486031215612b0957612b09600080fd5b6000612b158686612070565b9350506020612b26868287016120a5565b9250506040612107868287016120b6565b600061082d82612051565b6122e481612b37565b6020810161082d8284612b42565b60008060008060008060008060006101208a8c031215612b7b57612b7b600080fd5b6000612b878c8c6120a5565b9950506020612b988c828d016120a5565b9850506040612ba98c828d01612070565b9750506060612bba8c828d01612070565b9650506080612bcb8c828d01612070565b95505060a08a01356001600160401b03811115612bea57612bea600080fd5b612bf68c828d01612200565b94505060c08a01356001600160401b03811115612c1557612c15600080fd5b612c218c828d01612200565b93505060e08a01356001600160401b03811115612c4057612c40600080fd5b612c4c8c828d01612200565b9250506101008a01356001600160401b03811115612c6c57612c6c600080fd5b612c788c828d01612200565b9150509295985092959850929598565b600060208284031215612c9d57612c9d600080fd5b600061092784846120b6565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161082d81612ca9565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612cd7565b6020808252810161082d81612cee565b602681526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f742077616c6c65748152651037bbb732b960d11b602082015291505b5060400190565b6020808252810161082d81612d25565b602481526000602082017f46756e6457616c6c65743a206e6f6e6578697374656e742077616c6c6574206f8152633bb732b960e11b60208201529150612d64565b6020808252810161082d81612d7b565b601881526000602082017f46756e6457616c6c65743a207a65726f2061646472657373000000000000000081529150612cd7565b6020808252810161082d81612dcc565b601981526000602082017f46756e6457616c6c65743a20696e76616c6964206e6f6e63650000000000000081529150612cd7565b6020808252810161082d81612e10565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612cd7565b6020808252810161082d81612e54565b805161082d816120b0565b805161082d81612865565b600060408284031215612ec357612ec3600080fd5b612ecd604061216d565b90506000612edb8484612ea3565b82525060206128bb84848301612e98565b6000612efa6121cd84612842565b83815290506020810160408402830185811115612f1957612f19600080fd5b835b8181101561291a5780612f2e8882612eae565b845250602090920191604001612f1b565b600082601f830112612f5357612f53600080fd5b8151610927848260208601612eec565b600060408284031215612f7857612f78600080fd5b612f82604061216d565b90506000612f908484612e98565b82525060208201516001600160401b03811115612faf57612faf600080fd5b6128bb84828501612f3f565b6000612fc96121cd84612842565b83815290506020808201908402830185811115612fe857612fe8600080fd5b835b8181101561291a5780516001600160401b0381111561300b5761300b600080fd5b8086016130188982612f63565b8552505060209283019201612fea565b600082601f83011261303c5761303c600080fd5b8151610927848260208601612fbb565b60006020828403121561306157613061600080fd5b81516001600160401b0381111561307a5761307a600080fd5b61092784828501613028565b63313ce56760e01b815260006004820161082d565b602681526000602082017f5265736f75726365506179546f6b656e577261707065723a20696e76616c6964815265103a37b5b2b760d11b60208201529150612d64565b6020808252810161082d8161309b565b60006020828403121561310357613103600080fd5b60006109278484612e98565b60208082527f5061757365723a2063616c6c6572206973206e6f74207468652070617573657291019081526000612cd7565b6020808252810161082d8161310f565b6001600160401b0381166122e4565b60c0810161316e82896122e2565b61317b6020830188612ada565b6131886040830187613151565b61319560608301866122e2565b6131a260808301856122e2565b611ffc60a08301846122e2565b602a81526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f7420746865207761815269363632ba1037bbb732b960b11b60208201529150612d64565b6020808252810161082d816131af565b60208082527f46756e6457616c6c65743a20696e73756666696369656e742062616c616e636591019081526000612cd7565b6020808252810161082d81613206565b60a081016132568288612ada565b6132636020830187613151565b61327060408301866122e2565b61327d6060830185612ada565b610e2760808301846122e2565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b60208201529150612d64565b6020808252810161082d8161328a565b604081016132ea8285612b42565b61151060208301846122e2565b60a0810161330582886122e2565b6133126020830187612ada565b61331f6040830186613151565b61327d60608301856122e2565b6060810161333a8286612b42565b6133476020830185612ada565b61092760408301846122e2565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612d64565b6020808252810161082d81613354565b634e487b7160e01b600052601160045260246000fd5b80825b6001851115613404578086048111156133e3576133e36133af565b60018516156133f157908102905b80026133fd8560011c90565b94506133c8565b94509492505050565b60008261341c57506001611510565b8161342957506000611510565b816001811461343f576002811461344957613476565b6001915050611510565b60ff84111561345a5761345a6133af565b8360020a915084821115613470576134706133af565b50611510565b5060208310610133831016604e8410600b84101617156134a9575081810a838111156134a4576134a46133af565b611510565b6134b684848460016133c5565b925090508184048111156134cc576134cc6133af565b0292915050565b6000611510600019848461340d565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612d64565b6020808252810161082d816134e2565b602581526000602082017f5265736f75726365506179546f6b656e577261707065723a207a65726f206164815264647265737360d81b60208201529150612d64565b6020808252810161082d81613535565b606081016135958286612ada565b6135a260208301856122e2565b6109276040830184612ada565b6013815260006020820172109a5b1b1a5b99ce881d1e08195e1c1a5c9959606a1b81529150612cd7565b6020808252810161082d816135af565b801515612065565b805161082d816135e9565b60006020828403121561361157613611600080fd5b600061092784846135f1565b602181526000602082017f42696c6c696e673a2063616c6c6572206973206e6f7420612070726f766964658152603960f91b60208201529150612d64565b6020808252810161082d8161361d565b606081016136798286612ada565b61368660208301856122e2565b81810360408301526109248184612a97565b601a81526000602082017f42696c6c696e673a20696e76616c6964207369676e617475726500000000000081529150612cd7565b6020808252810161082d81613698565b601d81526000602082017f42696c6c696e673a20696e73756666696369656e742062616c616e636500000081529150612cd7565b6020808252810161082d816136dc565b60a0810161372e8288612ada565b61373b6020830187613151565b61374860408301866122e2565b818103606083015261375a8185612a97565b9050610e2760808301846122e2565b60008282101561377b5761377b6133af565b500390565b6080810161378e8287612ada565b61379b60208301866122e2565b6137a86040830185613151565b61096e606083018461263e565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612cd7565b6020808252810161082d816137b5565b601781526000602082017f46756e6457616c6c65743a207a65726f20616d6f756e7400000000000000000081529150612cd7565b6020808252810161082d816137f0565b601d81526000602082017f46756e6457616c6c65743a20696e76616c6964207369676e617475726500000081529150612cd7565b6020808252810161082d81613834565b608081016138868287612ada565b6138936020830186613151565b6138a060408301856122e2565b61096e60608301846122e2565b604081016132ea8285612ada565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f742070617573657200000081529150612cd7565b6020808252810161082d816138bb565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150612d64565b6020808252810161082d816138ff565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612d64565b6020808252810161082d8161394d565b634e487b7160e01b600052601260045260246000fd5b6000826139ca576139ca6139a5565b500490565b60008160001904831182151516156139e9576139e96133af565b500290565b601c81526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f6164730000000081529150612cd7565b6020808252810161082d816139ee565b634e487b7160e01b600052603260045260246000fd5b601981526000602082017f42696c6c696e673a20656d7074792062696c6c20656e7472790000000000000081529150612cd7565b6020808252810161082d81613a48565b60608101613a9a828661236d565b61334760208301856122e2565b6000600019821415613abb57613abb6133af565b5060010190565b806122e4565b61190160f01b81526002016000613adf8285613ac2565b602082019150613aef8284613ac2565b5060200192915050565b60008219821115613b0c57613b0c6133af565b500190565b6060810161333a8286612ada565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150612d64565b6020808252810161082d81613b1f565b601581526000602082017442696c6c696e673a207a65726f206164647265737360581b81529150612cd7565b6020808252810161082d81613b76565b60a08101613bc082886122e2565b613bcd60208301876122e2565b613bda60408301866122e2565b613be760608301856122e2565b610e276080830184612ada565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612cd7565b6020808252810161082d81613bf4565b6000613c42825190565b613c50818560208601612a6b565b9290920192915050565b60006115108284613c3856fea26469706673582212209041ea12748a40c653cb2655d463df18faa159d535b6fc35e5f88e354f8443de64736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "FundWallet contract",
    "kind": "dev",
    "methods": {
      "addPauser(address)": {
        "details": "add a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "balanceOf(address,bytes32)": {
        "details": "return balance of account",
        "params": {
          "account": "user account",
          "provider": "provider address"
        },
        "returns": {
          "_0": "balance of account account"
        }
      },
      "billsHash(address,uint64,bytes32,bytes,uint256)": {
        "details": "return hash for bills",
        "params": {
          "account": "user account",
          "bills": "user bills",
          "expiration": "bills expiration",
          "nonce": "nonce",
          "provider": "provider address"
        },
        "returns": {
          "_0": "bills hash"
        }
      },
      "decodeBills(bytes)": {
        "details": "decode bill bytes to user bill",
        "params": {
          "data": "bill bytes"
        },
        "returns": {
          "_0": "user bills"
        }
      },
      "encodeBills((uint256,(uint8,uint256)[])[])": {
        "details": "encode bill to bytes",
        "params": {
          "bills": "user bills"
        },
        "returns": {
          "_0": "bills bytes"
        }
      },
      "hashTypedDataV4ForBills(address,uint64,bytes32,bytes,uint256)": {
        "details": "return hash typed v4 for sign",
        "params": {
          "account": "user account",
          "bills": "user bills",
          "nonce": "nonce",
          "provider": "provider address"
        },
        "returns": {
          "_0": "bills hash typed v4"
        }
      },
      "hashTypedDataV4ForRecharge(address,uint64,bytes32,uint256)": {
        "details": "return recharge hash typed v4",
        "params": {
          "account": "user account",
          "amount": "token amount",
          "nonce": "nonce",
          "provider": "provider address"
        },
        "returns": {
          "_0": "recharge hash typed v4"
        }
      },
      "initialize(address,address,address,address,address,string,string,string,string)": {
        "details": "proxy initialize function",
        "params": {
          "_providers": "providers contract address",
          "_token": "token address",
          "adaptor": "resource adaptor contract address",
          "billsTypes": "bills types",
          "name": "EIP712 domain name",
          "owner": "contract owner",
          "pauser": "contract pauser",
          "rechargeTypes": "recharge types",
          "version": "EIP712 domain version"
        }
      },
      "isPauser(address)": {
        "details": "whether the account is the contract pauser",
        "params": {
          "account": "address"
        },
        "returns": {
          "_0": "whether account is a pauser"
        }
      },
      "matchResourceToToken(uint256)": {
        "details": "match value to token decimals",
        "params": {
          "value": "resource value"
        },
        "returns": {
          "_0": "token value"
        }
      },
      "matchTokenToResource(uint256)": {
        "details": "match token amount to resource decimals",
        "params": {
          "value": "token amount with resource decimals"
        },
        "returns": {
          "_0": "resource value"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(address,bytes32)": {
        "details": "return owner of account",
        "params": {
          "account": "user account",
          "provider": "provider address"
        },
        "returns": {
          "_0": "owner wallet owner for account"
        }
      },
      "ownerWithdrawERC20(address,address,uint256)": {
        "details": "withdraw token",
        "params": {
          "to": "receiver address",
          "token": "token address",
          "value": "token value"
        }
      },
      "ownerWithdrawNative(address,uint256)": {
        "details": "withdraw ETH",
        "params": {
          "to": "receiver address",
          "value": "token value"
        }
      },
      "pause()": {
        "details": "pause the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "recharge(address,uint64,bytes32,uint256,bytes)": {
        "details": "recharge for account",
        "params": {
          "account": "user account",
          "amount": "token amount",
          "nonce": "nonce",
          "provider": "provider address",
          "signature": "provider signature"
        }
      },
      "rechargeHash(address,uint64,bytes32,uint256)": {
        "details": "return recharge typed hash",
        "params": {
          "account": "user account",
          "amount": "token amount",
          "nonce": "nonce",
          "provider": "provider address"
        },
        "returns": {
          "_0": "recharge typed hash"
        }
      },
      "removePauser(address)": {
        "details": "remove a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renouncePauser()": {
        "details": "remove a pauser for the contract"
      },
      "resourceDecimals()": {
        "details": "return resource decimals",
        "returns": {
          "_0": "resource decimals"
        }
      },
      "setBillsTypedHash(string)": {
        "details": "update bills typed hash",
        "params": {
          "types": "bills types"
        }
      },
      "setRechargeTypedHash(string)": {
        "details": "update recharge typed hash",
        "params": {
          "types": "recharge types"
        }
      },
      "setToken(address)": {
        "details": "update token",
        "params": {
          "_token": "token address"
        }
      },
      "spend(address,uint64,bytes32,bytes,uint256,bytes)": {
        "details": "spend bills for account",
        "params": {
          "account": "user account",
          "bills": "bills bytes",
          "expiration": "tx expiration",
          "fee": "bills fee",
          "nonce": "nonce",
          "provider": "provider address",
          "signature": "provider signature"
        }
      },
      "tokenDecimals()": {
        "details": "return token decimals",
        "returns": {
          "_0": "token decimals"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "transferWalletOwner(address,bytes32,address)": {
        "details": "transfer wallet owner for account",
        "params": {
          "account": "user account",
          "newOwner": "new wallet owner for account",
          "provider": "provider address"
        }
      },
      "unpause()": {
        "details": "unpause the contract"
      },
      "withdraw((address,uint64,bytes32,bytes,uint256),address,uint256,bytes)": {
        "details": "withdraw token for account",
        "params": {
          "amount": "token amount",
          "payload": "bill payload",
          "signature": "provider signature",
          "to": "token receiver"
        },
        "returns": {
          "fee": "bill fee"
        }
      }
    },
    "stateVariables": {
      "nonces": {
        "details": "provider nonces for account"
      },
      "rechargeTypedHash": {
        "details": "keccak256(\"Recharge(address provider,uint64 nonce,bytes32 account,uint256 amount)\")"
      },
      "wallets": {
        "details": "account wallet"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6287,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "token",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IERC20Upgradeable)462"
      },
      {
        "astId": 6990,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "providers",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IProviders)4281"
      },
      {
        "astId": 1670,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 1672,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 1810,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8636,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "billsTypedHash",
        "offset": 0,
        "slot": "54",
        "type": "t_bytes32"
      },
      {
        "astId": 8641,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "adaptor",
        "offset": 0,
        "slot": "55",
        "type": "t_contract(IResourceAdaptor)8596"
      },
      {
        "astId": 970,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "56",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_owner",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 235,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_paused",
        "offset": 0,
        "slot": "156",
        "type": "t_bool"
      },
      {
        "astId": 324,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3749,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "pausers",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 339,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_status",
        "offset": 0,
        "slot": "207",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9047,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "rechargeTypedHash",
        "offset": 0,
        "slot": "257",
        "type": "t_bytes32"
      },
      {
        "astId": 9057,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "nonces",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4031)))"
      },
      {
        "astId": 9065,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "wallets",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Wallet)4036_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)462": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IProviders)4281": {
        "encoding": "inplace",
        "label": "contract IProviders",
        "numberOfBytes": "20"
      },
      "t_contract(IResourceAdaptor)8596": {
        "encoding": "inplace",
        "label": "contract IResourceAdaptor",
        "numberOfBytes": "20"
      },
      "t_enum(Purpose)4031": {
        "encoding": "inplace",
        "label": "enum IFundWallet.Purpose",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4031)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(uint64 => enum IFundWallet.Purpose)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4031))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Wallet)4036_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct IFundWallet.Wallet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Wallet)4036_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4031))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint64 => enum IFundWallet.Purpose))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_enum(Purpose)4031)"
      },
      "t_mapping(t_bytes32,t_struct(Wallet)4036_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IFundWallet.Wallet)",
        "numberOfBytes": "32",
        "value": "t_struct(Wallet)4036_storage"
      },
      "t_mapping(t_uint64,t_enum(Purpose)4031)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => enum IFundWallet.Purpose)",
        "numberOfBytes": "32",
        "value": "t_enum(Purpose)4031"
      },
      "t_struct(Wallet)4036_storage": {
        "encoding": "inplace",
        "label": "struct IFundWallet.Wallet",
        "members": [
          {
            "astId": 4033,
            "contract": "contracts/wallets/FundWallet.sol:FundWallet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4035,
            "contract": "contracts/wallets/FundWallet.sol:FundWallet",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}