{
  "address": "0x31b1E81CBeFd7E5aA3abf7F461aAB4AdE54E1560",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "BillTypedHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Billing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Charge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "enum IFundWallet.Purpose",
          "name": "purpose",
          "type": "uint8"
        }
      ],
      "name": "NonceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "hash",
          "type": "bytes32"
        }
      ],
      "name": "RechargeTypedHashUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        }
      ],
      "name": "ResourceAdaptorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "Spend",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "WalletOwnerTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "adaptor",
      "outputs": [
        {
          "internalType": "contract IResourceAdaptor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        }
      ],
      "name": "billHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "billTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeBill",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "indexBlock",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ResourceData.ResourceType",
                      "name": "resourceType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBilling.BillEntry[]",
                  "name": "entries",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBilling.BillPayload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBilling.Bill",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "totalValue",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "indexBlock",
                  "type": "uint256"
                },
                {
                  "components": [
                    {
                      "internalType": "enum ResourceData.ResourceType",
                      "name": "resourceType",
                      "type": "uint8"
                    },
                    {
                      "internalType": "uint256",
                      "name": "amount",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct IBilling.BillEntry[]",
                  "name": "entries",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct IBilling.BillPayload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IBilling.Bill",
          "name": "bills",
          "type": "tuple"
        }
      ],
      "name": "encodeBill",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        }
      ],
      "name": "hashTypedDataV4ForBill",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "hashTypedDataV4ForRecharge",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IResourceAdaptor",
          "name": "adaptor",
          "type": "address"
        },
        {
          "internalType": "contract IProviders",
          "name": "_providers",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "version",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "rechargeTypes",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "billTypes",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "enum IFundWallet.Purpose",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providers",
      "outputs": [
        {
          "internalType": "contract IProviders",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "recharge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "rechargeHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rechargeTypedHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "setBillTypedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "types",
          "type": "string"
        }
      ],
      "name": "setRechargeTypedHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "spend",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "transferWalletOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "bill",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4bc73b3f0d627d5e904da17d6d96ce28889a54435d9022b52de3b378b8c692c0",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x31b1E81CBeFd7E5aA3abf7F461aAB4AdE54E1560",
    "transactionIndex": 6,
    "gasUsed": "3262198",
    "logsBloom": "0x
    "blockHash": "0xeb4370596c0b8170c70b829718ba90b03f4630ed05384c1e6c7b0442137f8ee4",
    "transactionHash": "0x4bc73b3f0d627d5e904da17d6d96ce28889a54435d9022b52de3b378b8c692c0",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 26274414,
        "transactionHash": "0x4bc73b3f0d627d5e904da17d6d96ce28889a54435d9022b52de3b378b8c692c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000c5926bd3686600000000000000000000000000000000000000000000000003b278925cb6d1c120000000000000000000000000000000000000000000000d6d356813caae73ced0000000000000000000000000000000000000000000000003b1b2fff0e3695b20000000000000000000000000000000000000000000000d6d362da63681dc34d",
        "logIndex": 21,
        "blockHash": "0xeb4370596c0b8170c70b829718ba90b03f4630ed05384c1e6c7b0442137f8ee4"
      }
    ],
    "blockNumber": 26274414,
    "cumulativeGasUsed": "3955272",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "254a47a637b69356b9c4b7a0a33b543a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"BillTypedHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Billing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Charge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"enum IFundWallet.Purpose\",\"name\":\"purpose\",\"type\":\"uint8\"}],\"name\":\"NonceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"hash\",\"type\":\"bytes32\"}],\"name\":\"RechargeTypedHashUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"}],\"name\":\"ResourceAdaptorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Spend\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"WalletOwnerTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"adaptor\",\"outputs\":[{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"}],\"name\":\"billHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"billTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeBill\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.BillEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.BillPayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.Bill\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"indexBlock\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"internalType\":\"struct IBilling.BillEntry[]\",\"name\":\"entries\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.BillPayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IBilling.Bill\",\"name\":\"bills\",\"type\":\"tuple\"}],\"name\":\"encodeBill\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"}],\"name\":\"hashTypedDataV4ForBill\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"hashTypedDataV4ForRecharge\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IResourceAdaptor\",\"name\":\"adaptor\",\"type\":\"address\"},{\"internalType\":\"contract IProviders\",\"name\":\"_providers\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rechargeTypes\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"billTypes\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"enum IFundWallet.Purpose\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"contract IProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"recharge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"rechargeHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rechargeTypedHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"setBillTypedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"types\",\"type\":\"string\"}],\"name\":\"setRechargeTypedHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"spend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"transferWalletOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"bill\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wallets/FundWallet.sol\":\"FundWallet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x6602a65e0277f31f45cad4c7a15b024fd182f2f0e01eaa1954103b0d57848a27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSAUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * _Available since v3.4._\\n */\\nabstract contract EIP712Upgradeable is Initializable {\\n    /* solhint-disable var-name-mixedcase */\\n    bytes32 private _HASHED_NAME;\\n    bytes32 private _HASHED_VERSION;\\n    bytes32 private constant _TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /* solhint-enable var-name-mixedcase */\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        _HASHED_NAME = hashedName;\\n        _HASHED_VERSION = hashedVersion;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\\n    }\\n\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\\n        return _HASHED_NAME;\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\\n        return _HASHED_VERSION;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb4132c3e4beb76a6c6b8c5931abecfc426bbd120d14f065d0cd1411675e88693\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\tfunction ownerWithdrawERC20(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\tfunction ownerWithdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'Payment: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x91f773098ab8e0d59ac381129cea676a148a5895581ce9e6e1d86b1c19415030\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\tmapping(address => bool) public pausers;\\n\\n\\tevent PauserAdded(address account);\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: Caller is not pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: Account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: Account is not pauser');\\n\\t\\tpausers[account] = false;\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc389407247a71425c067105ba1dbf04816e70f648e85f374a69b1cb72c40cb4c\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IBilling.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\nimport '../resources/interfaces/IResourceAdaptor.sol';\\nimport './IProvidersWrapper.sol';\\n\\ninterface IBilling is IProvidersWrapper {\\n\\tstruct BillEntry {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tstruct BillPayload {\\n\\t\\tuint256 indexBlock;\\n\\t\\tBillEntry[] entries;\\n\\t}\\n\\n\\tstruct Bill {\\n\\t\\tuint256 totalValue;\\n\\t\\tBillPayload[] payloads;\\n\\t}\\n\\n\\tevent BillTypedHashUpdated(bytes32 hash);\\n\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\tevent Billing(address provider, uint64 nonce, bytes32 account, bytes bill, uint256 amount);\\n\\n\\tfunction token() external view returns (IERC20Upgradeable);\\n\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n\\n}\\n\",\"keccak256\":\"0xa676df72dfbe7a97068f340df4b60f61236ef2ecbc8839508480358229c7b522\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IFundWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IBilling.sol';\\n\\ninterface IFundWallet is IBilling {\\n\\n\\tenum Purpose {\\n\\t\\tNull,\\n\\t\\tRecharge,\\n\\t\\tSpend,\\n\\t\\tWithdraw\\n\\t}\\n\\n\\tstruct Wallet {\\n\\t\\taddress owner;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\tevent RechargeTypedHashUpdated(bytes32 hash);\\n\\n\\tevent NonceUpdated(address provider, bytes32 account, uint64 nonce, Purpose purpose);\\n\\n\\tevent WalletOwnerTransferred(address provider, bytes32 account, address newOwner);\\n\\n\\tevent Charge(address provider, uint64 nonce, address owner, bytes32 account, uint256 amount);\\n\\n\\tevent Spend(address provider, uint64 nonce, bytes32 account, uint256 fee);\\n\\n\\tevent Withdrawn(address provider, uint64 nonce, bytes32 account, address to, uint256 amount);\\n\\n\\tfunction ownerOf(address provider, bytes32 account) external view returns (address);\\n\\n\\tfunction transferWalletOwner(address provider, bytes32 account, address newOwner, bytes memory signature) external;\\n\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external;\\n\\n\\tfunction withdraw(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\taddress to,\\n\\t\\tbytes memory billMessage,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256);\\n\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) external returns (uint256 fee);\\n\\n}\\n\",\"keccak256\":\"0x2a55fcd360dcef693bfe455aa6717d490f699a7640c547f4afab03aba2f47947\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\ninterface IProviders {\\n\\tevent ProviderUpdated(address provider, address wallet);\\n\\n\\tevent RemoveProvider(address provider);\\n\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\tfunction wallets(address provider) external view returns (address);\\n\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0xfe5c997043f05e2b105bbbfe9d006d7f2d0049f20ba6b2b74cc397cc65be2f77\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IProviders.sol';\\n\\ninterface IProvidersWrapper {\\n\\tevent ProvidersUpdated(IProviders providers);\\n\\n\\tfunction providers() external view returns (IProviders);\\n}\\n\",\"keccak256\":\"0x1d2ca264ab54ad537468faa0deb6ec04ec367fc013b31ed20debe31842eae560\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/providers/ProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '../access/Pauser.sol';\\nimport '../interfaces/IProvidersWrapper.sol';\\n\\nabstract contract ProvidersWrapper is IProvidersWrapper, Pauser {\\n\\tIProviders public override providers;\\n\\n\\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\\n\\t\\t_setProviders(_providers);\\n\\t}\\n\\n\\tfunction _setProviders(IProviders _providers) internal {\\n\\t\\tproviders = _providers;\\n\\t\\temit ProvidersUpdated(_providers);\\n\\t}\\n}\\n\",\"keccak256\":\"0x42a8d8694c5b5f3858788b270b57660ce7c14a1abef3e8a534fa985d78e41391\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\ninterface IResourceAdaptor {\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf60bb837ce179f97f69cc642ef0b775cc58c952824869b89df3d29729133b738\",\"license\":\"UNLICENSE\"},\"contracts/wallets/Billing.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol';\\n\\nimport '../providers/ProvidersWrapper.sol';\\nimport '../interfaces/IBilling.sol';\\nimport '../resources/interfaces/IResourceAdaptor.sol';\\n\\nabstract contract Billing is IBilling, ProvidersWrapper, EIP712Upgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tstruct SpendPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tbytes bill;\\n\\t\\tbytes signature;\\n\\t}\\n\\n\\tbytes32 public billTypedHash;\\n\\n\\tIERC20Upgradeable public override token;\\n\\n\\tIResourceAdaptor public override adaptor;\\n\\n\\tfunction __Init_Bill_Typed_Hash(string memory types) internal onlyInitializing {\\n\\t\\t_setBillTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction __Init_Resource_Adaptor(IResourceAdaptor _adaptor) internal onlyInitializing {\\n\\t\\t_setResourceAdaptor(_adaptor);\\n\\t}\\n\\n\\tfunction _setToken(IERC20Upgradeable _token) internal {\\n\\t\\ttoken = _token;\\n\\t\\temit TokenUpdated(_token);\\n\\t}\\n\\n\\tfunction _setResourceAdaptor(IResourceAdaptor _adaptor) internal {\\n\\t\\tadaptor = _adaptor;\\n\\t\\temit ResourceAdaptorUpdated(_adaptor);\\n\\t}\\n\\n\\tfunction _spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) internal returns (uint256 amount) {\\n\\t\\trequire(providers.isProvider(msg.sender), 'Billing: caller is not a provider');\\n\\t\\tbytes32 hash = hashTypedDataV4ForBill(provider, nonce, account, bill);\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'Billing: invalid signature');\\n\\t\\tif (bill.length > 0) {\\n\\t\\t\\tuint256 balance = balanceOf(provider, account);\\n\\t\\t\\tamount = matchTokenDecimals(_validateBill(bill));\\n\\t\\t\\trequire(balance >= amount, 'Billing: insufficient balance');\\n\\t\\t\\ttoken.safeTransfer(providers.wallets(provider), amount);\\n\\t\\t}\\n\\t\\temit Billing(provider, nonce, account, bill, amount);\\n\\t}\\n\\n\\tfunction billHash(\\n\\t\\taddress provider, \\n\\t\\tuint64 nonce, \\n\\t\\tbytes32 account, \\n\\t\\tbytes memory bill\\n\\t) public view returns(bytes32) {\\n\\t\\treturn keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\tbillTypedHash,\\n\\t\\t\\t\\tprovider,\\n\\t\\t\\t\\tnonce,\\n\\t\\t\\t\\taccount,\\n\\t\\t\\t\\tkeccak256(bill)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction hashTypedDataV4ForBill(\\n\\t\\taddress provider, \\n\\t\\tuint64 nonce, \\n\\t\\tbytes32 account, \\n\\t\\tbytes memory bill\\n\\t) public view returns(bytes32) {\\n\\t\\treturn _hashTypedDataV4(billHash(provider, nonce, account, bill));\\n\\t}\\n\\n\\tfunction _validateBill(bytes memory bill) internal view returns (uint256 value) {\\n\\t\\tBill memory bills = abi.decode(bill, (Bill));\\n\\t\\trequire(bills.payloads.length > 0, 'Billing: empty bill payloads');\\n\\t\\tfor (uint256 i = 0; i < bills.payloads.length; i++) {\\n\\t\\t\\tBillPayload memory payload = bills.payloads[i];\\n\\t\\t\\trequire(payload.entries.length > 0, 'Billing: empty bill payload entry');\\n\\t\\t\\tfor (uint256 j = 0; j < payload.entries.length; j++) {\\n\\t\\t\\t\\tBillEntry memory entry = payload.entries[i];\\n\\t\\t\\t\\tuint256 billing = adaptor.getValueAt(entry.resourceType, entry.amount, payload.indexBlock);\\n\\t\\t\\t\\tvalue = value.add(billing);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\trequire(value == bills.totalValue, 'Billing: invalid bill');\\n\\t}\\n\\n\\tfunction balanceOf(address provider, bytes32 account) public view virtual returns (uint256);\\n\\n\\tfunction encodeBill(Bill memory bills) external pure returns (bytes memory) {\\n\\t\\treturn abi.encode(bills);\\n\\t}\\n\\n\\tfunction decodeBill(bytes memory message) external pure returns (Bill memory) {\\n\\t\\treturn abi.decode(message, (Bill));\\n\\t}\\n\\n\\tfunction _setBillTypedHash(bytes32 hash) internal {\\n\\t\\tbillTypedHash = hash;\\n\\t\\temit BillTypedHashUpdated(hash);\\n\\t}\\n\\n\\tfunction matchTokenDecimals(uint256 amount) internal view returns (uint256 value) {\\n\\t\\treturn amount.div(10**12);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x56f1c4e74b39cdfd2a8f2880fadda798d3eb488b5325f342cbf3f6022d7feac0\",\"license\":\"UNLICENSE\"},\"contracts/wallets/FundWallet.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\nimport './Billing.sol';\\nimport '../interfaces/IFundWallet.sol';\\nimport '../access/OwnerWithdrawable.sol';\\n\\ncontract FundWallet is IFundWallet, Billing, OwnerWithdrawable, ReentrancyGuardUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\tbytes32 public rechargeTypedHash;\\n\\n\\tmapping(address => mapping(bytes32 => mapping(uint64 => Purpose))) public nonces;\\n\\n\\tmapping(address => mapping(bytes32 => Wallet)) internal wallets;\\n\\n\\tmodifier onlyWalletOwner(address provider, bytes32 account) {\\n\\t\\trequire(wallets[provider][account].owner == msg.sender, 'FundWallet: caller is not wallet owner');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier nonNonce(address provider, bytes32 account, uint64 nonce) {\\n\\t\\trequire(nonces[provider][account][nonce] == Purpose.Null, 'FundWallet: invalid nonce');\\n\\t\\t_;\\n\\t}\\n\\n\\tconstructor() initializer {}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIResourceAdaptor adaptor,\\n\\t\\tIProviders _providers,\\n\\t\\tIERC20Upgradeable _token,\\n\\t\\tstring memory name,\\n\\t\\tstring memory version,\\n\\t\\tstring memory rechargeTypes,\\n\\t\\tstring memory billTypes\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Providers(_providers);\\n\\t\\t__Init_Resource_Adaptor(adaptor);\\n\\t\\t__Init_Token(_token);\\n\\t\\t__EIP712_init(name, version);\\n\\t\\t__Init_Recharge_Typed_Hash(rechargeTypes);\\n\\t\\t__Init_Bill_Typed_Hash(billTypes);\\n\\t}\\n\\n\\tfunction __Init_Recharge_Typed_Hash(string memory types) internal onlyInitializing {\\n\\t\\t_setRechargeTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction recharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) whenNotPaused nonReentrant {\\n\\t\\trequire(amount > 0, 'FundWallet: zero amount');\\n\\t\\tbytes32 hash = hashTypedDataV4ForRecharge(provider, nonce, owner, account, amount);\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\\n\\t\\tif (wallets[provider][account].owner == address(0)) {\\n\\t\\t\\twallets[provider][account].owner = owner;\\n\\t\\t}\\n\\t\\twallets[provider][account].amount = wallets[provider][account].amount.add(amount);\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Recharge);\\n\\t\\temit Charge(provider, nonce, owner, account, amount);\\n\\t}\\n\\n\\tfunction spend(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) whenNotPaused nonReentrant returns (uint256 fee) {\\n\\t\\tfee = _spend(provider, nonce, account, bill, signature);\\n\\t\\twallets[provider][account].amount = wallets[provider][account].amount.sub(fee);\\n\\t\\t_updateNonce(provider, account, nonce, Purpose.Spend);\\n\\n\\t\\temit Spend(provider, nonce, account, fee);\\n\\t}\\n\\n\\tfunction withdraw(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\tbytes32 account,\\n\\t\\taddress to,\\n\\t\\tbytes memory bill,\\n\\t\\tbytes memory signature\\n\\t) external override nonNonce(provider, account, nonce) onlyWalletOwner(provider, account) whenNotPaused nonReentrant returns (uint256 amount) {\\n\\t\\taddress p = provider;\\n\\t\\tuint256 fee = _spend(p, nonce, account, bill, signature);\\n\\t\\tamount = wallets[p][account].amount.sub(fee);\\n\\t\\twallets[p][account].amount = 0;\\n\\t\\ttoken.safeTransfer(to, amount);\\n\\t\\t_updateNonce(p, account, nonce, Purpose.Withdraw);\\n\\n\\t\\temit Withdrawn(p, nonce, account, to, amount);\\n\\t}\\n\\n\\tfunction transferWalletOwner(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\taddress newOwner,\\n\\t\\tbytes memory signature\\n\\t) external override whenNotPaused onlyWalletOwner(provider, account) {\\n\\t\\tbytes32 hash = keccak256(abi.encodePacked(provider, newOwner, account));\\n\\t\\trequire(providers.isValidSignature(provider, hash, signature), 'FundWallet: invalid signature');\\n\\t\\twallets[provider][account].owner = newOwner;\\n\\n\\t\\temit WalletOwnerTransferred(provider, account, newOwner);\\n\\t}\\n\\n\\tfunction ownerOf(address provider, bytes32 account) public view override returns (address) {\\n\\t\\treturn wallets[provider][account].owner;\\n\\t}\\n\\n\\tfunction balanceOf(address provider, bytes32 account) public view override returns (uint256) {\\n\\t\\treturn wallets[provider][account].amount;\\n\\t}\\n\\n\\tfunction setRechargeTypedHash(string memory types) external onlyOwner {\\n\\t\\t_setRechargeTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction setBillTypedHash(string memory types) external onlyOwner {\\n\\t\\t_setBillTypedHash(keccak256(bytes(types)));\\n\\t}\\n\\n\\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction rechargeHash(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn keccak256(abi.encode(rechargeTypedHash, provider, nonce, owner, account, amount));\\n\\t}\\n\\n\\tfunction hashTypedDataV4ForRecharge(\\n\\t\\taddress provider,\\n\\t\\tuint64 nonce,\\n\\t\\taddress owner,\\n\\t\\tbytes32 account,\\n\\t\\tuint256 amount\\n\\t) public view returns (bytes32) {\\n\\t\\treturn _hashTypedDataV4(rechargeHash(provider, nonce, owner, account, amount));\\n\\t}\\n\\n\\tfunction _setRechargeTypedHash(bytes32 hash) internal {\\n\\t\\trechargeTypedHash = hash;\\n\\t\\temit RechargeTypedHashUpdated(hash);\\n\\t}\\n\\n\\tfunction _updateNonce(address provider, bytes32 account, uint64 nonce, Purpose purpose) internal {\\n\\t\\tnonces[provider][account][nonce] = purpose;\\n\\n\\t\\temit NonceUpdated(provider, account, nonce, purpose);\\n\\t}\\n}\\n\",\"keccak256\":\"0x099fe13257e14dc12e5526a8d0f584a1fd1ba470864ffe91fcefe313ec74ee6f\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102115760003560e01c806382dc1ec411610125578063d5ed04b6116100ad578063f2fde38b1161007c578063f2fde38b146104e6578063f8401fe6146104f9578063f960ff0b1461050c578063fc0c546a1461051f578063fc173ad21461053257600080fd5b8063d5ed04b61461047f578063da66bd6714610492578063ddc5517e146104c9578063e7356a07146104dc57600080fd5b806393563a95116100f457806393563a9514610410578063a50d817d14610423578063c2cd9b2b14610436578063c47ca60314610456578063d29ed85e1461047657600080fd5b806382dc1ec4146103c85780638456cb59146103db5780638da5cb5b146103e3578063924bf9a7146103fd57600080fd5b80635c975abb116101a85780636ef8d66d116101775780636ef8d66d1461036f578063715018a6146103775780637acc238b1461037f5780637dc186cd1461039257806380f51c12146103a557600080fd5b80635c975abb1461032b578063699256f4146103365780636b2c0f55146103495780636d9d0ae11461035c57600080fd5b8063474902a2116101e4578063474902a21461027c5780634bf1fcda1461029c5780634d30b6be146102de5780635a4c1a201461031857600080fd5b8063144fa6d7146102165780633f4ba83a1461022b578063453866001461023357806346fbf68e1461025c575b600080fd5b610229610224366004611f9b565b610545565b005b610229610584565b6102466102413660046120b5565b6105b3565b6040516102539190612286565b60405180910390f35b61026f61026a3660046122ab565b6105e2565b60405161025391906122d4565b61028f61028a36600461230d565b610600565b60405161025391906123cb565b6102d16102aa3660046123d9565b61010360209081526000938452604080852082529284528284209052825290205460ff1681565b6040516102539190612457565b61028f6102ec366004612465565b6001600160a01b0391909116600090815261010460209081526040808320938352929052206001015490565b6102296103263660046124a2565b610838565b60655460ff1661026f565b610229610344366004612465565b610aef565b6102296103573660046122ab565b610b9d565b61022961036a3660046120b5565b610bd0565b610229610c0a565b610229610c13565b61022961038d3660046120b5565b610c47565b6102296103a036600461250e565b610c81565b61026f6103b33660046122ab565b60976020526000908152604090205460ff1681565b6102296103d63660046122ab565b610e3d565b610229610e70565b6033546001600160a01b03165b6040516102539190612595565b61028f61040b3660046125a3565b610e9d565b61022961041e3660046125ea565b610ebe565b61028f610431366004612630565b610f2f565b60cf54610449906001600160a01b031681565b60405161025391906126f0565b610469610464366004612945565b6110ac565b60405161025391906129dd565b61028f60cd5481565b61028f61048d3660046125a3565b6110d5565b6103f06104a0366004612465565b6001600160a01b0391821660009081526101046020908152604080832093835292905220541690565b6102296104d73660046129ee565b611119565b61028f6101025481565b6102296104f43660046122ab565b6111dd565b609854610449906001600160a01b031681565b61028f61051a366004612b1d565b611236565b60ce54610449906001600160a01b031681565b61028f610540366004612b1d565b611254565b6033546001600160a01b031633146105785760405162461bcd60e51b815260040161056f90612bbd565b60405180910390fd5b610581816112a4565b50565b61058d336105e2565b6105a95760405162461bcd60e51b815260040161056f90612c01565b6105b16112fa565b565b604080518082019091526000815260606020820152818060200190518101906105dc9190612e1d565b92915050565b6001600160a01b031660009081526097602052604090205460ff1690565b6000868587836001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610650576106506120f7565b1461066d5760405162461bcd60e51b815260040161056f90612e8b565b6001600160a01b03808b166000908152610104602090815260408083208c84529091529020548b918a911633146106b65760405162461bcd60e51b815260040161056f90612ee1565b60655460ff16156106d95760405162461bcd60e51b815260040161056f90612f18565b600260d05414156106fc5760405162461bcd60e51b815260040161056f90612f5c565b600260d0558b6000610711828e8e8d8d611360565b9050610760816101046000856001600160a01b03166001600160a01b0316815260200190815260200160002060008f8152602001908152602001600020600101546115f090919063ffffffff16565b975060006101046000846001600160a01b03166001600160a01b0316815260200190815260200160002060008e8152602001908152602001600020600101819055506107d58b8960ce60009054906101000a90046001600160a01b03166001600160a01b03166116039092919063ffffffff16565b6107e2828d8f600361165e565b7f26b8aa9e5d4f71b867c84264e57eab543daba6bf03a6ac7c3be51697b5132f70828e8e8e8c604051610819959493929190612f7b565b60405180910390a15050600160d05550939a9950505050505050505050565b85838660006001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610887576108876120f7565b146108a45760405162461bcd60e51b815260040161056f90612e8b565b60655460ff16156108c75760405162461bcd60e51b815260040161056f90612f18565b600260d05414156108ea5760405162461bcd60e51b815260040161056f90612f5c565b600260d0558461090c5760405162461bcd60e51b815260040161056f90612ffb565b600061091b8a8a8a8a8a611236565b6098546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e90610950908d9085908a9060040161300b565b602060405180830381600087803b15801561096a57600080fd5b505af115801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a2919061304b565b6109be5760405162461bcd60e51b815260040161056f906130a0565b6001600160a01b038a81166000908152610104602090815260408083208b845290915290205416610a24576001600160a01b038a81166000908152610104602090815260408083208b8452909152902080546001600160a01b031916918a169190911790555b6001600160a01b038a166000908152610104602090815260408083208a8452909152902060010154610a5690876116f8565b6001600160a01b03808c166000908152610104602090815260408083208c845290915290206001019190915560ce54610a929116333089611704565b610a9f8a888b600161165e565b7f21fb7d7ead2d8cc1ee15ffa7f67fd957c51ab1c3576a96207d3d2784b6dbe0328a8a8a8a8a604051610ad69594939291906130b0565b60405180910390a15050600160d0555050505050505050565b6033546001600160a01b03163314610b195760405162461bcd60e51b815260040161056f90612bbd565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f19350505050905080610b5f5760405162461bcd60e51b815260040161056f90613127565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e48278383604051610b90929190613137565b60405180910390a1505050565b6033546001600160a01b03163314610bc75760405162461bcd60e51b815260040161056f90612bbd565b6105818161172b565b6033546001600160a01b03163314610bfa5760405162461bcd60e51b815260040161056f90612bbd565b61058181805190602001206117a0565b6105b13361172b565b6033546001600160a01b03163314610c3d5760405162461bcd60e51b815260040161056f90612bbd565b6105b160006117d5565b6033546001600160a01b03163314610c715760405162461bcd60e51b815260040161056f90612bbd565b6105818180519060200120611827565b60655460ff1615610ca45760405162461bcd60e51b815260040161056f90612f18565b6001600160a01b0380851660009081526101046020908152604080832087845290915290205485918591163314610ced5760405162461bcd60e51b815260040161056f90612ee1565b6000868587604051602001610d0493929190613180565b60408051601f198184030181529082905280516020909101206098546311c5268f60e11b83529092506001600160a01b03169063238a4d1e90610d4f908a908590899060040161300b565b602060405180830381600087803b158015610d6957600080fd5b505af1158015610d7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610da1919061304b565b610dbd5760405162461bcd60e51b815260040161056f906130a0565b6001600160a01b038781166000908152610104602090815260408083208a84529091529081902080546001600160a01b03191692881692909217909155517f4ddee4675a37f5c882a56b9be609ea55023c460cafb24ab74c1cb024abc84b3b90610e2c908990899089906131b7565b60405180910390a150505050505050565b6033546001600160a01b03163314610e675760405162461bcd60e51b815260040161056f90612bbd565b6105818161185d565b610e79336105e2565b610e955760405162461bcd60e51b815260040161056f90612c01565b6105b16118d6565b6000610eb3610eae868686866110d5565b61192e565b90505b949350505050565b6033546001600160a01b03163314610ee85760405162461bcd60e51b815260040161056f90612bbd565b610efc6001600160a01b0384168383611603565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b6398838383604051610b90939291906131df565b6000858486836001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b038616845290915290205460ff166003811115610f7f57610f7f6120f7565b14610f9c5760405162461bcd60e51b815260040161056f90612e8b565b60655460ff1615610fbf5760405162461bcd60e51b815260040161056f90612f18565b600260d0541415610fe25760405162461bcd60e51b815260040161056f90612f5c565b600260d055610ff48989898989611360565b6001600160a01b038a166000908152610104602090815260408083208b845290915290206001015490945061102990856115f0565b6001600160a01b038a166000908152610104602090815260408083208b845290915290206001015561105e89888a600261165e565b7ff87a79acd45d3f401d9b7ff78e67a64bbe1d2cfa30bb106f0eba621b4f28053f898989876040516110939493929190613207565b60405180910390a15050600160d0555095945050505050565b6060816040516020016110bf9190612286565b6040516020818303038152906040529050919050565b600060cd5485858585805190602001206040516020016110f995949392919061323c565b604051602081830303815290604052805190602001209050949350505050565b600054610100900460ff166111345760005460ff1615611138565b303b155b6111545760405162461bcd60e51b815260040161056f906132af565b600054610100900460ff16158015611176576000805461ffff19166101011790555b61117f8a6117d5565b61118889611941565b61119187611968565b61119a88611998565b6111a3866119c8565b6111ad85856119ef565b6111b683611a24565b6111bf82611a4b565b80156111d1576000805461ff00191690555b50505050505050505050565b6033546001600160a01b031633146112075760405162461bcd60e51b815260040161056f90612bbd565b6001600160a01b03811661122d5760405162461bcd60e51b815260040161056f90613302565b610581816117d5565b6000611248610eae8787878787611254565b90505b95945050505050565b600061010254868686868660405160200161127496959493929190613312565b60405160208183030381529060405280519060200120905095945050505050565b6001600160a01b03163b151590565b60ce80546001600160a01b0319166001600160a01b0383161790556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e30906112ef9083906126f0565b60405180910390a150565b60655460ff1661131c5760405162461bcd60e51b815260040161056f9061338c565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516113569190612595565b60405180910390a1565b609854604051636b074a0760e01b81526000916001600160a01b031690636b074a0790611391903390600401612595565b60206040518083038186803b1580156113a957600080fd5b505afa1580156113bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e1919061304b565b6113fd5760405162461bcd60e51b815260040161056f906133da565b600061140b87878787610e9d565b6098546040516311c5268f60e11b81529192506001600160a01b03169063238a4d1e90611440908a908590889060040161300b565b602060405180830381600087803b15801561145a57600080fd5b505af115801561146e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611492919061304b565b6114ae5760405162461bcd60e51b815260040161056f9061341e565b8351156115a7576001600160a01b0387166000908152610104602090815260408083208884529091529020600101546114ee6114e986611a72565b611c2a565b9250828110156115105760405162461bcd60e51b815260040161056f90613462565b6098546040516389b08f1160e01b81526115a5916001600160a01b0316906389b08f1190611542908c90600401612595565b60206040518083038186803b15801561155a57600080fd5b505afa15801561156e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611592919061347d565b60ce546001600160a01b03169085611603565b505b7f086575d4de5bb5f0addd08773b7097a00aaa37120293013f54da4433812adfa787878787866040516115de95949392919061349e565b60405180910390a15095945050505050565b60006115fc82846134fd565b9392505050565b6116598363a9059cbb60e01b8484604051602401611622929190613514565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611c3b565b505050565b6001600160a01b03841660009081526101036020908152604080832086845282528083206001600160401b03861684529091529020805482919060ff191660018360038111156116b0576116b06120f7565b02179055507fc4f15e84da288f27234e3626e64c8035b984fd65cee49fcd86b4910de1d13e7c848484846040516116ea9493929190613522565b60405180910390a150505050565b60006115fc8284613557565b611725846323b872dd60e01b8585856040516024016116229392919061356f565b50505050565b611734816105e2565b6117505760405162461bcd60e51b815260040161056f906135b1565b6001600160a01b03811660009081526097602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e906112ef908390612595565b60cd8190556040517f44e8ce8f81d5513d3e950d9a75224f8ff590d2687c88df09ffc509671aa670a1906112ef9083906123cb565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6101028190556040517f921d5c4a3c33eaff9e0f2fee28d7dd04f45183c3070cc30adfd5d90be5154699906112ef9083906123cb565b611866816105e2565b156118835760405162461bcd60e51b815260040161056f906135ff565b6001600160a01b03811660009081526097602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f8906112ef908390612595565b60655460ff16156118f95760405162461bcd60e51b815260040161056f90612f18565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113493390565b60006105dc61193b611cca565b83611d06565b600054610100900460ff16610e675760405162461bcd60e51b815260040161056f90613657565b600054610100900460ff1661198f5760405162461bcd60e51b815260040161056f90613657565b61058181611d39565b600054610100900460ff166119bf5760405162461bcd60e51b815260040161056f90613657565b61058181611d84565b600054610100900460ff166105785760405162461bcd60e51b815260040161056f90613657565b600054610100900460ff16611a165760405162461bcd60e51b815260040161056f90613657565b611a208282611dcf565b5050565b600054610100900460ff16610c715760405162461bcd60e51b815260040161056f90613657565b600054610100900460ff16610bfa5760405162461bcd60e51b815260040161056f90613657565b60008082806020019051810190611a899190612e1d565b9050600081602001515111611ab05760405162461bcd60e51b815260040161056f9061369b565b60005b816020015151811015611c0357600082602001518281518110611ad857611ad86136ab565b60200260200101519050600081602001515111611b075760405162461bcd60e51b815260040161056f906136ff565b60005b816020015151811015611bee57600082602001518481518110611b2f57611b2f6136ab565b60209081029190910181015160cf5481519282015186516040516354bf93b960e11b81529395506000946001600160a01b039093169363a97f277293611b7b939092909160040161370f565b60206040518083038186803b158015611b9357600080fd5b505afa158015611ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcb919061372a565b9050611bd787826116f8565b965050508080611be69061374b565b915050611b0a565b50508080611bfb9061374b565b915050611ab3565b5080518214611c245760405162461bcd60e51b815260040161056f90613792565b50919050565b60006105dc8264e8d4a51000611e10565b6000611c90826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611e1c9092919063ffffffff16565b8051909150156116595780806020019051810190611cae919061304b565b6116595760405162461bcd60e51b815260040161056f906137e9565b6000611d017f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f611cf960995490565b609a54611e2b565b905090565b60008282604051602001611d1b9291906137f9565b60405160208183030381529060405280519060200120905092915050565b609880546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c5284906112ef9083906126f0565b60cf80546001600160a01b0319166001600160a01b0383161790556040517fcb398744d70dd9f7eb9e1e65c9c74f4d3276143240e25316135eb6585db6c1c1906112ef9083906126f0565b600054610100900460ff16611df65760405162461bcd60e51b815260040161056f90613657565b815160209283012081519190920120609991909155609a55565b60006115fc8284613840565b6060610eb68484600085611e65565b60008383834630604051602001611e46959493929190613854565b6040516020818303038152906040528051906020012090509392505050565b606082471015611e875760405162461bcd60e51b815260040161056f906138d9565b6001600160a01b0385163b611eae5760405162461bcd60e51b815260040161056f9061391d565b600080866001600160a01b03168587604051611eca919061394f565b60006040518083038185875af1925050503d8060008114611f07576040519150601f19603f3d011682016040523d82523d6000602084013e611f0c565b606091505b5091509150611f1c828286611f27565b979650505050505050565b60608315611f365750816115fc565b825115611f465782518084602001fd5b8160405162461bcd60e51b815260040161056f91906129dd565b60006001600160a01b0382166105dc565b60006105dc82611f60565b611f8581611f71565b811461058157600080fd5b80356105dc81611f7c565b600060208284031215611fb057611fb0600080fd5b6000610eb68484611f90565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611ff757611ff7611fbc565b6040525050565b600061200960405190565b90506120158282611fd2565b919050565b60006001600160401b0382111561203357612033611fbc565b601f19601f83011660200192915050565b82818337506000910152565b600061206361205e8461201a565b611ffe565b90508281526020810184848401111561207e5761207e600080fd5b612089848285612044565b509392505050565b600082601f8301126120a5576120a5600080fd5b8135610eb6848260208601612050565b6000602082840312156120ca576120ca600080fd5b81356001600160401b038111156120e3576120e3600080fd5b610eb684828501612091565b805b82525050565b634e487b7160e01b600052602160045260246000fd5b60058110610581576105816120f7565b806120158161210d565b60006105dc8261211d565b6120f181612127565b8051604083019061214c8482612132565b50602082015161172560208501826120ef565b600061216b838361213b565b505060400190565b600061217d825190565b80845260209384019383018060005b838110156121b15781516121a0888261215f565b97506020830192505060010161218c565b509495945050505050565b805160009060408401906121d085826120ef565b506020830151848203602086015261124b8282612173565b60006115fc83836121bc565b60006121fe825190565b808452602084019350836020820285016122188560200190565b8060005b8581101561224d578484038952815161223585826121e8565b94506020830160209a909a019992505060010161221c565b5091979650505050505050565b8051600090604084019061226e85826120ef565b506020830151848203602086015261124b82826121f4565b602080825281016115fc818461225a565b611f8581611f60565b80356105dc81612297565b6000602082840312156122c0576122c0600080fd5b6000610eb684846122a0565b8015156120f1565b602081016105dc82846122cc565b6001600160401b038116611f85565b80356105dc816122e2565b80611f85565b80356105dc816122fc565b60008060008060008060c0878903121561232957612329600080fd5b600061233589896122a0565b965050602061234689828a016122f1565b955050604061235789828a01612302565b945050606061236889828a016122a0565b93505060808701356001600160401b0381111561238757612387600080fd5b61239389828a01612091565b92505060a08701356001600160401b038111156123b2576123b2600080fd5b6123be89828a01612091565b9150509295509295509295565b602081016105dc82846120ef565b6000806000606084860312156123f1576123f1600080fd5b60006123fd86866122a0565b935050602061240e86828701612302565b925050604061241f868287016122f1565b9150509250925092565b60048110610581576105816120f7565b8061201581612429565b60006105dc82612439565b6120f181612443565b602081016105dc828461244e565b6000806040838503121561247b5761247b600080fd5b600061248785856122a0565b925050602061249885828601612302565b9150509250929050565b60008060008060008060c087890312156124be576124be600080fd5b60006124ca89896122a0565b96505060206124db89828a016122f1565b95505060406124ec89828a016122a0565b94505060606124fd89828a01612302565b935050608061239389828a01612302565b6000806000806080858703121561252757612527600080fd5b600061253387876122a0565b945050602061254487828801612302565b9350506040612555878288016122a0565b92505060608501356001600160401b0381111561257457612574600080fd5b61258087828801612091565b91505092959194509250565b6120f181611f60565b602081016105dc828461258c565b600080600080608085870312156125bc576125bc600080fd5b60006125c887876122a0565b94505060206125d9878288016122f1565b935050604061255587828801612302565b60008060006060848603121561260257612602600080fd5b600061260e8686611f90565b935050602061261f868287016122a0565b925050604061241f86828701612302565b600080600080600060a0868803121561264b5761264b600080fd5b600061265788886122a0565b9550506020612668888289016122f1565b945050604061267988828901612302565b93505060608601356001600160401b0381111561269857612698600080fd5b6126a488828901612091565b92505060808601356001600160401b038111156126c3576126c3600080fd5b6126cf88828901612091565b9150509295509295909350565b60006105dc82611f71565b6120f1816126dc565b602081016105dc82846126e7565b60006001600160401b0382111561271757612717611fbc565b5060209081020190565b6005811061058157600080fd5b80356105dc81612721565b60006040828403121561274e5761274e600080fd5b6127586040611ffe565b90506000612766848461272e565b825250602061277784848301612302565b60208301525092915050565b600061279161205e846126fe565b838152905060208101604084028301858111156127b0576127b0600080fd5b835b818110156127d657806127c58882612739565b8452506020909201916040016127b2565b5050509392505050565b600082601f8301126127f4576127f4600080fd5b8135610eb6848260208601612783565b60006040828403121561281957612819600080fd5b6128236040611ffe565b905060006128318484612302565b82525060208201356001600160401b0381111561285057612850600080fd5b612777848285016127e0565b600061286a61205e846126fe565b8381529050602080820190840283018581111561288957612889600080fd5b835b818110156127d65780356001600160401b038111156128ac576128ac600080fd5b8086016128b98982612804565b855250506020928301920161288b565b600082601f8301126128dd576128dd600080fd5b8135610eb684826020860161285c565b60006040828403121561290257612902600080fd5b61290c6040611ffe565b9050600061291a8484612302565b82525060208201356001600160401b0381111561293957612939600080fd5b612777848285016128c9565b60006020828403121561295a5761295a600080fd5b81356001600160401b0381111561297357612973600080fd5b610eb6848285016128ed565b60005b8381101561299a578181015183820152602001612982565b838111156117255750506000910152565b60006129b5825190565b8084526020840193506129cc81856020860161297f565b601f01601f19169290920192915050565b602080825281016115fc81846129ab565b60008060008060008060008060006101208a8c031215612a1057612a10600080fd5b6000612a1c8c8c6122a0565b9950506020612a2d8c828d016122a0565b9850506040612a3e8c828d01611f90565b9750506060612a4f8c828d01611f90565b9650506080612a608c828d01611f90565b95505060a08a01356001600160401b03811115612a7f57612a7f600080fd5b612a8b8c828d01612091565b94505060c08a01356001600160401b03811115612aaa57612aaa600080fd5b612ab68c828d01612091565b93505060e08a01356001600160401b03811115612ad557612ad5600080fd5b612ae18c828d01612091565b9250506101008a01356001600160401b03811115612b0157612b01600080fd5b612b0d8c828d01612091565b9150509295985092959850929598565b600080600080600060a08688031215612b3857612b38600080fd5b6000612b4488886122a0565b9550506020612b55888289016122f1565b9450506040612b66888289016122a0565b9350506060612b7788828901612302565b92505060806126cf88828901612302565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016105dc81612b88565b601c81526000602082017f5061757365723a2043616c6c6572206973206e6f74207061757365720000000081529150612bb6565b602080825281016105dc81612bcd565b80516105dc816122fc565b80516105dc81612721565b600060408284031215612c3c57612c3c600080fd5b612c466040611ffe565b90506000612c548484612c1c565b825250602061277784848301612c11565b6000612c7361205e846126fe565b83815290506020810160408402830185811115612c9257612c92600080fd5b835b818110156127d65780612ca78882612c27565b845250602090920191604001612c94565b600082601f830112612ccc57612ccc600080fd5b8151610eb6848260208601612c65565b600060408284031215612cf157612cf1600080fd5b612cfb6040611ffe565b90506000612d098484612c11565b82525060208201516001600160401b03811115612d2857612d28600080fd5b61277784828501612cb8565b6000612d4261205e846126fe565b83815290506020808201908402830185811115612d6157612d61600080fd5b835b818110156127d65780516001600160401b03811115612d8457612d84600080fd5b808601612d918982612cdc565b8552505060209283019201612d63565b600082601f830112612db557612db5600080fd5b8151610eb6848260208601612d34565b600060408284031215612dda57612dda600080fd5b612de46040611ffe565b90506000612df28484612c11565b82525060208201516001600160401b03811115612e1157612e11600080fd5b61277784828501612da1565b600060208284031215612e3257612e32600080fd5b81516001600160401b03811115612e4b57612e4b600080fd5b610eb684828501612dc5565b601981526000602082017f46756e6457616c6c65743a20696e76616c6964206e6f6e63650000000000000081529150612bb6565b602080825281016105dc81612e57565b602681526000602082017f46756e6457616c6c65743a2063616c6c6572206973206e6f742077616c6c65748152651037bbb732b960d11b602082015291505b5060400190565b602080825281016105dc81612e9b565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612bb6565b602080825281016105dc81612ef1565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612bb6565b602080825281016105dc81612f28565b6001600160401b0381166120f1565b60a08101612f89828861258c565b612f966020830187612f6c565b612fa360408301866120ef565b612fb0606083018561258c565b612fbd60808301846120ef565b9695505050505050565b601781526000602082017f46756e6457616c6c65743a207a65726f20616d6f756e7400000000000000000081529150612bb6565b602080825281016105dc81612fc7565b60608101613019828661258c565b61302660208301856120ef565b8181036040830152610eb381846129ab565b801515611f85565b80516105dc81613038565b60006020828403121561306057613060600080fd5b6000610eb68484613040565b601d81526000602082017f46756e6457616c6c65743a20696e76616c6964207369676e617475726500000081529150612bb6565b602080825281016105dc8161306c565b60a081016130be828861258c565b6130cb6020830187612f6c565b6130d8604083018661258c565b612fb060608301856120ef565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b60208201529150612eda565b602080825281016105dc816130e5565b6040810161314582856126e7565b6115fc60208301846120ef565b60006105dc8260601b90565b60006105dc82613152565b6120f161317582611f60565b61315e565b806120f1565b600061318c8286613169565b60148201915061319c8285613169565b6014820191506131ac828461317a565b506020019392505050565b606081016131c5828661258c565b6131d260208301856120ef565b610eb6604083018461258c565b606081016131ed82866126e7565b6131fa602083018561258c565b610eb660408301846120ef565b60808101613215828761258c565b6132226020830186612f6c565b61322f60408301856120ef565b61124b60608301846120ef565b60a0810161324a82886120ef565b613257602083018761258c565b6130d86040830186612f6c565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150612eda565b602080825281016105dc81613264565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150612eda565b602080825281016105dc816132bf565b60c0810161332082896120ef565b61332d602083018861258c565b61333a6040830187612f6c565b613347606083018661258c565b61335460808301856120ef565b611f1c60a08301846120ef565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612bb6565b602080825281016105dc81613361565b602181526000602082017f42696c6c696e673a2063616c6c6572206973206e6f7420612070726f766964658152603960f91b60208201529150612eda565b602080825281016105dc8161339c565b601a81526000602082017f42696c6c696e673a20696e76616c6964207369676e617475726500000000000081529150612bb6565b602080825281016105dc816133ea565b601d81526000602082017f42696c6c696e673a20696e73756666696369656e742062616c616e636500000081529150612bb6565b602080825281016105dc8161342e565b80516105dc81612297565b60006020828403121561349257613492600080fd5b6000610eb68484613472565b60a081016134ac828861258c565b6134b96020830187612f6c565b6134c660408301866120ef565b81810360608301526134d881856129ab565b9050612fbd60808301846120ef565b634e487b7160e01b600052601160045260246000fd5b60008282101561350f5761350f6134e7565b500390565b60408101613145828561258c565b60808101613530828761258c565b61353d60208301866120ef565b61354a6040830185612f6c565b61124b606083018461244e565b6000821982111561356a5761356a6134e7565b500190565b606081016131ed828661258c565b601d81526000602082017f5061757365723a204163636f756e74206973206e6f742070617573657200000081529150612bb6565b602080825281016105dc8161357d565b602181526000602082017f5061757365723a204163636f756e7420697320616c72656164792070617573658152603960f91b60208201529150612eda565b602080825281016105dc816135c1565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150612eda565b602080825281016105dc8161360f565b601c81526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f6164730000000081529150612bb6565b602080825281016105dc81613667565b634e487b7160e01b600052603260045260246000fd5b602181526000602082017f42696c6c696e673a20656d7074792062696c6c207061796c6f616420656e74728152607960f81b60208201529150612eda565b602080825281016105dc816136c1565b6060810161371d8286612132565b6131fa60208301856120ef565b60006020828403121561373f5761373f600080fd5b6000610eb68484612c11565b600060001982141561375f5761375f6134e7565b5060010190565b6015815260006020820174109a5b1b1a5b99ce881a5b9d985b1a5908189a5b1b605a1b81529150612bb6565b602080825281016105dc81613766565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b60208201529150612eda565b602080825281016105dc816137a2565b61190160f01b81526002016000613810828561317a565b602082019150613820828461317a565b5060200192915050565b634e487b7160e01b600052601260045260246000fd5b60008261384f5761384f61382a565b500490565b60a0810161386282886120ef565b61386f60208301876120ef565b61387c60408301866120ef565b61388960608301856120ef565b612fbd608083018461258c565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b60208201529150612eda565b602080825281016105dc81613896565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612bb6565b602080825281016105dc816138e9565b6000613937825190565b61394581856020860161297f565b9290920192915050565b60006115fc828461392d56fea2646970667358221220a53cf519b9ec67ca23b0e4e248f9395f9a4e4971a376aae8d4a0bd4de904a8c564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 970,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 235,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 324,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3742,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "pausers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6464,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "providers",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IProviders)4232"
      },
      {
        "astId": 1670,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_HASHED_NAME",
        "offset": 0,
        "slot": "153",
        "type": "t_bytes32"
      },
      {
        "astId": 1672,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_HASHED_VERSION",
        "offset": 0,
        "slot": "154",
        "type": "t_bytes32"
      },
      {
        "astId": 1810,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "155",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 8010,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "billTypedHash",
        "offset": 0,
        "slot": "205",
        "type": "t_bytes32"
      },
      {
        "astId": 8014,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "token",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IERC20Upgradeable)462"
      },
      {
        "astId": 8018,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "adaptor",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IResourceAdaptor)7976"
      },
      {
        "astId": 339,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "_status",
        "offset": 0,
        "slot": "208",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "__gap",
        "offset": 0,
        "slot": "209",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8419,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "rechargeTypedHash",
        "offset": 0,
        "slot": "258",
        "type": "t_bytes32"
      },
      {
        "astId": 8428,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "nonces",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4013)))"
      },
      {
        "astId": 8435,
        "contract": "contracts/wallets/FundWallet.sol:FundWallet",
        "label": "wallets",
        "offset": 0,
        "slot": "260",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Wallet)4018_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20Upgradeable)462": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IProviders)4232": {
        "encoding": "inplace",
        "label": "contract IProviders",
        "numberOfBytes": "20"
      },
      "t_contract(IResourceAdaptor)7976": {
        "encoding": "inplace",
        "label": "contract IResourceAdaptor",
        "numberOfBytes": "20"
      },
      "t_enum(Purpose)4013": {
        "encoding": "inplace",
        "label": "enum IFundWallet.Purpose",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4013)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(uint64 => enum IFundWallet.Purpose)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4013))"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_struct(Wallet)4018_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => struct IFundWallet.Wallet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_struct(Wallet)4018_storage)"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint64,t_enum(Purpose)4013))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint64 => enum IFundWallet.Purpose))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint64,t_enum(Purpose)4013)"
      },
      "t_mapping(t_bytes32,t_struct(Wallet)4018_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IFundWallet.Wallet)",
        "numberOfBytes": "32",
        "value": "t_struct(Wallet)4018_storage"
      },
      "t_mapping(t_uint64,t_enum(Purpose)4013)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => enum IFundWallet.Purpose)",
        "numberOfBytes": "32",
        "value": "t_enum(Purpose)4013"
      },
      "t_struct(Wallet)4018_storage": {
        "encoding": "inplace",
        "label": "struct IFundWallet.Wallet",
        "members": [
          {
            "astId": 4015,
            "contract": "contracts/wallets/FundWallet.sol:FundWallet",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 4017,
            "contract": "contracts/wallets/FundWallet.sol:FundWallet",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}