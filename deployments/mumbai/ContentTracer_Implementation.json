{
  "address": "0x1ea7CC607ceD7C6f0755F676eb9d0FA99ce8590F",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IIPFSStorageController",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Insert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IIPFSStorageController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        },
        {
          "internalType": "contract IIPFSStorageController",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "accounts",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "contents",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "counts",
          "type": "uint256[]"
        }
      ],
      "name": "insertMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "metas",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providers",
      "outputs": [
        {
          "internalType": "contract IProviders",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "accounts",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "contents",
          "type": "string[]"
        }
      ],
      "name": "removeMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIPFSStorageController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6ae43cce349b80ce97ec8e09cb4654111b12269f8048a717bee3dc4f5af04f76",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x1ea7CC607ceD7C6f0755F676eb9d0FA99ce8590F",
    "transactionIndex": 84,
    "gasUsed": "1496426",
    "logsBloom": "0x
    "blockHash": "0x2bb05921650ef5c37faf67a2822d32671e049fea623479eef51c677a8d004374",
    "transactionHash": "0x6ae43cce349b80ce97ec8e09cb4654111b12269f8048a717bee3dc4f5af04f76",
    "logs": [
      {
        "transactionIndex": 84,
        "blockNumber": 26430426,
        "transactionHash": "0x6ae43cce349b80ce97ec8e09cb4654111b12269f8048a717bee3dc4f5af04f76",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000d4a7a92681a0000000000000000000000000000000000000000000000000029d67dc76da141730000000000000000000000000000000000000000000017f7a1159fd44a4e144f00000000000000000000000000000000000000000000000029c9334cdb3927730000000000000000000000000000000000000000000017f7a122ea4edcb62e4f",
        "logIndex": 185,
        "blockHash": "0x2bb05921650ef5c37faf67a2822d32671e049fea623479eef51c677a8d004374"
      }
    ],
    "blockNumber": 26430426,
    "cumulativeGasUsed": "6562213",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ec72d91282387ee141c9901f905a1de5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIPFSStorageController\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Insert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"},{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"accounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"contents\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"}],\"name\":\"insertMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"metas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"contract IProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"accounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"contents\",\"type\":\"string[]\"}],\"name\":\"removeMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"IPFS content tracer\",\"events\":{\"ControllerUpdated(address)\":{\"details\":\"emit when ipfs storage controller updated\",\"params\":{\"controller\":\"ipfs storage controller\"}},\"Insert(address,bytes32,string,uint256,uint256,uint256)\":{\"details\":\"emit when ipfs content inserted\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"count\":\"ipfs content count\",\"expiration\":\"ipfs content expiration\",\"provider\":\"provider address\",\"size\":\"ipfs content size\"}},\"Remove(address,bytes32,string,uint256,uint256)\":{\"details\":\"emit when ipfs content removed\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"count\":\"ipfs content count\",\"provider\":\"provider address\",\"size\":\"ipfs content size\"}}},\"kind\":\"dev\",\"methods\":{\"exists(address,bytes32,string)\":{\"details\":\"return whether ipfs content exists in provider\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"ipfs ipfs content exists\"}},\"initialize(address,address,address)\":{\"details\":\"proxy initialize function\",\"params\":{\"controller\":\"ipfs storage controller\",\"owner\":\"contract owner\",\"providers\":\"providers contract address\"}},\"insert(bytes32,string,uint256,uint256)\":{\"details\":\"insert ipfs content\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"size\":\"ipfs account size\"}},\"insertMult(bytes32[],string[],uint256[],uint256[])\":{\"details\":\"insert multiple ipfs content for accounts\",\"params\":{\"accounts\":\"array of user account\",\"contents\":\"array of ipfs contents\",\"counts\":\"array of ipfs content count\",\"sizes\":\"array of ipfs content size\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(bytes32,string)\":{\"details\":\"remove ipfs content\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\"}},\"removeMult(bytes32[],string[])\":{\"details\":\"remove ipfs content\",\"params\":{\"accounts\":\"array of user account\",\"contents\":\"array of ipfs contents\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setController(address)\":{\"details\":\"update ipfs storage controller\",\"params\":{\"_controller\":\"ipfs storage controller\"}},\"size(address,bytes32,string)\":{\"details\":\"return ipfs content size\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"ipfs ipfs content size\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"controller\":{\"details\":\"ipfs storage controller\"},\"metas\":{\"details\":\"ipfs content content meta\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ipfs/ContentTracer.sol\":\"ContentTracer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/interfaces/IProviders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev providers interface\\ninterface IProviders {\\n\\t/// @dev emit when provider is added\\n\\t/// @param provider provider address\\n\\tevent AddProvider(address provider);\\n\\n\\t/// @dev emit when provider removed\\n\\t/// @param provider provider address\\n\\tevent RemoveProvider(address provider);\\n\\n\\t/// @dev return whether address is a provider\\n\\t/// @param provider address\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\t/// @dev return whether a valid signature\\n\\t/// @param provider address\\n\\t/// @param hash message hash\\n\\t/// @param signature provider signature for message hash\\n\\t/// @return is valid signature\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0x41438f3e610374e6a6ac3653b14c8455cf7c3c9678b5e09cdf427d0743bdf687\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IProviders.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper interface\\ninterface IProvidersWrapper {\\n\\t/// @dev emit when providers contract updated\\n\\t/// @param providers providers contract\\n\\tevent ProvidersUpdated(IProviders providers);\\n\\n\\t/// @dev return providers contract address\\n\\tfunction providers() external view returns (IProviders);\\n}\\n\",\"keccak256\":\"0xd8f8806f95355c07323f77cf322865ca78fc7311fa1dab62c7ddb015fb34d44f\",\"license\":\"UNLICENSE\"},\"contracts/ipfs/ContentTracer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '../providers/ProvidersWrapper.sol';\\nimport '../resources/interfaces/IIPFSStorageController.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS content tracer\\ncontract ContentTracer is ProvidersWrapper, OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t/// @dev ipfs storage controller\\n\\tIIPFSStorageController public controller;\\n\\n\\tstruct ContentMeta {\\n\\t\\tuint256 size;\\n\\t\\tuint256 count;\\n\\t}\\n\\n\\t/// @dev ipfs content content meta\\n\\tmapping(address => mapping(bytes32 => mapping(string => ContentMeta))) public metas;\\n\\n\\t/// @dev emit when ipfs storage controller updated\\n\\t/// @param controller ipfs storage controller\\n\\tevent ControllerUpdated(IIPFSStorageController controller);\\n\\n\\t/// @dev emit when ipfs content inserted\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @param size ipfs content size\\n\\t/// @param count ipfs content count\\n\\t/// @param expiration ipfs content expiration\\n\\tevent Insert(address provider, bytes32 account, string content, uint256 size, uint256 count, uint256 expiration);\\n\\n\\t/// @dev emit when ipfs content removed\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @param size ipfs content size\\n\\t/// @param count ipfs content count\\n\\tevent Remove(address provider, bytes32 account, string content, uint256 size, uint256 count);\\n\\n\\tmodifier onlyProvider() {\\n\\t\\trequire(providers.isProvider(msg.sender), 'ContentTracer: caller is not the provider');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier nonSize(uint256 size) {\\n\\t\\trequire(size > 0, 'ContentTracer: zero size.');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev proxy initialize function\\n\\t/// @param owner contract owner\\n\\t/// @param providers providers contract address\\n\\t/// @param controller ipfs storage controller\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\tIProviders providers,\\n\\t\\tIIPFSStorageController controller\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Providers(providers);\\n\\t\\t_setController(controller);\\n\\t}\\n\\n\\t/// @dev update ipfs storage controller\\n\\t/// @param _controller ipfs storage controller\\n\\tfunction setController(IIPFSStorageController _controller) external onlyOwner {\\n\\t\\t_setController(_controller);\\n\\t}\\n\\n\\tfunction _setController(IIPFSStorageController _controller) internal {\\n\\t\\tcontroller = _controller;\\n\\t\\temit ControllerUpdated(_controller);\\n\\t}\\n\\n\\t/// @dev insert multiple ipfs content for accounts\\n\\t/// @param accounts array of user account\\n\\t/// @param contents array of ipfs contents\\n\\t/// @param sizes array of ipfs content size\\n\\t/// @param counts array of ipfs content count\\n\\tfunction insertMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tstring[] memory contents,\\n\\t\\tuint256[] memory sizes,\\n\\t\\tuint256[] memory counts\\n\\t) external onlyProvider {\\n\\t\\trequire(accounts.length == contents.length, 'ContentTracer: Invalid parameter length.');\\n\\t\\trequire(accounts.length == sizes.length, 'ContentTracer: Invalid parameter length.');\\n\\t\\trequire(accounts.length == counts.length, 'ContentTracer: Invalid parameter length.');\\n\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\t_insert(msg.sender, accounts[i], contents[i], sizes[i], counts[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev insert ipfs content\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @param size ipfs account size\\n\\tfunction insert(\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content,\\n\\t\\tuint256 size,\\n\\t\\tuint256 count\\n\\t) public nonSize(size) onlyProvider {\\n\\t\\t_insert(msg.sender, account, content, size, count);\\n\\t}\\n\\n\\tfunction _insert(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content,\\n\\t\\tuint256 size, \\n\\t\\tuint256 count\\n\\t) internal nonSize(size) {\\n\\t\\trequire(!exists(provider, account, content), 'ContentTracer: content exists');\\n\\t\\trequire(!controller.isExpired(account), 'ContentTracer: account expired');\\n\\t\\tmetas[provider][account][content] = ContentMeta(size, count);\\n\\n\\t\\temit Insert(provider, account, content, size, count, controller.expiredAt(account));\\n\\t}\\n\\n\\t/// @dev remove ipfs content\\n\\t/// @param accounts array of user account\\n\\t/// @param contents array of ipfs contents\\n\\tfunction removeMult(bytes32[] memory accounts, string[] memory contents) external onlyProvider {\\n\\t\\trequire(accounts.length == contents.length, 'ContentTracer: Invalid parameter length');\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\t_remove(msg.sender, accounts[i], contents[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev remove ipfs content\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\tfunction remove(bytes32 account, string memory content) public onlyProvider {\\n\\t\\t_remove(msg.sender, account, content);\\n\\t}\\n\\n\\tfunction _remove(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content\\n\\t) internal {\\n\\t\\trequire(exists(provider, account, content), 'ContentTracer: nonexistent content');\\n\\t\\tContentMeta memory meta = metas[provider][account][content];\\n\\t\\tdelete metas[provider][account][content];\\n\\n\\t\\temit Remove(provider, account, content, meta.size, meta.count);\\n\\t}\\n\\n\\t/// @dev return whether ipfs content exists in provider\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @return ipfs ipfs content exists\\n\\tfunction exists(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content\\n\\t) public view returns (bool) {\\n\\t\\treturn metas[provider][account][content].size != 0;\\n\\t}\\n\\n\\t/// @dev return ipfs content size\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @return ipfs ipfs content size\\n\\tfunction size(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content\\n\\t) public view returns (uint256) {\\n\\t\\trequire(providers.isProvider(provider), 'ContentTracer: nonexistent provider');\\n\\t\\trequire(exists(provider, account, content), 'ContentTracer: nonexistent content');\\n\\t\\treturn metas[provider][account][content].size;\\n\\t}\\n}\\n\",\"keccak256\":\"0xf97e3f4a15b20a32c84c7862dfb777190cdfcd16b24398fcac9e84dc905bb4df\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev resource data library\\nlibrary ResourceData {\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n}\\n\",\"keccak256\":\"0xd1ce9795c92610cd6d718894a8badc6f38aa4accdbcf716fcfe3422a945ff35b\",\"license\":\"UNLICENSE\"},\"contracts/providers/ProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '../interfaces/IProvidersWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper contract\\nabstract contract ProvidersWrapper is IProvidersWrapper, Initializable {\\n\\t/// @dev providers contract address\\n\\tIProviders public override providers;\\n\\n\\t/// @dev initialize providers contract\\n\\t/// @param _providers providers contract address\\n\\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\\n\\t\\t_setProviders(_providers);\\n\\t}\\n\\n\\tfunction _setProviders(IProviders _providers) internal {\\n\\t\\tproviders = _providers;\\n\\t\\temit ProvidersUpdated(_providers);\\n\\t}\\n}\\n\",\"keccak256\":\"0xcb18f1276cfa2c7d9eaf9764fabacdc39df2823de77342acfec0aa8732062863\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IAdaptorWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IResourceAdaptor.sol';\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adaptor interface\\ninterface IAdaptorWrapper {\\n\\t/// @dev emit when resource adaptor updated\\n\\t/// @param adaptor resource adaptor contract address\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\t/// @dev emit when resource type updated\\n\\t/// @param resourceType resource type\\n\\tevent ResourceTypeUpdated(ResourceData.ResourceType resourceType);\\n\\n\\t/// @dev return resource adaptor contract address\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n\\n\\t/// @dev return resource type\\n\\tfunction resourceType() external view returns (ResourceData.ResourceType);\\n\\n\\t/// @dev return resource price\\n\\tfunction price() external view returns (uint256);\\n\\n\\t/// @dev calculate resource value for amount\\n\\tfunction getValueOf(uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev calculate resource amount for value\\n\\tfunction getAmountOf(uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xca63e7b5b13af756b52c690e80a68cf983338550f0aa1b60fbbc6882bec69eb9\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IIPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './IAdaptorWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS storage controller interface\\ninterface IIPFSStorageController is IAdaptorWrapper {\\n\\tstruct IPFSStorage {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @dev emit when ipfs resource expanded\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\tevent Expanded(bytes32 account, uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\t/// @dev expand ipfs resource\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\tfunction expand(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external;\\n\\n\\t/// @dev return whether the account is expired\\n\\t/// @param account user account\\n\\t/// @return whether the account is expired\\n\\tfunction isExpired(bytes32 account) external view returns (bool);\\n\\n\\t/// @dev ipfs resource start time\\n\\t/// @param account user account\\n\\t/// @return start time for ipfs resource\\n\\tfunction startTime(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return available expiration time for the account\\n\\t/// @param account user account\\n\\t/// @return available expiration time for the account\\n\\tfunction availableExpiration(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the account\\n\\t/// @param account user account\\n\\t/// @return total expiration time for the account\\n\\tfunction expiration(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return when the account will expire\\n\\t/// @param account user account\\n\\t/// @return when the account will expire\\n\\tfunction expiredAt(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the account\\n\\t/// @param account user account\\n\\t/// @return ipfs storage amount for the account\\n\\tfunction balanceOf(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev calculate fee for storage and expiration\\n\\t/// @param account user account\\n\\t/// @param expandedStorage storage amount\\n\\t/// @param expandedExpiration  expiration(in seconds)\\n\\t/// @return expandedStorageFee storage fee\\n\\t/// @return expandedExpirationFee expiration fee\\n\\tfunction expandedFee(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorage,\\n\\t\\tuint256 expandedExpiration\\n\\t) external view returns (uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\t/// @dev calculate fee for storage and expiration\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\t/// @return expandedStorage storage amount\\n\\t/// @return expandedExpiration expiration(in seconds)\\n\\tfunction expansions(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external view returns (uint256 expandedStorage, uint256 expandedExpiration);\\n}\\n\",\"keccak256\":\"0xc55b6dc4952ce6cbd43029b6fe6a66eefb885ab0d168ba6049ed4f4a4b3e2678\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adpator interface\\ninterface IResourceAdaptor {\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @dev emit when price updated\\n\\t/// @param adaptors price adaptors\\n\\tevent PriceAdaptorsUpdated(PriceAdaptor[] adaptors);\\n\\n\\t/// @dev get price for resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param _indexBlock block number\\n\\t/// @return price for resource at a specific block\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\t/// @dev get value for `amount` resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @param _indexBlock block number\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @param _indexBlock block numer\\n\\t/// @return resource amount\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value\\n\\t/// @param resourceType resource type\\n\\t/// @param value token value in resource decimals(18)\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe7ab80ce01c39a5e059cbfb689ace99d515f400d69236f6086893cd3d0cb0b94\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a1d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063db1701251161008c578063e65da1e711610066578063e65da1e714610208578063f2fde38b14610228578063f77c47911461023b578063f8401fe61461025b57600080fd5b8063db170125146101cf578063dbfd4737146101e2578063de47238c146101f557600080fd5b806392eefe9b116100c857806392eefe9b14610176578063b7ab288314610189578063b840f921146101a9578063c0c53b8b146101bc57600080fd5b8063715018a6146100ef57806389512e17146100f95780638da5cb5b1461015d575b600080fd5b6100f7610274565b005b610146610107366004610ef9565b60666020908152600093845260408085208252928452919092208251808401830180519281529083019390920192909220919052805460019091015482565b604051610154929190610f6b565b60405180910390f35b6033546001600160a01b03166040516101549190610f8f565b6100f7610184366004610fbc565b6102b3565b61019c610197366004610ef9565b6102e9565b6040516101549190610fe5565b6100f76101b736600461119b565b610336565b6100f76101ca366004611266565b6104d0565b6100f76101dd3660046112ac565b610560565b6100f76101f0366004611303565b610610565b6100f7610203366004611375565b6106df565b61021b610216366004610ef9565b610801565b60405161015491906113db565b6100f76102363660046113e9565b610915565b60655461024e906001600160a01b031681565b604051610154919061143a565b60005461024e906201000090046001600160a01b031681565b6033546001600160a01b031633146102a75760405162461bcd60e51b815260040161029e9061147d565b60405180910390fd5b6102b1600061096a565b565b6033546001600160a01b031633146102dd5760405162461bcd60e51b815260040161029e9061147d565b6102e6816109bc565b50565b6001600160a01b0383166000908152606660209081526040808320858452909152808220905161031a9084906114db565b90815260405190819003602001902054151590505b9392505050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061036b903390600401610f8f565b60206040518083038186803b15801561038357600080fd5b505afa158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906114fa565b6103d75760405162461bcd60e51b815260040161029e90611564565b82518451146103f85760405162461bcd60e51b815260040161029e906115b9565b81518451146104195760405162461bcd60e51b815260040161029e906115b9565b805184511461043a5760405162461bcd60e51b815260040161029e906115b9565b60005b84518110156104c9576104b73386838151811061045c5761045c6115c9565b6020026020010151868481518110610476576104766115c9565b6020026020010151868581518110610490576104906115c9565b60200260200101518686815181106104aa576104aa6115c9565b6020026020010151610a12565b806104c1816115f5565b91505061043d565b5050505050565b600054610100900460ff166104eb5760005460ff16156104ef565b303b155b61050b5760405162461bcd60e51b815260040161029e9061165b565b600054610100900460ff1615801561052d576000805461ffff19166101011790555b6105368461096a565b61053f83610c25565b610548826109bc565b801561055a576000805461ff00191690555b50505050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610595903390600401610f8f565b60206040518083038186803b1580156105ad57600080fd5b505afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e591906114fa565b6106015760405162461bcd60e51b815260040161029e90611564565b61060c338383610c55565b5050565b81600081116106315760405162461bcd60e51b815260040161029e9061169f565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610666903390600401610f8f565b60206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906114fa565b6106d25760405162461bcd60e51b815260040161029e90611564565b6104c93386868686610a12565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610714903390600401610f8f565b60206040518083038186803b15801561072c57600080fd5b505afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906114fa565b6107805760405162461bcd60e51b815260040161029e90611564565b80518251146107a15760405162461bcd60e51b815260040161029e906116f3565b60005b82518110156107fc576107ea338483815181106107c3576107c36115c9565b60200260200101518484815181106107dd576107dd6115c9565b6020026020010151610c55565b806107f4816115f5565b9150506107a4565b505050565b60008054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610837908790600401610f8f565b60206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088791906114fa565b6108a35760405162461bcd60e51b815260040161029e90611743565b6108ae8484846102e9565b6108ca5760405162461bcd60e51b815260040161029e90611792565b6001600160a01b03841660009081526066602090815260408083208684529091529081902090516108fc9084906114db565b9081526040519081900360200190205490509392505050565b6033546001600160a01b0316331461093f5760405162461bcd60e51b815260040161029e9061147d565b6001600160a01b0381166109655760405162461bcd60e51b815260040161029e906117e5565b6102e6815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606580546001600160a01b0319166001600160a01b0383161790556040517f1304018cfe79741dcf02ba6b61d39cc4757d59395d03224d9925c7aa8300214690610a0790839061143a565b60405180910390a150565b8160008111610a335760405162461bcd60e51b815260040161029e9061169f565b610a3e8686866102e9565b15610a5b5760405162461bcd60e51b815260040161029e90611829565b6065546040516336d97f5960e11b81526001600160a01b0390911690636db2feb290610a8b9088906004016113db565b60206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb91906114fa565b15610af85760405162461bcd60e51b815260040161029e9061186d565b60408051808201825284815260208082018590526001600160a01b0389166000908152606682528381208982529091528290209151909190610b3b9087906114db565b90815260405190819003602090810182208351815592015160019092019190915560655463f74d561f60e01b82527fd8be615b569e10ab81c7e1ad876540845a9ad057e7bf224af878656a43ccbae791889188918891889188916001600160a01b03169063f74d561f90610bb39087906004016113db565b60206040518083038186803b158015610bcb57600080fd5b505afa158015610bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c039190611888565b604051610c15969594939291906118db565b60405180910390a1505050505050565b600054610100900460ff16610c4c5760405162461bcd60e51b815260040161029e90611984565b6102e681610d63565b610c608383836102e9565b610c7c5760405162461bcd60e51b815260040161029e90611792565b6001600160a01b03831660009081526066602090815260408083208584529091528082209051610cad9084906114db565b90815260408051918290036020908101832083830183528054845260010154838201526001600160a01b038716600090815260668252828120878252909152819020905191925090610d009084906114db565b908152604051908190036020908101822060008082556001909101558251908301517fededfe806a15f843a0e88eb73d17bdae19981e0402af0c2946a3d9834e66877b92610d55928892889288929190611994565b60405180910390a150505050565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c528490610a0790839061143a565b60006001600160a01b0382165b92915050565b610dd181610db5565b81146102e657600080fd5b8035610dc281610dc8565b80610dd1565b8035610dc281610de7565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610e3357610e33610df8565b6040525050565b6000610e4560405190565b9050610e518282610e0e565b919050565b60006001600160401b03821115610e6f57610e6f610df8565b601f19601f83011660200192915050565b82818337506000910152565b6000610e9f610e9a84610e56565b610e3a565b905082815260208101848484011115610eba57610eba600080fd5b610ec5848285610e80565b509392505050565b600082601f830112610ee157610ee1600080fd5b8135610ef1848260208601610e8c565b949350505050565b600080600060608486031215610f1157610f11600080fd5b6000610f1d8686610ddc565b9350506020610f2e86828701610ded565b92505060408401356001600160401b03811115610f4d57610f4d600080fd5b610f5986828701610ecd565b9150509250925092565b805b82525050565b60408101610f798285610f63565b61032f6020830184610f63565b610f6581610db5565b60208101610dc28284610f86565b6000610dc282610db5565b610dd181610f9d565b8035610dc281610fa8565b600060208284031215610fd157610fd1600080fd5b6000610ef18484610fb1565b801515610f65565b60208101610dc28284610fdd565b60006001600160401b0382111561100c5761100c610df8565b5060209081020190565b6000611024610e9a84610ff3565b8381529050602080820190840283018581111561104357611043600080fd5b835b8181101561106757806110588882610ded565b84525060209283019201611045565b5050509392505050565b600082601f83011261108557611085600080fd5b8135610ef1848260208601611016565b60006110a3610e9a84610ff3565b838152905060208082019084028301858111156110c2576110c2600080fd5b835b818110156110675780356001600160401b038111156110e5576110e5600080fd5b8086016110f28982610ecd565b85525050602092830192016110c4565b600082601f83011261111657611116600080fd5b8135610ef1848260208601611095565b6000611134610e9a84610ff3565b8381529050602080820190840283018581111561115357611153600080fd5b835b8181101561106757806111688882610ded565b84525060209283019201611155565b600082601f83011261118b5761118b600080fd5b8135610ef1848260208601611126565b600080600080608085870312156111b4576111b4600080fd5b84356001600160401b038111156111cd576111cd600080fd5b6111d987828801611071565b94505060208501356001600160401b038111156111f8576111f8600080fd5b61120487828801611102565b93505060408501356001600160401b0381111561122357611223600080fd5b61122f87828801611177565b92505060608501356001600160401b0381111561124e5761124e600080fd5b61125a87828801611177565b91505092959194509250565b60008060006060848603121561127e5761127e600080fd5b600061128a8686610ddc565b935050602061129b86828701610fb1565b9250506040610f5986828701610fb1565b600080604083850312156112c2576112c2600080fd5b60006112ce8585610ded565b92505060208301356001600160401b038111156112ed576112ed600080fd5b6112f985828601610ecd565b9150509250929050565b6000806000806080858703121561131c5761131c600080fd5b60006113288787610ded565b94505060208501356001600160401b0381111561134757611347600080fd5b61135387828801610ecd565b935050604061136487828801610ded565b925050606061125a87828801610ded565b6000806040838503121561138b5761138b600080fd5b82356001600160401b038111156113a4576113a4600080fd5b6113b085828601611071565b92505060208301356001600160401b038111156113cf576113cf600080fd5b6112f985828601611102565b60208101610dc28284610f63565b6000602082840312156113fe576113fe600080fd5b6000610ef18484610ddc565b60006001600160a01b038216610dc2565b6000610dc28261140a565b6000610dc28261141b565b610f6581611426565b60208101610dc28284611431565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610dc281611448565b60005b838110156114a8578181015183820152602001611490565b8381111561055a5750506000910152565b60006114c3825190565b6114d181856020860161148d565b9290920192915050565b600061032f82846114b9565b801515610dd1565b8051610dc2816114e7565b60006020828403121561150f5761150f600080fd5b6000610ef184846114ef565b602981526000602082017f436f6e74656e745472616365723a2063616c6c6572206973206e6f742074686581526810383937bb34b232b960b91b602082015291505b5060400190565b60208082528101610dc28161151b565b602881526000602082017f436f6e74656e745472616365723a20496e76616c696420706172616d65746572815267103632b733ba341760c11b6020820152915061155d565b60208082528101610dc281611574565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611609576116096115df565b5060010190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b6020820152915061155d565b60208082528101610dc281611610565b601981526000602082017f436f6e74656e745472616365723a207a65726f2073697a652e0000000000000081529150611476565b60208082528101610dc28161166b565b602781526000602082017f436f6e74656e745472616365723a20496e76616c696420706172616d65746572815266040d8cadccee8d60cb1b6020820152915061155d565b60208082528101610dc2816116af565b602381526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e742070726f76698152623232b960e91b6020820152915061155d565b60208082528101610dc281611703565b602281526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e7420636f6e74658152611b9d60f21b6020820152915061155d565b60208082528101610dc281611753565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061155d565b60208082528101610dc2816117a2565b601d81526000602082017f436f6e74656e745472616365723a20636f6e74656e742065786973747300000081529150611476565b60208082528101610dc2816117f5565b601e81526000602082017f436f6e74656e745472616365723a206163636f756e742065787069726564000081529150611476565b60208082528101610dc281611839565b8051610dc281610de7565b60006020828403121561189d5761189d600080fd5b6000610ef1848461187d565b60006118b3825190565b8084526020840193506118ca81856020860161148d565b601f01601f19169290920192915050565b60c081016118e98289610f86565b6118f66020830188610f63565b818103604083015261190881876118a9565b90506119176060830186610f63565b6119246080830185610f63565b61193160a0830184610f63565b979650505050505050565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061155d565b60208082528101610dc28161193c565b60a081016119a28288610f86565b6119af6020830187610f63565b81810360408301526119c181866118a9565b90506119d06060830185610f63565b6119dd6080830184610f63565b969550505050505056fea2646970667358221220ccfb80c772dc30eb5740ad42edb67abf7acd721fc01be717c5c8b9583a80339164736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063db1701251161008c578063e65da1e711610066578063e65da1e714610208578063f2fde38b14610228578063f77c47911461023b578063f8401fe61461025b57600080fd5b8063db170125146101cf578063dbfd4737146101e2578063de47238c146101f557600080fd5b806392eefe9b116100c857806392eefe9b14610176578063b7ab288314610189578063b840f921146101a9578063c0c53b8b146101bc57600080fd5b8063715018a6146100ef57806389512e17146100f95780638da5cb5b1461015d575b600080fd5b6100f7610274565b005b610146610107366004610ef9565b60666020908152600093845260408085208252928452919092208251808401830180519281529083019390920192909220919052805460019091015482565b604051610154929190610f6b565b60405180910390f35b6033546001600160a01b03166040516101549190610f8f565b6100f7610184366004610fbc565b6102b3565b61019c610197366004610ef9565b6102e9565b6040516101549190610fe5565b6100f76101b736600461119b565b610336565b6100f76101ca366004611266565b6104d0565b6100f76101dd3660046112ac565b610560565b6100f76101f0366004611303565b610610565b6100f7610203366004611375565b6106df565b61021b610216366004610ef9565b610801565b60405161015491906113db565b6100f76102363660046113e9565b610915565b60655461024e906001600160a01b031681565b604051610154919061143a565b60005461024e906201000090046001600160a01b031681565b6033546001600160a01b031633146102a75760405162461bcd60e51b815260040161029e9061147d565b60405180910390fd5b6102b1600061096a565b565b6033546001600160a01b031633146102dd5760405162461bcd60e51b815260040161029e9061147d565b6102e6816109bc565b50565b6001600160a01b0383166000908152606660209081526040808320858452909152808220905161031a9084906114db565b90815260405190819003602001902054151590505b9392505050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061036b903390600401610f8f565b60206040518083038186803b15801561038357600080fd5b505afa158015610397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bb91906114fa565b6103d75760405162461bcd60e51b815260040161029e90611564565b82518451146103f85760405162461bcd60e51b815260040161029e906115b9565b81518451146104195760405162461bcd60e51b815260040161029e906115b9565b805184511461043a5760405162461bcd60e51b815260040161029e906115b9565b60005b84518110156104c9576104b73386838151811061045c5761045c6115c9565b6020026020010151868481518110610476576104766115c9565b6020026020010151868581518110610490576104906115c9565b60200260200101518686815181106104aa576104aa6115c9565b6020026020010151610a12565b806104c1816115f5565b91505061043d565b5050505050565b600054610100900460ff166104eb5760005460ff16156104ef565b303b155b61050b5760405162461bcd60e51b815260040161029e9061165b565b600054610100900460ff1615801561052d576000805461ffff19166101011790555b6105368461096a565b61053f83610c25565b610548826109bc565b801561055a576000805461ff00191690555b50505050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610595903390600401610f8f565b60206040518083038186803b1580156105ad57600080fd5b505afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e591906114fa565b6106015760405162461bcd60e51b815260040161029e90611564565b61060c338383610c55565b5050565b81600081116106315760405162461bcd60e51b815260040161029e9061169f565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610666903390600401610f8f565b60206040518083038186803b15801561067e57600080fd5b505afa158015610692573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b691906114fa565b6106d25760405162461bcd60e51b815260040161029e90611564565b6104c93386868686610a12565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610714903390600401610f8f565b60206040518083038186803b15801561072c57600080fd5b505afa158015610740573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076491906114fa565b6107805760405162461bcd60e51b815260040161029e90611564565b80518251146107a15760405162461bcd60e51b815260040161029e906116f3565b60005b82518110156107fc576107ea338483815181106107c3576107c36115c9565b60200260200101518484815181106107dd576107dd6115c9565b6020026020010151610c55565b806107f4816115f5565b9150506107a4565b505050565b60008054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610837908790600401610f8f565b60206040518083038186803b15801561084f57600080fd5b505afa158015610863573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088791906114fa565b6108a35760405162461bcd60e51b815260040161029e90611743565b6108ae8484846102e9565b6108ca5760405162461bcd60e51b815260040161029e90611792565b6001600160a01b03841660009081526066602090815260408083208684529091529081902090516108fc9084906114db565b9081526040519081900360200190205490509392505050565b6033546001600160a01b0316331461093f5760405162461bcd60e51b815260040161029e9061147d565b6001600160a01b0381166109655760405162461bcd60e51b815260040161029e906117e5565b6102e6815b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606580546001600160a01b0319166001600160a01b0383161790556040517f1304018cfe79741dcf02ba6b61d39cc4757d59395d03224d9925c7aa8300214690610a0790839061143a565b60405180910390a150565b8160008111610a335760405162461bcd60e51b815260040161029e9061169f565b610a3e8686866102e9565b15610a5b5760405162461bcd60e51b815260040161029e90611829565b6065546040516336d97f5960e11b81526001600160a01b0390911690636db2feb290610a8b9088906004016113db565b60206040518083038186803b158015610aa357600080fd5b505afa158015610ab7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610adb91906114fa565b15610af85760405162461bcd60e51b815260040161029e9061186d565b60408051808201825284815260208082018590526001600160a01b0389166000908152606682528381208982529091528290209151909190610b3b9087906114db565b90815260405190819003602090810182208351815592015160019092019190915560655463f74d561f60e01b82527fd8be615b569e10ab81c7e1ad876540845a9ad057e7bf224af878656a43ccbae791889188918891889188916001600160a01b03169063f74d561f90610bb39087906004016113db565b60206040518083038186803b158015610bcb57600080fd5b505afa158015610bdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c039190611888565b604051610c15969594939291906118db565b60405180910390a1505050505050565b600054610100900460ff16610c4c5760405162461bcd60e51b815260040161029e90611984565b6102e681610d63565b610c608383836102e9565b610c7c5760405162461bcd60e51b815260040161029e90611792565b6001600160a01b03831660009081526066602090815260408083208584529091528082209051610cad9084906114db565b90815260408051918290036020908101832083830183528054845260010154838201526001600160a01b038716600090815260668252828120878252909152819020905191925090610d009084906114db565b908152604051908190036020908101822060008082556001909101558251908301517fededfe806a15f843a0e88eb73d17bdae19981e0402af0c2946a3d9834e66877b92610d55928892889288929190611994565b60405180910390a150505050565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c528490610a0790839061143a565b60006001600160a01b0382165b92915050565b610dd181610db5565b81146102e657600080fd5b8035610dc281610dc8565b80610dd1565b8035610dc281610de7565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715610e3357610e33610df8565b6040525050565b6000610e4560405190565b9050610e518282610e0e565b919050565b60006001600160401b03821115610e6f57610e6f610df8565b601f19601f83011660200192915050565b82818337506000910152565b6000610e9f610e9a84610e56565b610e3a565b905082815260208101848484011115610eba57610eba600080fd5b610ec5848285610e80565b509392505050565b600082601f830112610ee157610ee1600080fd5b8135610ef1848260208601610e8c565b949350505050565b600080600060608486031215610f1157610f11600080fd5b6000610f1d8686610ddc565b9350506020610f2e86828701610ded565b92505060408401356001600160401b03811115610f4d57610f4d600080fd5b610f5986828701610ecd565b9150509250925092565b805b82525050565b60408101610f798285610f63565b61032f6020830184610f63565b610f6581610db5565b60208101610dc28284610f86565b6000610dc282610db5565b610dd181610f9d565b8035610dc281610fa8565b600060208284031215610fd157610fd1600080fd5b6000610ef18484610fb1565b801515610f65565b60208101610dc28284610fdd565b60006001600160401b0382111561100c5761100c610df8565b5060209081020190565b6000611024610e9a84610ff3565b8381529050602080820190840283018581111561104357611043600080fd5b835b8181101561106757806110588882610ded565b84525060209283019201611045565b5050509392505050565b600082601f83011261108557611085600080fd5b8135610ef1848260208601611016565b60006110a3610e9a84610ff3565b838152905060208082019084028301858111156110c2576110c2600080fd5b835b818110156110675780356001600160401b038111156110e5576110e5600080fd5b8086016110f28982610ecd565b85525050602092830192016110c4565b600082601f83011261111657611116600080fd5b8135610ef1848260208601611095565b6000611134610e9a84610ff3565b8381529050602080820190840283018581111561115357611153600080fd5b835b8181101561106757806111688882610ded565b84525060209283019201611155565b600082601f83011261118b5761118b600080fd5b8135610ef1848260208601611126565b600080600080608085870312156111b4576111b4600080fd5b84356001600160401b038111156111cd576111cd600080fd5b6111d987828801611071565b94505060208501356001600160401b038111156111f8576111f8600080fd5b61120487828801611102565b93505060408501356001600160401b0381111561122357611223600080fd5b61122f87828801611177565b92505060608501356001600160401b0381111561124e5761124e600080fd5b61125a87828801611177565b91505092959194509250565b60008060006060848603121561127e5761127e600080fd5b600061128a8686610ddc565b935050602061129b86828701610fb1565b9250506040610f5986828701610fb1565b600080604083850312156112c2576112c2600080fd5b60006112ce8585610ded565b92505060208301356001600160401b038111156112ed576112ed600080fd5b6112f985828601610ecd565b9150509250929050565b6000806000806080858703121561131c5761131c600080fd5b60006113288787610ded565b94505060208501356001600160401b0381111561134757611347600080fd5b61135387828801610ecd565b935050604061136487828801610ded565b925050606061125a87828801610ded565b6000806040838503121561138b5761138b600080fd5b82356001600160401b038111156113a4576113a4600080fd5b6113b085828601611071565b92505060208301356001600160401b038111156113cf576113cf600080fd5b6112f985828601611102565b60208101610dc28284610f63565b6000602082840312156113fe576113fe600080fd5b6000610ef18484610ddc565b60006001600160a01b038216610dc2565b6000610dc28261140a565b6000610dc28261141b565b610f6581611426565b60208101610dc28284611431565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610dc281611448565b60005b838110156114a8578181015183820152602001611490565b8381111561055a5750506000910152565b60006114c3825190565b6114d181856020860161148d565b9290920192915050565b600061032f82846114b9565b801515610dd1565b8051610dc2816114e7565b60006020828403121561150f5761150f600080fd5b6000610ef184846114ef565b602981526000602082017f436f6e74656e745472616365723a2063616c6c6572206973206e6f742074686581526810383937bb34b232b960b91b602082015291505b5060400190565b60208082528101610dc28161151b565b602881526000602082017f436f6e74656e745472616365723a20496e76616c696420706172616d65746572815267103632b733ba341760c11b6020820152915061155d565b60208082528101610dc281611574565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611609576116096115df565b5060010190565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b6020820152915061155d565b60208082528101610dc281611610565b601981526000602082017f436f6e74656e745472616365723a207a65726f2073697a652e0000000000000081529150611476565b60208082528101610dc28161166b565b602781526000602082017f436f6e74656e745472616365723a20496e76616c696420706172616d65746572815266040d8cadccee8d60cb1b6020820152915061155d565b60208082528101610dc2816116af565b602381526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e742070726f76698152623232b960e91b6020820152915061155d565b60208082528101610dc281611703565b602281526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e7420636f6e74658152611b9d60f21b6020820152915061155d565b60208082528101610dc281611753565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061155d565b60208082528101610dc2816117a2565b601d81526000602082017f436f6e74656e745472616365723a20636f6e74656e742065786973747300000081529150611476565b60208082528101610dc2816117f5565b601e81526000602082017f436f6e74656e745472616365723a206163636f756e742065787069726564000081529150611476565b60208082528101610dc281611839565b8051610dc281610de7565b60006020828403121561189d5761189d600080fd5b6000610ef1848461187d565b60006118b3825190565b8084526020840193506118ca81856020860161148d565b601f01601f19169290920192915050565b60c081016118e98289610f86565b6118f66020830188610f63565b818103604083015261190881876118a9565b90506119176060830186610f63565b6119246080830185610f63565b61193160a0830184610f63565b979650505050505050565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061155d565b60208082528101610dc28161193c565b60a081016119a28288610f86565b6119af6020830187610f63565b81810360408301526119c181866118a9565b90506119d06060830185610f63565b6119dd6080830184610f63565b969550505050505056fea2646970667358221220ccfb80c772dc30eb5740ad42edb67abf7acd721fc01be717c5c8b9583a80339164736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "IPFS content tracer",
    "events": {
      "ControllerUpdated(address)": {
        "details": "emit when ipfs storage controller updated",
        "params": {
          "controller": "ipfs storage controller"
        }
      },
      "Insert(address,bytes32,string,uint256,uint256,uint256)": {
        "details": "emit when ipfs content inserted",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "count": "ipfs content count",
          "expiration": "ipfs content expiration",
          "provider": "provider address",
          "size": "ipfs content size"
        }
      },
      "Remove(address,bytes32,string,uint256,uint256)": {
        "details": "emit when ipfs content removed",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "count": "ipfs content count",
          "provider": "provider address",
          "size": "ipfs content size"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "exists(address,bytes32,string)": {
        "details": "return whether ipfs content exists in provider",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "provider": "provider address"
        },
        "returns": {
          "_0": "ipfs ipfs content exists"
        }
      },
      "initialize(address,address,address)": {
        "details": "proxy initialize function",
        "params": {
          "controller": "ipfs storage controller",
          "owner": "contract owner",
          "providers": "providers contract address"
        }
      },
      "insert(bytes32,string,uint256,uint256)": {
        "details": "insert ipfs content",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "size": "ipfs account size"
        }
      },
      "insertMult(bytes32[],string[],uint256[],uint256[])": {
        "details": "insert multiple ipfs content for accounts",
        "params": {
          "accounts": "array of user account",
          "contents": "array of ipfs contents",
          "counts": "array of ipfs content count",
          "sizes": "array of ipfs content size"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(bytes32,string)": {
        "details": "remove ipfs content",
        "params": {
          "account": "user account",
          "content": "ipfs content"
        }
      },
      "removeMult(bytes32[],string[])": {
        "details": "remove ipfs content",
        "params": {
          "accounts": "array of user account",
          "contents": "array of ipfs contents"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setController(address)": {
        "details": "update ipfs storage controller",
        "params": {
          "_controller": "ipfs storage controller"
        }
      },
      "size(address,bytes32,string)": {
        "details": "return ipfs content size",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "provider": "provider address"
        },
        "returns": {
          "_0": "ipfs ipfs content size"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "controller": {
        "details": "ipfs storage controller"
      },
      "metas": {
        "details": "ipfs content content meta"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 7037,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "providers",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IProviders)4279"
      },
      {
        "astId": 970,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4315,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "controller",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IIPFSStorageController)8522"
      },
      {
        "astId": 4330,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "metas",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)4320_storage)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IIPFSStorageController)8522": {
        "encoding": "inplace",
        "label": "contract IIPFSStorageController",
        "numberOfBytes": "20"
      },
      "t_contract(IProviders)4279": {
        "encoding": "inplace",
        "label": "contract IProviders",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)4320_storage)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(string => struct ContentTracer.ContentMeta)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)4320_storage))"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_struct(ContentMeta)4320_storage))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => struct ContentTracer.ContentMeta))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)4320_storage)"
      },
      "t_mapping(t_string_memory_ptr,t_struct(ContentMeta)4320_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct ContentTracer.ContentMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(ContentMeta)4320_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ContentMeta)4320_storage": {
        "encoding": "inplace",
        "label": "struct ContentTracer.ContentMeta",
        "members": [
          {
            "astId": 4317,
            "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
            "label": "size",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4319,
            "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
            "label": "count",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}