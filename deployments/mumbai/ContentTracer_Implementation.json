{
  "address": "0x5F284805210B1066057feda8cC8691D91Bb5e5DA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IIPFSStorageController",
          "name": "controller",
          "type": "address"
        }
      ],
      "name": "ControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "DefaultExpirationUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "Insert",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "Remove",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "contentSizes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IIPFSStorageController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExpiration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        },
        {
          "internalType": "contract IIPFSStorageController",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "defaultExpiration",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "insert",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "accounts",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "contents",
          "type": "string[]"
        },
        {
          "internalType": "uint256[]",
          "name": "sizes",
          "type": "uint256[]"
        }
      ],
      "name": "insertMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providers",
      "outputs": [
        {
          "internalType": "contract IProviders",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "remove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "accounts",
          "type": "bytes32[]"
        },
        {
          "internalType": "string[]",
          "name": "contents",
          "type": "string[]"
        }
      ],
      "name": "removeMult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIPFSStorageController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "name": "setDefaultExpiration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        }
      ],
      "name": "size",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x20a2ad6a439352b4eb0885d04abf3fe6e86517b32d0e51c96814112f7c6d5dd4",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0x5F284805210B1066057feda8cC8691D91Bb5e5DA",
    "transactionIndex": 40,
    "gasUsed": "1431277",
    "logsBloom": "0x
    "blockHash": "0xa6b8d242fc2566932c20ddf5409007f6d46c8eebfc450e36916cc89ef36651e9",
    "transactionHash": "0x20a2ad6a439352b4eb0885d04abf3fe6e86517b32d0e51c96814112f7c6d5dd4",
    "logs": [
      {
        "transactionIndex": 40,
        "blockNumber": 26332444,
        "transactionHash": "0x20a2ad6a439352b4eb0885d04abf3fe6e86517b32d0e51c96814112f7c6d5dd4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000002b38df0e2a0ff3000000000000000000000000000000000000000000000000372a86bd2bcaf56f00000000000000000000000000000000000000000000021e69dd8e3a733e2b0800000000000000000000000000000000000000000000000036ff4dde1da0e57c00000000000000000000000000000000000000000000021e6a08c71981683afb",
        "logIndex": 87,
        "blockHash": "0xa6b8d242fc2566932c20ddf5409007f6d46c8eebfc450e36916cc89ef36651e9"
      }
    ],
    "blockNumber": 26332444,
    "cumulativeGasUsed": "5282767",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "da9c392996f5bb5463935f1dd409f50d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIPFSStorageController\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"ControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"DefaultExpirationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"Insert\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"Remove\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"contentSizes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"},{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"defaultExpiration\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"insert\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"accounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"contents\",\"type\":\"string[]\"},{\"internalType\":\"uint256[]\",\"name\":\"sizes\",\"type\":\"uint256[]\"}],\"name\":\"insertMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"contract IProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"remove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"accounts\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"contents\",\"type\":\"string[]\"}],\"name\":\"removeMult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"}],\"name\":\"setDefaultExpiration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"}],\"name\":\"size\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"IPFS content tracer\",\"events\":{\"ControllerUpdated(address)\":{\"details\":\"emit when ipfs storage controller updated\",\"params\":{\"controller\":\"ipfs storage controller\"}},\"DefaultExpirationUpdated(uint256)\":{\"details\":\"emit when default expiration updated\",\"params\":{\"expiration\":\"default ipfs content expiration\"}},\"Insert(address,bytes32,string,uint256,uint256)\":{\"details\":\"emit when ipfs content inserted\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"expiration\":\"ipfs content expiration\",\"provider\":\"provider address\",\"size\":\"ipfs content size\"}},\"Remove(address,bytes32,string)\":{\"details\":\"emit when ipfs content removed\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"provider\":\"provider address\"}}},\"kind\":\"dev\",\"methods\":{\"exists(address,bytes32,string)\":{\"details\":\"return whether ipfs content exists in provider\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"ipfs ipfs content exists\"}},\"initialize(address,address,address,uint256)\":{\"details\":\"proxy initialize function\",\"params\":{\"controller\":\"ipfs storage controller\",\"defaultExpiration\":\"ipfs content default expiration\",\"owner\":\"contract owner\",\"providers\":\"providers contract address\"}},\"insert(bytes32,string,uint256)\":{\"details\":\"insert ipfs content\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"size\":\"ipfs account size\"}},\"insertMult(bytes32[],string[],uint256[])\":{\"details\":\"insert multiple ipfs content for accounts\",\"params\":{\"accounts\":\"array of user account\",\"contents\":\"array of ipfs contents\",\"sizes\":\"array of ipfs content size\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remove(bytes32,string)\":{\"details\":\"remove ipfs content\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\"}},\"removeMult(bytes32[],string[])\":{\"details\":\"remove ipfs content\",\"params\":{\"accounts\":\"array of user account\",\"contents\":\"array of ipfs contents\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setController(address)\":{\"details\":\"update ipfs storage controller\",\"params\":{\"_controller\":\"ipfs storage controller\"}},\"setDefaultExpiration(uint256)\":{\"details\":\"update ipfs content default expiration\",\"params\":{\"expiration\":\"ipfs content default expiration\"}},\"size(address,bytes32,string)\":{\"details\":\"return ipfs content size\",\"params\":{\"account\":\"user account\",\"content\":\"ipfs content\",\"provider\":\"provider address\"},\"returns\":{\"_0\":\"ipfs ipfs content size\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"contentSizes\":{\"details\":\"ipfs content content size\"},\"controller\":{\"details\":\"ipfs storage controller\"},\"defaultExpiration\":{\"details\":\"default ipfs content expiration\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ipfs/ContentTracer.sol\":\"ContentTracer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/interfaces/IProviders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev providers interface\\ninterface IProviders {\\n\\n\\t/// @dev emit when provider is added\\n\\t/// @param provider provider address\\n\\tevent AddProvider(address provider);\\n\\n\\t/// @dev emit when provider removed\\n\\t/// @param provider provider address\\n\\tevent RemoveProvider(address provider);\\n\\n\\t/// @dev return whether address is a provider\\n\\t/// @param provider address\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\t/// @dev return whether a valid signature\\n\\t/// @param provider address\\n\\t/// @param hash message hash\\n\\t/// @param signature provider signature for message hash\\n\\t/// @return is valid signature\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1e17872087bbe3412a8fe94b5ef9845f28203a3e5dc023d1d77f45cfb19c45c4\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IProviders.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper interface\\ninterface IProvidersWrapper {\\n\\n\\t/// @dev emit when providers contract updated\\n\\t/// @param providers providers contract\\n\\tevent ProvidersUpdated(IProviders providers);\\n\\n\\t/// @dev return providers contract address\\n\\tfunction providers() external view returns (IProviders);\\n}\\n\",\"keccak256\":\"0x5a9e87e7a31a20d951edcca6e94afcf07f83c866ebdb48fcf96817d24b5b75b2\",\"license\":\"UNLICENSE\"},\"contracts/ipfs/ContentTracer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '../providers/ProvidersWrapper.sol';\\nimport '../resources/interfaces/IIPFSStorageController.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS content tracer\\ncontract ContentTracer is ProvidersWrapper, OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t/// @dev ipfs storage controller\\n\\tIIPFSStorageController public controller;\\n\\n\\t/// @dev default ipfs content expiration\\n\\tuint256 public defaultExpiration;\\n\\n\\t/// @dev ipfs content content size\\n\\tmapping(address => mapping(bytes32 => mapping(string => uint256))) public contentSizes;\\n\\n\\t/// @dev emit when ipfs storage controller updated\\n\\t/// @param controller ipfs storage controller\\n\\tevent ControllerUpdated(IIPFSStorageController controller);\\n\\n\\t/// @dev emit when default expiration updated\\n\\t/// @param expiration default ipfs content expiration\\n\\tevent DefaultExpirationUpdated(uint256 expiration);\\n\\n\\t/// @dev emit when ipfs content inserted\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @param size ipfs content size\\n\\t/// @param expiration ipfs content expiration\\n\\tevent Insert(address provider, bytes32 account, string content, uint256 size, uint256 expiration);\\n\\n\\t/// @dev emit when ipfs content removed\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\tevent Remove(address provider, bytes32 account, string content);\\n\\n\\tmodifier onlyProvider() {\\n\\t\\trequire(providers.isProvider(msg.sender), 'ContentTracer: caller is not the provider');\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier nonSize(uint256 size) {\\n\\t\\trequire(size > 0, 'ContentTracer: zero size.');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev proxy initialize function\\n\\t/// @param owner contract owner\\n\\t/// @param providers providers contract address\\n\\t/// @param controller ipfs storage controller\\n\\t/// @param defaultExpiration ipfs content default expiration\\n\\tfunction initialize(address owner, IProviders providers, IIPFSStorageController controller, uint256 defaultExpiration) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Providers(providers);\\n\\t\\t_setController(controller);\\n\\t\\t_setDefaultExpiration(defaultExpiration);\\n\\t}\\n\\n\\t/// @dev update ipfs storage controller\\n\\t/// @param _controller ipfs storage controller\\n\\tfunction setController(IIPFSStorageController _controller) external onlyOwner {\\n\\t\\t_setController(_controller);\\n\\t}\\n\\n\\tfunction _setController(IIPFSStorageController _controller) internal {\\n\\t\\tcontroller = _controller;\\n\\t\\temit ControllerUpdated(_controller);\\n\\t}\\n\\n\\t/// @dev update ipfs content default expiration\\n\\t/// @param expiration ipfs content default expiration\\n\\tfunction setDefaultExpiration(uint256 expiration) external onlyOwner {\\n\\t\\t_setDefaultExpiration(expiration);\\n\\t}\\n\\n\\tfunction _setDefaultExpiration(uint256 expiration) internal {\\n\\t\\tdefaultExpiration = expiration;\\n\\t\\temit DefaultExpirationUpdated(expiration);\\n\\t}\\n\\n\\t/// @dev insert multiple ipfs content for accounts\\n\\t/// @param accounts array of user account\\n\\t/// @param contents array of ipfs contents\\n\\t/// @param sizes array of ipfs content size\\n\\tfunction insertMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tstring[] memory contents,\\n\\t\\tuint256[] memory sizes\\n\\t) external onlyProvider {\\n\\t\\trequire(accounts.length == contents.length, 'ContentTracer: Invalid parameter length.');\\n\\t\\trequire(accounts.length == sizes.length, 'ContentTracer: Invalid parameter length.');\\n\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\t_insert(msg.sender, accounts[i], contents[i], sizes[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev insert ipfs content\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @param size ipfs account size\\n\\tfunction insert(\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content,\\n\\t\\tuint256 size\\n\\t) public nonSize(size) onlyProvider {\\n\\t\\t_insert(msg.sender, account, content, size);\\n\\t}\\n\\n\\tfunction _insert(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content,\\n\\t\\tuint256 size\\n\\t) internal nonSize(size) {\\n\\t\\trequire(!exists(provider, account, content), 'ContentTracer: content exists');\\n\\t\\tcontentSizes[provider][account][content] = size;\\n\\t\\tuint256 expiration = controller.isExpired(account)? defaultExpiration : controller.expiredAt(account);\\n\\n\\t\\temit Insert(provider, account, content, size, expiration);\\n\\t}\\n\\n\\t/// @dev remove ipfs content\\n\\t/// @param accounts array of user account\\n\\t/// @param contents array of ipfs contents\\n\\tfunction removeMult(\\n\\t\\tbytes32[] memory accounts,\\n\\t\\tstring[] memory contents\\n\\t) external onlyProvider {\\n\\t\\trequire(accounts.length == contents.length, 'ContentTracer: Invalid parameter length.');\\n\\t\\tfor (uint256 i = 0; i < accounts.length; i++) {\\n\\t\\t\\t_remove(msg.sender, accounts[i], contents[i]);\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev remove ipfs content\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\tfunction remove(bytes32 account, string memory content) public onlyProvider {\\n\\t\\t_remove(msg.sender, account, content);\\n\\t}\\n\\n\\tfunction _remove(\\n\\t\\taddress provider,\\n\\t\\tbytes32 account,\\n\\t\\tstring memory content\\n\\t) internal {\\n\\t\\trequire(exists(provider, account, content), 'ContentTracer: nonexistent content');\\n\\t\\tdelete contentSizes[provider][account][content];\\n\\n\\t\\temit Remove(provider, account, content);\\n\\t}\\n\\n\\t/// @dev return whether ipfs content exists in provider\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @return ipfs ipfs content exists\\n\\tfunction exists(address provider, bytes32 account, string memory content) public view returns (bool) {\\n\\t\\treturn contentSizes[provider][account][content] != 0;\\n\\t}\\n\\n\\t/// @dev return ipfs content size\\n\\t/// @param provider provider address\\n\\t/// @param account user account\\n\\t/// @param content ipfs content\\n\\t/// @return ipfs ipfs content size\\n\\tfunction size(address provider, bytes32 account, string memory content) public view returns (uint256) {\\n\\t\\trequire(providers.isProvider(provider), 'ContentTracer: nonexistent provider');\\n\\t\\trequire(exists(provider, account, content), 'ContentTracer: nonexistent content');\\n\\t\\treturn contentSizes[provider][account][content];\\n\\t}\\n\\n}\",\"keccak256\":\"0x3d9346b7fdf3bdedd10cc32ac4e9e218329ebe76ebba9087563a05355d57f207\",\"license\":\"GPL-3.0-only\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n//// @title A title that should describe the contract/interface\\n/// @author Alexandas\\n/// @dev resource data library\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0x5b86dc0b7ea5977bce51cc42289f2dfef3d63ba3f9ea538d82e0c2d1e6e31a16\",\"license\":\"UNLICENSE\"},\"contracts/providers/ProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '../interfaces/IProvidersWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper contract\\nabstract contract ProvidersWrapper is IProvidersWrapper, Initializable {\\n\\t/// @dev providers contract address\\n\\tIProviders public override providers;\\n\\n\\t/// @dev initialize providers contract\\n\\t/// @param _providers providers contract address\\n\\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\\n\\t\\t_setProviders(_providers);\\n\\t}\\n\\n\\tfunction _setProviders(IProviders _providers) internal {\\n\\t\\tproviders = _providers;\\n\\t\\temit ProvidersUpdated(_providers);\\n\\t}\\n}\\n\",\"keccak256\":\"0xcb18f1276cfa2c7d9eaf9764fabacdc39df2823de77342acfec0aa8732062863\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IAdaptorWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IResourceAdaptor.sol';\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adaptor interface\\ninterface IAdaptorWrapper {\\n\\n\\t/// @dev emit when resource adaptor updated\\n\\t/// @param adaptor resource adaptor contract address\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\t/// @dev emit when resource type updated\\n\\t/// @param resourceType resource type\\n\\tevent ResourceTypeUpdated(ResourceData.ResourceType resourceType);\\n\\n\\t/// @dev return resource adaptor contract address\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n\\n\\t/// @dev return resource type\\n\\tfunction resourceType() external view returns (ResourceData.ResourceType);\\n\\n\\t/// @dev return resource price\\n\\tfunction price() external view returns (uint256);\\n\\n\\t/// @dev calculate resource value for amount\\n\\tfunction getValueOf(uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev calculate resource amount for value\\n\\tfunction getAmountOf(uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe88ffa3b628ea9920d0c375aeb12a0cd315254213e23e438987a016b1e13f407\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IIPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './IAdaptorWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS storage controller interface\\ninterface IIPFSStorageController is IAdaptorWrapper {\\n\\tstruct IPFSStorage {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @dev emit when ipfs resource expanded\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\tevent Expanded(bytes32 account, uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\t/// @dev expand ipfs resource\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\tfunction expand(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external;\\n\\n\\t/// @dev return whether the account is expired\\n\\t/// @param account user account\\n\\t/// @return whether the account is expired\\n\\tfunction isExpired(bytes32 account) external view returns (bool);\\n\\n\\t/// @dev ipfs resource start time\\n\\t/// @param account user account\\n\\t/// @return start time for ipfs resource\\n\\tfunction startTime(bytes32 account) external view returns (uint256);\\n\\t\\n\\t/// @dev return available expiration time for the account\\n\\t/// @param account user account\\n\\t/// @return available expiration time for the account\\n\\tfunction availableExpiration(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the account\\n\\t/// @param account user account\\n\\t/// @return total expiration time for the account\\n\\tfunction expiration(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return when the account will expire\\n\\t/// @param account user account\\n\\t/// @return when the account will expire\\n\\tfunction expiredAt(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the account\\n\\t/// @param account user account\\n\\t/// @return ipfs storage amount for the account\\n\\tfunction balanceOf(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev calculate fee for storage and expiration\\n\\t/// @param account user account\\n\\t/// @param expandedStorage storage amount\\n\\t/// @param expandedExpiration  expiration(in seconds)\\n\\t/// @return expandedStorageFee storage fee\\n\\t/// @return expandedExpirationFee expiration fee\\n\\tfunction expandedFee(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorage,\\n\\t\\tuint256 expandedExpiration\\n\\t) external view returns (uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\t/// @dev calculate fee for storage and expiration\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\t/// @return expandedStorage storage amount\\n\\t/// @return expandedExpiration expiration(in seconds)\\n\\tfunction expansions(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external view returns (uint256 expandedStorage, uint256 expandedExpiration);\\n}\\n\",\"keccak256\":\"0xf63eb6181debf5fa3aaf46674a5a23568419b17f3ab1b15f2a14851a931e8201\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adpator interface\\ninterface IResourceAdaptor {\\n\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @dev emit when price updated\\n\\t/// @param adaptors price adaptors\\n\\tevent PriceAdaptorsUpdated(PriceAdaptor[] adaptors);\\n\\n\\t/// @dev get price for resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param _indexBlock block number\\n\\t/// @return price for resource at a specific block\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\t/// @dev get value for `amount` resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @param _indexBlock block number\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block \\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @param _indexBlock block numer\\n\\t/// @return resource amount\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value \\n\\t/// @param resourceType resource type\\n\\t/// @param value token value in resource decimals(18)\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd75f211a1619376bec9c9cf94113b9b22e083734d6ddf85346b13bedc7528666\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118ef806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c8063bed1706511610097578063e65da1e711610066578063e65da1e714610232578063f2fde38b14610245578063f77c479114610258578063f8401fe61461027857600080fd5b8063bed17065146101e6578063cf756fdf146101f9578063db1701251461020c578063de47238c1461021f57600080fd5b80638da5cb5b116100d35780638da5cb5b1461015457806392eefe9b1461016d578063b3ecfa3a14610180578063b7ab2883146101c657600080fd5b806351ae4cd3146101055780636b3bfae61461011a578063715018a61461013957806375667dbe14610141575b600080fd5b610118610113366004610d97565b610291565b005b61012360665481565b6040516101309190610dc8565b60405180910390f35b6101186102d0565b61011861014f36600461107b565b610306565b6033546001600160a01b03166040516101309190611135565b61011861017b366004611162565b610464565b61012361018e366004611197565b606760209081526000938452604080852082529284529190922082518084018301805192815290830193909201929092209190525481565b6101d96101d4366004611197565b610497565b6040516101309190611200565b6101186101f436600461120e565b6104e2565b61011861020736600461126f565b6105b0565b61011861021a3660046112d3565b61064a565b61011861022d36600461132b565b6106fa565b610123610240366004611197565b61081c565b610118610253366004611393565b61092f565b60655461026b906001600160a01b031681565b60405161013091906113c8565b60005461026b906201000090046001600160a01b031681565b6033546001600160a01b031633146102c45760405162461bcd60e51b81526004016102bb9061140b565b60405180910390fd5b6102cd81610988565b50565b6033546001600160a01b031633146102fa5760405162461bcd60e51b81526004016102bb9061140b565b61030460006109c8565b565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061033b903390600401611135565b60206040518083038186803b15801561035357600080fd5b505afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b919061142e565b6103a75760405162461bcd60e51b81526004016102bb90611498565b81518351146103c85760405162461bcd60e51b81526004016102bb906114ed565b80518351146103e95760405162461bcd60e51b81526004016102bb906114ed565b60005b835181101561045e5761044c3385838151811061040b5761040b6114fd565b6020026020010151858481518110610425576104256114fd565b602002602001015185858151811061043f5761043f6114fd565b6020026020010151610a1a565b8061045681611529565b9150506103ec565b50505050565b6033546001600160a01b0316331461048e5760405162461bcd60e51b81526004016102bb9061140b565b6102cd81610c01565b6001600160a01b038316600090815260676020908152604080832085845290915280822090516104c8908490611592565b908152604051908190036020019020541515949350505050565b80600081116105035760405162461bcd60e51b81526004016102bb906115d9565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610538903390600401611135565b60206040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610588919061142e565b6105a45760405162461bcd60e51b81526004016102bb90611498565b61045e33858585610a1a565b600054610100900460ff166105cb5760005460ff16156105cf565b303b155b6105eb5760405162461bcd60e51b81526004016102bb90611634565b600054610100900460ff1615801561060d576000805461ffff19166101011790555b610616856109c8565b61061f84610c4c565b61062883610c01565b61063182610988565b8015610643576000805461ff00191690555b5050505050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061067f903390600401611135565b60206040518083038186803b15801561069757600080fd5b505afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf919061142e565b6106eb5760405162461bcd60e51b81526004016102bb90611498565b6106f6338383610c7c565b5050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061072f903390600401611135565b60206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f919061142e565b61079b5760405162461bcd60e51b81526004016102bb90611498565b80518251146107bc5760405162461bcd60e51b81526004016102bb906114ed565b60005b825181101561081757610805338483815181106107de576107de6114fd565b60200260200101518484815181106107f8576107f86114fd565b6020026020010151610c7c565b8061080f81611529565b9150506107bf565b505050565b60008054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610852908790600401611135565b60206040518083038186803b15801561086a57600080fd5b505afa15801561087e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a2919061142e565b6108be5760405162461bcd60e51b81526004016102bb90611684565b6108c9848484610497565b6108e55760405162461bcd60e51b81526004016102bb906116d3565b6001600160a01b0384166000908152606760209081526040808320868452909152908190209051610917908490611592565b90815260200160405180910390205490509392505050565b6033546001600160a01b031633146109595760405162461bcd60e51b81526004016102bb9061140b565b6001600160a01b03811661097f5760405162461bcd60e51b81526004016102bb90611726565b6102cd816109c8565b60668190556040517f5a9799c5960287e61a9cc19f9c41ef3ee249ec2e469df615760c0075b1b487a3906109bd908390610dc8565b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8060008111610a3b5760405162461bcd60e51b81526004016102bb906115d9565b610a46858585610497565b15610a635760405162461bcd60e51b81526004016102bb9061176a565b6001600160a01b0385166000908152606760209081526040808320878452909152908190209051839190610a98908690611592565b908152604051908190036020018120919091556065546336d97f5960e11b82526000916001600160a01b0390911690636db2feb290610adb908890600401610dc8565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b919061142e565b610bb45760655460405163f74d561f60e01b81526001600160a01b039091169063f74d561f90610b5f908890600401610dc8565b60206040518083038186803b158015610b7757600080fd5b505afa158015610b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baf9190611785565b610bb8565b6066545b90507fbf3b73929b09508ab734523ae2e03136d123d7011074b0ea845fd26e8749ed2c8686868685604051610bf19594939291906117d8565b60405180910390a1505050505050565b606580546001600160a01b0319166001600160a01b0383161790556040517f1304018cfe79741dcf02ba6b61d39cc4757d59395d03224d9925c7aa83002146906109bd9083906113c8565b600054610100900460ff16610c735760405162461bcd60e51b81526004016102bb90611873565b6102cd81610d27565b610c87838383610497565b610ca35760405162461bcd60e51b81526004016102bb906116d3565b6001600160a01b0383166000908152606760209081526040808320858452909152908190209051610cd5908390611592565b9081526020016040518091039020600090557f20b2a0e9bd2cadc08b645e5d8c204c6d86d3c23817b100e0346846e77a88d7c9838383604051610d1a93929190611883565b60405180910390a1505050565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c5284906109bd9083906113c8565b805b81146102cd57600080fd5b8035610d9181610d79565b92915050565b600060208284031215610dac57610dac600080fd5b6000610db88484610d86565b949350505050565b805b82525050565b60208101610d918284610dc0565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610e1257610e12610dd6565b6040525050565b6000610e2460405190565b9050610e308282610dec565b919050565b600067ffffffffffffffff821115610e4f57610e4f610dd6565b5060209081020190565b6000610e6c610e6784610e35565b610e19565b83815290506020808201908402830185811115610e8b57610e8b600080fd5b835b81811015610eaf5780610ea08882610d86565b84525060209283019201610e8d565b5050509392505050565b600082601f830112610ecd57610ecd600080fd5b8135610db8848260208601610e59565b600067ffffffffffffffff821115610ef757610ef7610dd6565b601f19601f83011660200192915050565b82818337506000910152565b6000610f22610e6784610edd565b905082815260208101848484011115610f3d57610f3d600080fd5b610f48848285610f08565b509392505050565b600082601f830112610f6457610f64600080fd5b8135610db8848260208601610f14565b6000610f82610e6784610e35565b83815290506020808201908402830185811115610fa157610fa1600080fd5b835b81811015610eaf57803567ffffffffffffffff811115610fc557610fc5600080fd5b808601610fd28982610f50565b8552505060209283019201610fa3565b600082601f830112610ff657610ff6600080fd5b8135610db8848260208601610f74565b6000611014610e6784610e35565b8381529050602080820190840283018581111561103357611033600080fd5b835b81811015610eaf57806110488882610d86565b84525060209283019201611035565b600082601f83011261106b5761106b600080fd5b8135610db8848260208601611006565b60008060006060848603121561109357611093600080fd5b833567ffffffffffffffff8111156110ad576110ad600080fd5b6110b986828701610eb9565b935050602084013567ffffffffffffffff8111156110d9576110d9600080fd5b6110e586828701610fe2565b925050604084013567ffffffffffffffff81111561110557611105600080fd5b61111186828701611057565b9150509250925092565b60006001600160a01b038216610d91565b610dc28161111b565b60208101610d91828461112c565b6000610d918261111b565b610d7b81611143565b8035610d918161114e565b60006020828403121561117757611177600080fd5b6000610db88484611157565b610d7b8161111b565b8035610d9181611183565b6000806000606084860312156111af576111af600080fd5b60006111bb868661118c565b93505060206111cc86828701610d86565b925050604084013567ffffffffffffffff8111156111ec576111ec600080fd5b61111186828701610f50565b801515610dc2565b60208101610d9182846111f8565b60008060006060848603121561122657611226600080fd5b60006112328686610d86565b935050602084013567ffffffffffffffff81111561125257611252600080fd5b61125e86828701610f50565b925050604061111186828701610d86565b6000806000806080858703121561128857611288600080fd5b6000611294878761118c565b94505060206112a587828801611157565b93505060406112b687828801611157565b92505060606112c787828801610d86565b91505092959194509250565b600080604083850312156112e9576112e9600080fd5b60006112f58585610d86565b925050602083013567ffffffffffffffff81111561131557611315600080fd5b61132185828601610f50565b9150509250929050565b6000806040838503121561134157611341600080fd5b823567ffffffffffffffff81111561135b5761135b600080fd5b61136785828601610eb9565b925050602083013567ffffffffffffffff81111561138757611387600080fd5b61132185828601610fe2565b6000602082840312156113a8576113a8600080fd5b6000610db8848461118c565b6000610d9182611143565b610dc2816113b4565b60208101610d9182846113bf565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610d91816113d6565b801515610d7b565b8051610d918161141b565b60006020828403121561144357611443600080fd5b6000610db88484611423565b602981526000602082017f436f6e74656e745472616365723a2063616c6c6572206973206e6f742074686581526810383937bb34b232b960b91b602082015291505b5060400190565b60208082528101610d918161144f565b602881526000602082017f436f6e74656e745472616365723a20496e76616c696420706172616d65746572815267103632b733ba341760c11b60208201529150611491565b60208082528101610d91816114a8565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561153d5761153d611513565b5060010190565b60005b8381101561155f578181015183820152602001611547565b8381111561045e5750506000910152565b600061157a825190565b611588818560208601611544565b9290920192915050565b600061159e8284611570565b9392505050565b601981526000602082017f436f6e74656e745472616365723a207a65726f2073697a652e0000000000000081529150611404565b60208082528101610d91816115a5565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611491565b60208082528101610d91816115e9565b602381526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e742070726f76698152623232b960e91b60208201529150611491565b60208082528101610d9181611644565b602281526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e7420636f6e74658152611b9d60f21b60208201529150611491565b60208082528101610d9181611694565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611491565b60208082528101610d91816116e3565b601d81526000602082017f436f6e74656e745472616365723a20636f6e74656e742065786973747300000081529150611404565b60208082528101610d9181611736565b8051610d9181610d79565b60006020828403121561179a5761179a600080fd5b6000610db8848461177a565b60006117b0825190565b8084526020840193506117c7818560208601611544565b601f01601f19169290920192915050565b60a081016117e6828861112c565b6117f36020830187610dc0565b818103604083015261180581866117a6565b90506118146060830185610dc0565b6118216080830184610dc0565b9695505050505050565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611491565b60208082528101610d918161182b565b60608101611891828661112c565b61189e6020830185610dc0565b81810360408301526118b081846117a6565b9594505050505056fea26469706673582212201d21db6d7aedf0402addb85cd78c594afb14d2866acb87d0b847b579d5f8408f64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c8063bed1706511610097578063e65da1e711610066578063e65da1e714610232578063f2fde38b14610245578063f77c479114610258578063f8401fe61461027857600080fd5b8063bed17065146101e6578063cf756fdf146101f9578063db1701251461020c578063de47238c1461021f57600080fd5b80638da5cb5b116100d35780638da5cb5b1461015457806392eefe9b1461016d578063b3ecfa3a14610180578063b7ab2883146101c657600080fd5b806351ae4cd3146101055780636b3bfae61461011a578063715018a61461013957806375667dbe14610141575b600080fd5b610118610113366004610d97565b610291565b005b61012360665481565b6040516101309190610dc8565b60405180910390f35b6101186102d0565b61011861014f36600461107b565b610306565b6033546001600160a01b03166040516101309190611135565b61011861017b366004611162565b610464565b61012361018e366004611197565b606760209081526000938452604080852082529284529190922082518084018301805192815290830193909201929092209190525481565b6101d96101d4366004611197565b610497565b6040516101309190611200565b6101186101f436600461120e565b6104e2565b61011861020736600461126f565b6105b0565b61011861021a3660046112d3565b61064a565b61011861022d36600461132b565b6106fa565b610123610240366004611197565b61081c565b610118610253366004611393565b61092f565b60655461026b906001600160a01b031681565b60405161013091906113c8565b60005461026b906201000090046001600160a01b031681565b6033546001600160a01b031633146102c45760405162461bcd60e51b81526004016102bb9061140b565b60405180910390fd5b6102cd81610988565b50565b6033546001600160a01b031633146102fa5760405162461bcd60e51b81526004016102bb9061140b565b61030460006109c8565b565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061033b903390600401611135565b60206040518083038186803b15801561035357600080fd5b505afa158015610367573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038b919061142e565b6103a75760405162461bcd60e51b81526004016102bb90611498565b81518351146103c85760405162461bcd60e51b81526004016102bb906114ed565b80518351146103e95760405162461bcd60e51b81526004016102bb906114ed565b60005b835181101561045e5761044c3385838151811061040b5761040b6114fd565b6020026020010151858481518110610425576104256114fd565b602002602001015185858151811061043f5761043f6114fd565b6020026020010151610a1a565b8061045681611529565b9150506103ec565b50505050565b6033546001600160a01b0316331461048e5760405162461bcd60e51b81526004016102bb9061140b565b6102cd81610c01565b6001600160a01b038316600090815260676020908152604080832085845290915280822090516104c8908490611592565b908152604051908190036020019020541515949350505050565b80600081116105035760405162461bcd60e51b81526004016102bb906115d9565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610538903390600401611135565b60206040518083038186803b15801561055057600080fd5b505afa158015610564573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610588919061142e565b6105a45760405162461bcd60e51b81526004016102bb90611498565b61045e33858585610a1a565b600054610100900460ff166105cb5760005460ff16156105cf565b303b155b6105eb5760405162461bcd60e51b81526004016102bb90611634565b600054610100900460ff1615801561060d576000805461ffff19166101011790555b610616856109c8565b61061f84610c4c565b61062883610c01565b61063182610988565b8015610643576000805461ff00191690555b5050505050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061067f903390600401611135565b60206040518083038186803b15801561069757600080fd5b505afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf919061142e565b6106eb5760405162461bcd60e51b81526004016102bb90611498565b6106f6338383610c7c565b5050565b600054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a079061072f903390600401611135565b60206040518083038186803b15801561074757600080fd5b505afa15801561075b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077f919061142e565b61079b5760405162461bcd60e51b81526004016102bb90611498565b80518251146107bc5760405162461bcd60e51b81526004016102bb906114ed565b60005b825181101561081757610805338483815181106107de576107de6114fd565b60200260200101518484815181106107f8576107f86114fd565b6020026020010151610c7c565b8061080f81611529565b9150506107bf565b505050565b60008054604051636b074a0760e01b8152620100009091046001600160a01b031690636b074a0790610852908790600401611135565b60206040518083038186803b15801561086a57600080fd5b505afa15801561087e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a2919061142e565b6108be5760405162461bcd60e51b81526004016102bb90611684565b6108c9848484610497565b6108e55760405162461bcd60e51b81526004016102bb906116d3565b6001600160a01b0384166000908152606760209081526040808320868452909152908190209051610917908490611592565b90815260200160405180910390205490509392505050565b6033546001600160a01b031633146109595760405162461bcd60e51b81526004016102bb9061140b565b6001600160a01b03811661097f5760405162461bcd60e51b81526004016102bb90611726565b6102cd816109c8565b60668190556040517f5a9799c5960287e61a9cc19f9c41ef3ee249ec2e469df615760c0075b1b487a3906109bd908390610dc8565b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b8060008111610a3b5760405162461bcd60e51b81526004016102bb906115d9565b610a46858585610497565b15610a635760405162461bcd60e51b81526004016102bb9061176a565b6001600160a01b0385166000908152606760209081526040808320878452909152908190209051839190610a98908690611592565b908152604051908190036020018120919091556065546336d97f5960e11b82526000916001600160a01b0390911690636db2feb290610adb908890600401610dc8565b60206040518083038186803b158015610af357600080fd5b505afa158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b919061142e565b610bb45760655460405163f74d561f60e01b81526001600160a01b039091169063f74d561f90610b5f908890600401610dc8565b60206040518083038186803b158015610b7757600080fd5b505afa158015610b8b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610baf9190611785565b610bb8565b6066545b90507fbf3b73929b09508ab734523ae2e03136d123d7011074b0ea845fd26e8749ed2c8686868685604051610bf19594939291906117d8565b60405180910390a1505050505050565b606580546001600160a01b0319166001600160a01b0383161790556040517f1304018cfe79741dcf02ba6b61d39cc4757d59395d03224d9925c7aa83002146906109bd9083906113c8565b600054610100900460ff16610c735760405162461bcd60e51b81526004016102bb90611873565b6102cd81610d27565b610c87838383610497565b610ca35760405162461bcd60e51b81526004016102bb906116d3565b6001600160a01b0383166000908152606760209081526040808320858452909152908190209051610cd5908390611592565b9081526020016040518091039020600090557f20b2a0e9bd2cadc08b645e5d8c204c6d86d3c23817b100e0346846e77a88d7c9838383604051610d1a93929190611883565b60405180910390a1505050565b6000805462010000600160b01b031916620100006001600160a01b038416021790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c5284906109bd9083906113c8565b805b81146102cd57600080fd5b8035610d9181610d79565b92915050565b600060208284031215610dac57610dac600080fd5b6000610db88484610d86565b949350505050565b805b82525050565b60208101610d918284610dc0565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610e1257610e12610dd6565b6040525050565b6000610e2460405190565b9050610e308282610dec565b919050565b600067ffffffffffffffff821115610e4f57610e4f610dd6565b5060209081020190565b6000610e6c610e6784610e35565b610e19565b83815290506020808201908402830185811115610e8b57610e8b600080fd5b835b81811015610eaf5780610ea08882610d86565b84525060209283019201610e8d565b5050509392505050565b600082601f830112610ecd57610ecd600080fd5b8135610db8848260208601610e59565b600067ffffffffffffffff821115610ef757610ef7610dd6565b601f19601f83011660200192915050565b82818337506000910152565b6000610f22610e6784610edd565b905082815260208101848484011115610f3d57610f3d600080fd5b610f48848285610f08565b509392505050565b600082601f830112610f6457610f64600080fd5b8135610db8848260208601610f14565b6000610f82610e6784610e35565b83815290506020808201908402830185811115610fa157610fa1600080fd5b835b81811015610eaf57803567ffffffffffffffff811115610fc557610fc5600080fd5b808601610fd28982610f50565b8552505060209283019201610fa3565b600082601f830112610ff657610ff6600080fd5b8135610db8848260208601610f74565b6000611014610e6784610e35565b8381529050602080820190840283018581111561103357611033600080fd5b835b81811015610eaf57806110488882610d86565b84525060209283019201611035565b600082601f83011261106b5761106b600080fd5b8135610db8848260208601611006565b60008060006060848603121561109357611093600080fd5b833567ffffffffffffffff8111156110ad576110ad600080fd5b6110b986828701610eb9565b935050602084013567ffffffffffffffff8111156110d9576110d9600080fd5b6110e586828701610fe2565b925050604084013567ffffffffffffffff81111561110557611105600080fd5b61111186828701611057565b9150509250925092565b60006001600160a01b038216610d91565b610dc28161111b565b60208101610d91828461112c565b6000610d918261111b565b610d7b81611143565b8035610d918161114e565b60006020828403121561117757611177600080fd5b6000610db88484611157565b610d7b8161111b565b8035610d9181611183565b6000806000606084860312156111af576111af600080fd5b60006111bb868661118c565b93505060206111cc86828701610d86565b925050604084013567ffffffffffffffff8111156111ec576111ec600080fd5b61111186828701610f50565b801515610dc2565b60208101610d9182846111f8565b60008060006060848603121561122657611226600080fd5b60006112328686610d86565b935050602084013567ffffffffffffffff81111561125257611252600080fd5b61125e86828701610f50565b925050604061111186828701610d86565b6000806000806080858703121561128857611288600080fd5b6000611294878761118c565b94505060206112a587828801611157565b93505060406112b687828801611157565b92505060606112c787828801610d86565b91505092959194509250565b600080604083850312156112e9576112e9600080fd5b60006112f58585610d86565b925050602083013567ffffffffffffffff81111561131557611315600080fd5b61132185828601610f50565b9150509250929050565b6000806040838503121561134157611341600080fd5b823567ffffffffffffffff81111561135b5761135b600080fd5b61136785828601610eb9565b925050602083013567ffffffffffffffff81111561138757611387600080fd5b61132185828601610fe2565b6000602082840312156113a8576113a8600080fd5b6000610db8848461118c565b6000610d9182611143565b610dc2816113b4565b60208101610d9182846113bf565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b60208082528101610d91816113d6565b801515610d7b565b8051610d918161141b565b60006020828403121561144357611443600080fd5b6000610db88484611423565b602981526000602082017f436f6e74656e745472616365723a2063616c6c6572206973206e6f742074686581526810383937bb34b232b960b91b602082015291505b5060400190565b60208082528101610d918161144f565b602881526000602082017f436f6e74656e745472616365723a20496e76616c696420706172616d65746572815267103632b733ba341760c11b60208201529150611491565b60208082528101610d91816114a8565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561153d5761153d611513565b5060010190565b60005b8381101561155f578181015183820152602001611547565b8381111561045e5750506000910152565b600061157a825190565b611588818560208601611544565b9290920192915050565b600061159e8284611570565b9392505050565b601981526000602082017f436f6e74656e745472616365723a207a65726f2073697a652e0000000000000081529150611404565b60208082528101610d91816115a5565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b60208201529150611491565b60208082528101610d91816115e9565b602381526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e742070726f76698152623232b960e91b60208201529150611491565b60208082528101610d9181611644565b602281526000602082017f436f6e74656e745472616365723a206e6f6e6578697374656e7420636f6e74658152611b9d60f21b60208201529150611491565b60208082528101610d9181611694565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b60208201529150611491565b60208082528101610d91816116e3565b601d81526000602082017f436f6e74656e745472616365723a20636f6e74656e742065786973747300000081529150611404565b60208082528101610d9181611736565b8051610d9181610d79565b60006020828403121561179a5761179a600080fd5b6000610db8848461177a565b60006117b0825190565b8084526020840193506117c7818560208601611544565b601f01601f19169290920192915050565b60a081016117e6828861112c565b6117f36020830187610dc0565b818103604083015261180581866117a6565b90506118146060830185610dc0565b6118216080830184610dc0565b9695505050505050565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b60208201529150611491565b60208082528101610d918161182b565b60608101611891828661112c565b61189e6020830185610dc0565b81810360408301526118b081846117a6565b9594505050505056fea26469706673582212201d21db6d7aedf0402addb85cd78c594afb14d2866acb87d0b847b579d5f8408f64736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "IPFS content tracer",
    "events": {
      "ControllerUpdated(address)": {
        "details": "emit when ipfs storage controller updated",
        "params": {
          "controller": "ipfs storage controller"
        }
      },
      "DefaultExpirationUpdated(uint256)": {
        "details": "emit when default expiration updated",
        "params": {
          "expiration": "default ipfs content expiration"
        }
      },
      "Insert(address,bytes32,string,uint256,uint256)": {
        "details": "emit when ipfs content inserted",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "expiration": "ipfs content expiration",
          "provider": "provider address",
          "size": "ipfs content size"
        }
      },
      "Remove(address,bytes32,string)": {
        "details": "emit when ipfs content removed",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "provider": "provider address"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "exists(address,bytes32,string)": {
        "details": "return whether ipfs content exists in provider",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "provider": "provider address"
        },
        "returns": {
          "_0": "ipfs ipfs content exists"
        }
      },
      "initialize(address,address,address,uint256)": {
        "details": "proxy initialize function",
        "params": {
          "controller": "ipfs storage controller",
          "defaultExpiration": "ipfs content default expiration",
          "owner": "contract owner",
          "providers": "providers contract address"
        }
      },
      "insert(bytes32,string,uint256)": {
        "details": "insert ipfs content",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "size": "ipfs account size"
        }
      },
      "insertMult(bytes32[],string[],uint256[])": {
        "details": "insert multiple ipfs content for accounts",
        "params": {
          "accounts": "array of user account",
          "contents": "array of ipfs contents",
          "sizes": "array of ipfs content size"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "remove(bytes32,string)": {
        "details": "remove ipfs content",
        "params": {
          "account": "user account",
          "content": "ipfs content"
        }
      },
      "removeMult(bytes32[],string[])": {
        "details": "remove ipfs content",
        "params": {
          "accounts": "array of user account",
          "contents": "array of ipfs contents"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setController(address)": {
        "details": "update ipfs storage controller",
        "params": {
          "_controller": "ipfs storage controller"
        }
      },
      "setDefaultExpiration(uint256)": {
        "details": "update ipfs content default expiration",
        "params": {
          "expiration": "ipfs content default expiration"
        }
      },
      "size(address,bytes32,string)": {
        "details": "return ipfs content size",
        "params": {
          "account": "user account",
          "content": "ipfs content",
          "provider": "provider address"
        },
        "returns": {
          "_0": "ipfs ipfs content size"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "contentSizes": {
        "details": "ipfs content content size"
      },
      "controller": {
        "details": "ipfs storage controller"
      },
      "defaultExpiration": {
        "details": "default ipfs content expiration"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6983,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "providers",
        "offset": 2,
        "slot": "0",
        "type": "t_contract(IProviders)4319"
      },
      {
        "astId": 970,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4355,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "controller",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IIPFSStorageController)8473"
      },
      {
        "astId": 4358,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "defaultExpiration",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 4367,
        "contract": "contracts/ipfs/ContentTracer.sol:ContentTracer",
        "label": "contentSizes",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_uint256)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IIPFSStorageController)8473": {
        "encoding": "inplace",
        "label": "contract IIPFSStorageController",
        "numberOfBytes": "20"
      },
      "t_contract(IProviders)4319": {
        "encoding": "inplace",
        "label": "contract IProviders",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_uint256)))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => mapping(string => uint256)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_uint256))"
      },
      "t_mapping(t_bytes32,t_mapping(t_string_memory_ptr,t_uint256))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(string => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}