{
  "address": "0xFE7819B5f4503e19C6F4e044fE2F4ECc0a1C351B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "name": "SetPriceAdaptors",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexBlock",
          "type": "uint256"
        }
      ],
      "name": "getAmountAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "getAmountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_indexBlock",
          "type": "uint256"
        }
      ],
      "name": "getValueAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getValueOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_indexBlock",
          "type": "uint256"
        }
      ],
      "name": "priceAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum ResourceData.ResourceType",
          "name": "resourceType",
          "type": "uint8"
        }
      ],
      "name": "priceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct ResourceAdaptor.PriceAdaptor[]",
          "name": "adaptors",
          "type": "tuple[]"
        }
      ],
      "name": "setPriceAdaptors",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd435f4dc006d7fcc2d237e09e46dc04c2a005ea24807d1c1d3fb44a1b0f27fc7",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xFE7819B5f4503e19C6F4e044fE2F4ECc0a1C351B",
    "transactionIndex": 2,
    "gasUsed": "960259",
    "logsBloom": "0x000000000000000008000000000000000000000000000000008000000000040000000000000000100000000000000000000080000000000000000000000000000000000002000000000100000000008000010000000000000001000000000040000000000200000000000000000208000000000000000000a0000000000000400000000000000000000000000000000000000000000080000000000000000000200000000000000000000000000000000000000000000000000200000000004000000000000000000001200000000000000000000000000000100040000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xd24bd00dda66b8e2e4ce2f93821c368c2dbd252d12a6f73ce6efecd8bc64245a",
    "transactionHash": "0xd435f4dc006d7fcc2d237e09e46dc04c2a005ea24807d1c1d3fb44a1b0f27fc7",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 26235493,
        "transactionHash": "0xd435f4dc006d7fcc2d237e09e46dc04c2a005ea24807d1c1d3fb44a1b0f27fc7",
        "address": "0xFE7819B5f4503e19C6F4e044fE2F4ECc0a1C351B",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d"
        ],
        "data": "0x",
        "logIndex": 104,
        "blockHash": "0xd24bd00dda66b8e2e4ce2f93821c368c2dbd252d12a6f73ce6efecd8bc64245a"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 26235493,
        "transactionHash": "0xd435f4dc006d7fcc2d237e09e46dc04c2a005ea24807d1c1d3fb44a1b0f27fc7",
        "address": "0xFE7819B5f4503e19C6F4e044fE2F4ECc0a1C351B",
        "topics": [
          "0xdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef5"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000002ef04be00000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000002ef04be00000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000002ef04be00000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000002ef04be00",
        "logIndex": 105,
        "blockHash": "0xd24bd00dda66b8e2e4ce2f93821c368c2dbd252d12a6f73ce6efecd8bc64245a"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 26235493,
        "transactionHash": "0xd435f4dc006d7fcc2d237e09e46dc04c2a005ea24807d1c1d3fb44a1b0f27fc7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000006109ecd476b870000000000000000000000000000000000000000000000003e3031a946187dfa000000000000000000000000000000000000000000001518438d36ddc3eee9790000000000000000000000000000000000000000000000003e2a210a78d112730000000000000000000000000000000000000000000015184393477c91365500",
        "logIndex": 106,
        "blockHash": "0xd24bd00dda66b8e2e4ce2f93821c368c2dbd252d12a6f73ce6efecd8bc64245a"
      }
    ],
    "blockNumber": 26235493,
    "cumulativeGasUsed": "2176139",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    [
      {
        "resourceType": 1,
        "price": 12600000000
      },
      {
        "resourceType": 2,
        "price": 12600000000
      },
      {
        "resourceType": 3,
        "price": 12600000000
      },
      {
        "resourceType": 4,
        "price": 12600000000
      }
    ]
  ],
  "solcInputHash": "317f9e5658cd03d077400eafd80d581a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"name\":\"SetPriceAdaptors\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexBlock\",\"type\":\"uint256\"}],\"name\":\"getAmountAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"getAmountOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_indexBlock\",\"type\":\"uint256\"}],\"name\":\"getValueAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getValueOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_indexBlock\",\"type\":\"uint256\"}],\"name\":\"priceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"}],\"name\":\"priceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct ResourceAdaptor.PriceAdaptor[]\",\"name\":\"adaptors\",\"type\":\"tuple[]\"}],\"name\":\"setPriceAdaptors\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/resources/ResourceAdaptor.sol\":\"ResourceAdaptor\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0xdb575db840fd52f2ae05d464d6626137508ed25bc308badaa6badfdbed25b578\",\"license\":\"UNLICENSE\"},\"contracts/resources/ResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\n\\nimport './interfaces/IResourceAdaptor.sol';\\n\\ncontract ResourceAdaptor is IResourceAdaptor, OwnableUpgradeable {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\tuint256 public indexBlock;\\n\\n\\t// type -> block -> price\\n\\tmapping(ResourceData.ResourceType => mapping(uint256 => uint256)) internal priceTraces;\\n\\n\\tevent SetPriceAdaptors(PriceAdaptor[] adaptors);\\n\\n\\tconstructor(\\n\\t\\taddress owner,\\n\\t\\tPriceAdaptor[] memory adaptors\\n\\t) initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Price_Adaptors(adaptors);\\n\\t}\\n\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\tPriceAdaptor[] memory adaptors\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Price_Adaptors(adaptors);\\n\\t}\\n\\n\\tfunction __Init_Price_Adaptors(PriceAdaptor[] memory adaptors) internal onlyInitializing {\\n\\t\\t_setPriceAdaptors(adaptors);\\n\\t}\\n\\n\\tfunction setPriceAdaptors(PriceAdaptor[] memory adaptors) external onlyOwner {\\n\\t\\t_setPriceAdaptors(adaptors);\\n\\t}\\n\\n\\tfunction _setPriceAdaptors(PriceAdaptor[] memory adaptors) internal {\\n\\t\\trequire(adaptors.length > 0, 'ResourceAdaptor: invalid pricers');\\n\\t\\tfor (uint256 i = 0; i < adaptors.length; i++) {\\n\\t\\t\\tuint256 _price = adaptors[i].price;\\n\\t\\t\\trequire(_price > 0, 'ResourceAdaptor: invalid price');\\n\\t\\t\\tpriceTraces[adaptors[i].resourceType][block.number] = _price;\\n\\t\\t}\\n\\t\\tindexBlock = block.number;\\n\\t\\temit SetPriceAdaptors(adaptors);\\n\\t}\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) public view override returns (uint256) {\\n\\t\\trequire(priceTraces[resourceType][_indexBlock] != 0, 'ResourceAdaptor: invalid indexBlock');\\n\\t\\treturn priceTraces[resourceType][_indexBlock];\\n\\t}\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) public view override returns (uint256) {\\n\\t\\treturn priceAt(resourceType, _indexBlock).mul(amount);\\n\\t}\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) public view override returns (uint256) {\\n\\t\\treturn value.div(priceAt(resourceType, _indexBlock));\\n\\t}\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) public view override returns (uint256) {\\n\\t\\treturn priceAt(resourceType, indexBlock);\\n\\t}\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) public view override returns (uint256) {\\n\\t\\treturn priceOf(resourceType).mul(amount);\\n\\t}\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) public view override returns (uint256) {\\n\\t\\treturn value.div(priceOf(resourceType));\\n\\t}\\n}\\n\",\"keccak256\":\"0xbe799e4e1ff7f5125df482778a2be11554b89e89d1748a4704699669bc8c53c2\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\ninterface IResourceAdaptor {\\n\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf60bb837ce179f97f69cc642ef0b775cc58c952824869b89df3d29729133b738\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001487380380620014878339810160408190526200003491620004aa565b600054610100900460ff16620000515760005460ff16156200005b565b6200005b620000d8565b620000835760405162461bcd60e51b81526004016200007a9062000557565b60405180910390fd5b600054610100900460ff16158015620000a6576000805461ffff19166101011790555b620000b183620000f6565b620000bc8262000148565b8015620000cf576000805461ff00191690555b505050620007a2565b6000620000f0306200018060201b6200041d1760201c565b15905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16620001725760405162461bcd60e51b81526004016200007a90620005b2565b6200017d816200018f565b50565b6001600160a01b03163b151590565b6000815111620001b35760405162461bcd60e51b81526004016200007a90620005f9565b60005b81518110156200028a576000828281518110620001d757620001d76200060b565b602002602001015160200151905060008111620002085760405162461bcd60e51b81526004016200007a9062000656565b80606660008585815181106200022257620002226200060b565b602002602001015160000151600481111562000242576200024262000668565b600481111562000256576200025662000668565b8152602080820192909252604090810160009081204382529092529020555080620002818162000694565b915050620001b6565b50436065556040517fdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef590620002c190839062000788565b60405180910390a150565b60006001600160a01b0382165b92915050565b620002ea81620002cc565b81146200017d57600080fd5b8051620002d981620002df565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b038211171562000341576200034162000303565b6040525050565b60006200035460405190565b905062000362828262000319565b919050565b60006001600160401b0382111562000383576200038362000303565b5060209081020190565b600581106200017d57600080fd5b8051620002d9816200038d565b80620002ea565b8051620002d981620003a8565b600060408284031215620003d357620003d3600080fd5b620003df604062000348565b90506000620003ef84846200039b565b82525060206200040284848301620003af565b60208301525092915050565b6000620004256200041f8462000367565b62000348565b83815290506020810160408402830185811115620004465762000446600080fd5b835b818110156200047057806200045e8882620003bc565b84525060209092019160400162000448565b5050509392505050565b600082601f830112620004905762000490600080fd5b8151620004a28482602086016200040e565b949350505050565b60008060408385031215620004c257620004c2600080fd5b6000620004d08585620002f6565b92505060208301516001600160401b03811115620004f157620004f1600080fd5b620004ff858286016200047a565b9150509250929050565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b60208082528101620002d98162000509565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915062000550565b60208082528101620002d98162000569565b60208082527f5265736f7572636541646170746f723a20696e76616c69642070726963657273910190815260005b5060200190565b60208082528101620002d981620005c4565b634e487b7160e01b600052603260045260246000fd5b601e81526000602082017f5265736f7572636541646170746f723a20696e76616c6964207072696365000081529150620005f2565b60208082528101620002d98162000621565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415620006ab57620006ab6200067e565b5060010190565b600581106200017d576200017d62000668565b806200036281620006b2565b6000620002d982620006c5565b620006e981620006d1565b82525050565b80620006e9565b80516040830190620007098482620006de565b5060208201516200071e6020850182620006ef565b50505050565b6000620007328383620006f6565b505060400190565b600062000745825190565b80845260209384019383018060005b838110156200077d5781516200076b888262000724565b97506020830192505060010162000754565b509495945050505050565b602080825281016200079b81846200073a565b9392505050565b610cd580620007b26000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80639434023a116100715780639434023a1461013e578063a6170b5114610151578063a97f277214610164578063a9fd520f14610177578063c9a72f391461018a578063f2fde38b1461019357600080fd5b806327b54756146100b95780632e4a1a23146100ce57806368fbeb18146100e1578063715018a61461010a5780638da5cb5b14610112578063912397c31461012b575b600080fd5b6100cc6100c7366004610765565b6101a6565b005b6100cc6100dc3660046107c5565b6101e5565b6100f46100ef36600461081d565b61026b565b6040516101019190610858565b60405180910390f35b6100cc610289565b6033546001600160a01b0316604051610101919061086f565b6100f461013936600461087d565b6102bf565b6100f461014c36600461081d565b6102c9565b6100f461015f36600461081d565b610381565b6100f461017236600461089e565b610396565b6100f461018536600461089e565b6103ae565b6100f460655481565b6100cc6101a13660046108ee565b6103c4565b6033546001600160a01b031633146101d95760405162461bcd60e51b81526004016101d090610944565b60405180910390fd5b6101e28161042c565b50565b600054610100900460ff166102005760005460ff1615610204565b303b155b6102205760405162461bcd60e51b81526004016101d0906109a2565b600054610100900460ff16158015610242576000805461ffff19166101011790555b61024b83610551565b610254826105a3565b8015610266576000805461ff00191690555b505050565b60006102808261027a856102bf565b906105ca565b90505b92915050565b6033546001600160a01b031633146102b35760405162461bcd60e51b81526004016101d090610944565b6102bd6000610551565b565b6000610283826065545b6000606660008460048111156102e1576102e16109b2565b60048111156102f2576102f26109b2565b8152602001908152602001600020600083815260200190815260200160002054600014156103325760405162461bcd60e51b81526004016101d090610a08565b60666000846004811115610348576103486109b2565b6004811115610359576103596109b2565b8152602001908152602001600020600083815260200190815260200160002054905092915050565b600061028061038f846102bf565b83906105d6565b60006103a68361027a86856102c9565b949350505050565b60006103a66103bd85846102c9565b84906105d6565b6033546001600160a01b031633146103ee5760405162461bcd60e51b81526004016101d090610944565b6001600160a01b0381166104145760405162461bcd60e51b81526004016101d090610a5b565b6101e281610551565b6001600160a01b03163b151590565b600081511161044d5760405162461bcd60e51b81526004016101d090610a9d565b60005b815181101561051157600082828151811061046d5761046d610aad565b60200260200101516020015190506000811161049b5760405162461bcd60e51b81526004016101d090610af7565b80606660008585815181106104b2576104b2610aad565b60200260200101516000015160048111156104cf576104cf6109b2565b60048111156104e0576104e06109b2565b815260208082019290925260409081016000908120438252909252902055508061050981610b1d565b915050610450565b50436065556040517fdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef590610546908390610bed565b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166101d95760405162461bcd60e51b81526004016101d090610c46565b60006102808284610c56565b60006102808284610c8b565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561061e5761061e6105e2565b6040525050565b600061063060405190565b905061063c82826105f8565b919050565b600067ffffffffffffffff82111561065b5761065b6105e2565b5060209081020190565b600581106101e257600080fd5b803561028381610665565b805b81146101e257600080fd5b80356102838161067d565b6000604082840312156106aa576106aa600080fd5b6106b46040610625565b905060006106c28484610672565b82525060206106d38484830161068a565b60208301525092915050565b60006106f26106ed84610641565b610625565b8381529050602081016040840283018581111561071157610711600080fd5b835b8181101561073757806107268882610695565b845250602090920191604001610713565b5050509392505050565b600082601f83011261075557610755600080fd5b81356103a68482602086016106df565b60006020828403121561077a5761077a600080fd5b813567ffffffffffffffff81111561079457610794600080fd5b6103a684828501610741565b60006001600160a01b038216610283565b61067f816107a0565b8035610283816107b1565b600080604083850312156107db576107db600080fd5b60006107e785856107ba565b925050602083013567ffffffffffffffff81111561080757610807600080fd5b61081385828601610741565b9150509250929050565b6000806040838503121561083357610833600080fd5b600061083f8585610672565b92505060206108138582860161068a565b805b82525050565b602081016102838284610850565b610852816107a0565b602081016102838284610866565b60006020828403121561089257610892600080fd5b60006103a68484610672565b6000806000606084860312156108b6576108b6600080fd5b60006108c28686610672565b93505060206108d38682870161068a565b92505060406108e48682870161068a565b9150509250925092565b60006020828403121561090357610903600080fd5b60006103a684846107ba565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016102838161090f565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161028381610954565b634e487b7160e01b600052602160045260246000fd5b602381526000602082017f5265736f7572636541646170746f723a20696e76616c696420696e646578426c8152626f636b60e81b6020820152915061099b565b60208082528101610283816109c8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061099b565b6020808252810161028381610a18565b60208082527f5265736f7572636541646170746f723a20696e76616c696420707269636572739101908152600061093d565b6020808252810161028381610a6b565b634e487b7160e01b600052603260045260246000fd5b601e81526000602082017f5265736f7572636541646170746f723a20696e76616c696420707269636500008152915061093d565b6020808252810161028381610ac3565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b3157610b31610b07565b5060010190565b600581106101e2576101e26109b2565b8061063c81610b38565b600061028382610b48565b61085281610b52565b80516040830190610b778482610b5d565b506020820151610b8a6020850182610850565b50505050565b6000610b9c8383610b66565b505060400190565b6000610bae825190565b80845260209384019383018060005b83811015610be2578151610bd18882610b90565b975060208301925050600101610bbd565b509495945050505050565b602080825281016102808184610ba4565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061099b565b6020808252810161028381610bfe565b6000816000190483118215151615610c7057610c70610b07565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610c9a57610c9a610c75565b50049056fea2646970667358221220748e7d5c2f6123c6112506ae2ef53068c6305ae2ecc97d25dbbcf6ea5aadedb064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80639434023a116100715780639434023a1461013e578063a6170b5114610151578063a97f277214610164578063a9fd520f14610177578063c9a72f391461018a578063f2fde38b1461019357600080fd5b806327b54756146100b95780632e4a1a23146100ce57806368fbeb18146100e1578063715018a61461010a5780638da5cb5b14610112578063912397c31461012b575b600080fd5b6100cc6100c7366004610765565b6101a6565b005b6100cc6100dc3660046107c5565b6101e5565b6100f46100ef36600461081d565b61026b565b6040516101019190610858565b60405180910390f35b6100cc610289565b6033546001600160a01b0316604051610101919061086f565b6100f461013936600461087d565b6102bf565b6100f461014c36600461081d565b6102c9565b6100f461015f36600461081d565b610381565b6100f461017236600461089e565b610396565b6100f461018536600461089e565b6103ae565b6100f460655481565b6100cc6101a13660046108ee565b6103c4565b6033546001600160a01b031633146101d95760405162461bcd60e51b81526004016101d090610944565b60405180910390fd5b6101e28161042c565b50565b600054610100900460ff166102005760005460ff1615610204565b303b155b6102205760405162461bcd60e51b81526004016101d0906109a2565b600054610100900460ff16158015610242576000805461ffff19166101011790555b61024b83610551565b610254826105a3565b8015610266576000805461ff00191690555b505050565b60006102808261027a856102bf565b906105ca565b90505b92915050565b6033546001600160a01b031633146102b35760405162461bcd60e51b81526004016101d090610944565b6102bd6000610551565b565b6000610283826065545b6000606660008460048111156102e1576102e16109b2565b60048111156102f2576102f26109b2565b8152602001908152602001600020600083815260200190815260200160002054600014156103325760405162461bcd60e51b81526004016101d090610a08565b60666000846004811115610348576103486109b2565b6004811115610359576103596109b2565b8152602001908152602001600020600083815260200190815260200160002054905092915050565b600061028061038f846102bf565b83906105d6565b60006103a68361027a86856102c9565b949350505050565b60006103a66103bd85846102c9565b84906105d6565b6033546001600160a01b031633146103ee5760405162461bcd60e51b81526004016101d090610944565b6001600160a01b0381166104145760405162461bcd60e51b81526004016101d090610a5b565b6101e281610551565b6001600160a01b03163b151590565b600081511161044d5760405162461bcd60e51b81526004016101d090610a9d565b60005b815181101561051157600082828151811061046d5761046d610aad565b60200260200101516020015190506000811161049b5760405162461bcd60e51b81526004016101d090610af7565b80606660008585815181106104b2576104b2610aad565b60200260200101516000015160048111156104cf576104cf6109b2565b60048111156104e0576104e06109b2565b815260208082019290925260409081016000908120438252909252902055508061050981610b1d565b915050610450565b50436065556040517fdaf171519e682ab2dd913c4734ab5c4d25a84eae73f45aa041119c8c4b5c5ef590610546908390610bed565b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166101d95760405162461bcd60e51b81526004016101d090610c46565b60006102808284610c56565b60006102808284610c8b565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561061e5761061e6105e2565b6040525050565b600061063060405190565b905061063c82826105f8565b919050565b600067ffffffffffffffff82111561065b5761065b6105e2565b5060209081020190565b600581106101e257600080fd5b803561028381610665565b805b81146101e257600080fd5b80356102838161067d565b6000604082840312156106aa576106aa600080fd5b6106b46040610625565b905060006106c28484610672565b82525060206106d38484830161068a565b60208301525092915050565b60006106f26106ed84610641565b610625565b8381529050602081016040840283018581111561071157610711600080fd5b835b8181101561073757806107268882610695565b845250602090920191604001610713565b5050509392505050565b600082601f83011261075557610755600080fd5b81356103a68482602086016106df565b60006020828403121561077a5761077a600080fd5b813567ffffffffffffffff81111561079457610794600080fd5b6103a684828501610741565b60006001600160a01b038216610283565b61067f816107a0565b8035610283816107b1565b600080604083850312156107db576107db600080fd5b60006107e785856107ba565b925050602083013567ffffffffffffffff81111561080757610807600080fd5b61081385828601610741565b9150509250929050565b6000806040838503121561083357610833600080fd5b600061083f8585610672565b92505060206108138582860161068a565b805b82525050565b602081016102838284610850565b610852816107a0565b602081016102838284610866565b60006020828403121561089257610892600080fd5b60006103a68484610672565b6000806000606084860312156108b6576108b6600080fd5b60006108c28686610672565b93505060206108d38682870161068a565b92505060406108e48682870161068a565b9150509250925092565b60006020828403121561090357610903600080fd5b60006103a684846107ba565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b602080825281016102838161090f565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161028381610954565b634e487b7160e01b600052602160045260246000fd5b602381526000602082017f5265736f7572636541646170746f723a20696e76616c696420696e646578426c8152626f636b60e81b6020820152915061099b565b60208082528101610283816109c8565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b6020820152915061099b565b6020808252810161028381610a18565b60208082527f5265736f7572636541646170746f723a20696e76616c696420707269636572739101908152600061093d565b6020808252810161028381610a6b565b634e487b7160e01b600052603260045260246000fd5b601e81526000602082017f5265736f7572636541646170746f723a20696e76616c696420707269636500008152915061093d565b6020808252810161028381610ac3565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610b3157610b31610b07565b5060010190565b600581106101e2576101e26109b2565b8061063c81610b38565b600061028382610b48565b61085281610b52565b80516040830190610b778482610b5d565b506020820151610b8a6020850182610850565b50505050565b6000610b9c8383610b66565b505060400190565b6000610bae825190565b80845260209384019383018060005b83811015610be2578151610bd18882610b90565b975060208301925050600101610bbd565b509495945050505050565b602080825281016102808184610ba4565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b6020820152915061099b565b6020808252810161028381610bfe565b6000816000190483118215151615610c7057610c70610b07565b500290565b634e487b7160e01b600052601260045260246000fd5b600082610c9a57610c9a610c75565b50049056fea2646970667358221220748e7d5c2f6123c6112506ae2ef53068c6305ae2ecc97d25dbbcf6ea5aadedb064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1608,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7726,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "indexBlock",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 7733,
        "contract": "contracts/resources/ResourceAdaptor.sol:ResourceAdaptor",
        "label": "priceTraces",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_enum(ResourceType)4751,t_mapping(t_uint256,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(ResourceType)4751": {
        "encoding": "inplace",
        "label": "enum ResourceData.ResourceType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_enum(ResourceType)4751,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_enum(ResourceType)4751",
        "label": "mapping(enum ResourceData.ResourceType => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}