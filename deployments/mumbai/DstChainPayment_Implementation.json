{
  "address": "0xd69B0579B4DE5B619db9e019088C7049557Cd309",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract INormalResourceController",
          "name": "_arStorageController",
          "type": "address"
        }
      ],
      "name": "ARStorageControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract INormalResourceController",
          "name": "_bandwidthController",
          "type": "address"
        }
      ],
      "name": "BandwidthControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract INormalResourceController",
          "name": "_buildingTimeController",
          "type": "address"
        }
      ],
      "name": "BuildingTimeControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IIPFSStorageController",
          "name": "_ipfsStorageController",
          "type": "address"
        }
      ],
      "name": "IPFSStorageControllerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "messageReceiver",
          "type": "address"
        }
      ],
      "name": "MessageReceiverUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NativeWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "account",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "enum ResourceData.ResourceType",
                  "name": "resourceType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct ResourceData.Payload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "indexed": false,
          "internalType": "struct IDstChainPayment.PaymentPayload",
          "name": "payload",
          "type": "tuple"
        }
      ],
      "name": "Paid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "PauserRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        }
      ],
      "name": "ProvidersUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "addPauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arStorageController",
      "outputs": [
        {
          "internalType": "contract INormalResourceController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bandwidthController",
      "outputs": [
        {
          "internalType": "contract INormalResourceController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buildingTimeController",
      "outputs": [
        {
          "internalType": "contract INormalResourceController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "name": "convertSourceChainPayloads",
      "outputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "decodeSourceChainMessage",
      "outputs": [
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "account",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pauser",
          "type": "address"
        },
        {
          "internalType": "contract IProviders",
          "name": "providers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "messageReceiver",
          "type": "address"
        },
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ipfsStorageController",
      "outputs": [
        {
          "internalType": "contract IIPFSStorageController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isPauser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageReceiver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ownerWithdrawNative",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pausers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "nonce",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "account",
              "type": "bytes32"
            },
            {
              "components": [
                {
                  "internalType": "enum ResourceData.ResourceType",
                  "name": "resourceType",
                  "type": "uint8"
                },
                {
                  "internalType": "uint256[]",
                  "name": "values",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct ResourceData.Payload[]",
              "name": "payloads",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct IDstChainPayment.PaymentPayload",
          "name": "payload",
          "type": "tuple"
        }
      ],
      "name": "pay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "dstAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "payFromSourceChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "providers",
      "outputs": [
        {
          "internalType": "contract IProviders",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "removePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renouncePauser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INormalResourceController",
          "name": "_arStorageController",
          "type": "address"
        }
      ],
      "name": "setARStorageController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INormalResourceController",
          "name": "_bandwidthController",
          "type": "address"
        }
      ],
      "name": "setBandwidthController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract INormalResourceController",
          "name": "_buildingTimeController",
          "type": "address"
        }
      ],
      "name": "setBuildingTimeController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IIPFSStorageController",
          "name": "_ipfsStorageController",
          "type": "address"
        }
      ],
      "name": "setIPFSStorageController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageReceiver",
          "type": "address"
        }
      ],
      "name": "setMessageReceiver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20Upgradeable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum ResourceData.ResourceType",
              "name": "resourceType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "values",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct ResourceData.Payload[]",
          "name": "payloads",
          "type": "tuple[]"
        }
      ],
      "name": "totalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc73ab918c6591043422b0804e2194ee376879bb9c3149c4d303ed83f86e6a3c0",
  "receipt": {
    "to": null,
    "from": "0xF1658C608708172655A8e70a1624c29F956Ee63D",
    "contractAddress": "0xd69B0579B4DE5B619db9e019088C7049557Cd309",
    "transactionIndex": 8,
    "gasUsed": "2712034",
    "logsBloom": "0x
    "blockHash": "0x02ba846b17b24e1f114dd42df95801422d97f500553ddd79e667d75baa242c8e",
    "transactionHash": "0xc73ab918c6591043422b0804e2194ee376879bb9c3149c4d303ed83f86e6a3c0",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 26331300,
        "transactionHash": "0xc73ab918c6591043422b0804e2194ee376879bb9c3149c4d303ed83f86e6a3c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000f1658c608708172655a8e70a1624c29f956ee63d",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000051e621cba2ba0e000000000000000000000000000000000000000000000000389f94f077cd972f00000000000000000000000000000000000000000000021b79fe9875a204f9c0000000000000000000000000000000000000000000000000384daeceac2add2100000000000000000000000000000000000000000000021b7a507e976da7b3ce",
        "logIndex": 16,
        "blockHash": "0x02ba846b17b24e1f114dd42df95801422d97f500553ddd79e667d75baa242c8e"
      }
    ],
    "blockNumber": 26331300,
    "cumulativeGasUsed": "3432702",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "da9c392996f5bb5463935f1dd409f50d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract INormalResourceController\",\"name\":\"_arStorageController\",\"type\":\"address\"}],\"name\":\"ARStorageControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract INormalResourceController\",\"name\":\"_bandwidthController\",\"type\":\"address\"}],\"name\":\"BandwidthControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract INormalResourceController\",\"name\":\"_buildingTimeController\",\"type\":\"address\"}],\"name\":\"BuildingTimeControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IIPFSStorageController\",\"name\":\"_ipfsStorageController\",\"type\":\"address\"}],\"name\":\"IPFSStorageControllerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messageReceiver\",\"type\":\"address\"}],\"name\":\"MessageReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NativeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"indexed\":false,\"internalType\":\"struct IDstChainPayment.PaymentPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"name\":\"Paid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"PauserRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"}],\"name\":\"ProvidersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addPauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arStorageController\",\"outputs\":[{\"internalType\":\"contract INormalResourceController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bandwidthController\",\"outputs\":[{\"internalType\":\"contract INormalResourceController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buildingTimeController\",\"outputs\":[{\"internalType\":\"contract INormalResourceController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"name\":\"convertSourceChainPayloads\",\"outputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"decodeSourceChainMessage\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pauser\",\"type\":\"address\"},{\"internalType\":\"contract IProviders\",\"name\":\"providers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messageReceiver\",\"type\":\"address\"},{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ipfsStorageController\",\"outputs\":[{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isPauser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawNative\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pausers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"account\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IDstChainPayment.PaymentPayload\",\"name\":\"payload\",\"type\":\"tuple\"}],\"name\":\"pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"dstAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"payFromSourceChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"providers\",\"outputs\":[{\"internalType\":\"contract IProviders\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"removePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INormalResourceController\",\"name\":\"_arStorageController\",\"type\":\"address\"}],\"name\":\"setARStorageController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INormalResourceController\",\"name\":\"_bandwidthController\",\"type\":\"address\"}],\"name\":\"setBandwidthController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract INormalResourceController\",\"name\":\"_buildingTimeController\",\"type\":\"address\"}],\"name\":\"setBuildingTimeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IIPFSStorageController\",\"name\":\"_ipfsStorageController\",\"type\":\"address\"}],\"name\":\"setIPFSStorageController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageReceiver\",\"type\":\"address\"}],\"name\":\"setMessageReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum ResourceData.ResourceType\",\"name\":\"resourceType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"internalType\":\"struct ResourceData.Payload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"}],\"name\":\"totalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alexandas\",\"details\":\"Celer SGN source chain sender contract\",\"kind\":\"dev\",\"methods\":{\"addPauser(address)\":{\"details\":\"add a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"convertSourceChainPayloads(uint256,(uint8,uint256[])[])\":{\"details\":\"convert source chain payloads\",\"params\":{\"amount\":\"amount tokens\",\"payloads\":\"payment payloads\"},\"returns\":{\"_0\":\"converted payment payloads\"}},\"decodeSourceChainMessage(bytes)\":{\"details\":\"decode source chain message\",\"params\":{\"message\":\"message bytes\"},\"returns\":{\"account\":\"user account\",\"nonce\":\"nonce\",\"payloads\":\"payment payloads\",\"provider\":\"provider address\"}},\"initialize(address,address,address,address,address)\":{\"details\":\"proxy initialize function\",\"params\":{\"messageReceiver\":\"message receiver contract address\",\"owner\":\"contract owner\",\"pauser\":\"contract pauser\",\"providers\":\"providers contract\",\"token\":\"token address\"}},\"isPauser(address)\":{\"details\":\"whether the account is the contract pauser\",\"params\":{\"account\":\"address\"},\"returns\":{\"_0\":\"whether account is a pauser\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerWithdrawERC20(address,address,uint256)\":{\"details\":\"withdraw token \",\"params\":{\"to\":\"receiver address\",\"token\":\"token address\",\"value\":\"token value\"}},\"ownerWithdrawNative(address,uint256)\":{\"details\":\"withdraw ETH \",\"params\":{\"to\":\"receiver address\",\"value\":\"token value\"}},\"pause()\":{\"details\":\"pause the contract\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"pay((address,uint64,bytes32,(uint8,uint256[])[]))\":{\"details\":\"pay on dst chain\",\"params\":{\"payload\":\"payment payload\"},\"returns\":{\"value\":\"payment value\"}},\"payFromSourceChain(address,uint256,bytes)\":{\"details\":\"pay from source chain only called by message receiver\",\"params\":{\"_token\":\"token address\",\"dstAmount\":\"token amount\",\"message\":\"payment payload message bytes\"},\"returns\":{\"value\":\"payment value\"}},\"removePauser(address)\":{\"details\":\"remove a pauser for the contract\",\"params\":{\"account\":\"address\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renouncePauser()\":{\"details\":\"remove a pauser for the contract\"},\"setARStorageController(address)\":{\"details\":\"update AR storage controller contract\",\"params\":{\"_arStorageController\":\"AR storage controller contract\"}},\"setBandwidthController(address)\":{\"details\":\"update bandwidth controller contract\",\"params\":{\"_bandwidthController\":\"bandwidth controller contract\"}},\"setBuildingTimeController(address)\":{\"details\":\"update building time controller contract\",\"params\":{\"_buildingTimeController\":\"building time controller contract\"}},\"setIPFSStorageController(address)\":{\"details\":\"update ipfs storage controller contract\",\"params\":{\"_ipfsStorageController\":\"IPFS storage controller contract\"}},\"setMessageReceiver(address)\":{\"details\":\"set messageReceiver contract address\",\"params\":{\"_messageReceiver\":\"message receiver contract address\"}},\"setToken(address)\":{\"details\":\"set token address\",\"params\":{\"_token\":\"token address\"}},\"totalValue((uint8,uint256[])[])\":{\"details\":\"payment payload total value\",\"params\":{\"payloads\":\"payment payloads\"},\"returns\":{\"value\":\"total value\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"unpause the contract\"}},\"stateVariables\":{\"token\":{\"details\":\"token address\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/DstChainPayment.sol\":\"DstChainPayment\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20Upgradeable.sol\\\";\\n\",\"keccak256\":\"0xe73087c5001a37cf7186b3709377c7ceb01a0d38fb908723d1464cea66b4958c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x6777f3fccb5dab95a9088ef62c41bee0198fd92e50d7c94f0e3733788af4079e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3e26a49d2fa5ef8338b8a9467c91e54f417cb07e849b1cc0f4ebc4d2a147938e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0ac286be11c2345f71d938119e638483fc1ddb9f56b7da00dd470adcd977f439\",\"license\":\"MIT\"},\"contracts/access/OwnerWithdrawable.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev Make the contract owner can withdraw token and eth\\nabstract contract OwnerWithdrawable is OwnableUpgradeable  {\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// @dev emit when token is withdrawn\\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent Withdrawal(IERC20Upgradeable token, address to, uint256 value);\\n\\n\\t/// @dev emit when ETH is withdrawn\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tevent NativeWithdrawal(address to, uint256 value);\\n\\n\\t/// @dev withdraw token \\n\\t/// @param token token address\\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawERC20(IERC20Upgradeable token, address to, uint256 value) external onlyOwner {\\n\\t\\ttoken.safeTransfer(to, value);\\n\\t\\temit Withdrawal(token, to, value);\\n\\t}\\n\\n\\t/// @dev withdraw ETH \\n\\t/// @param to receiver address\\n\\t/// @param value token value\\n\\tfunction ownerWithdrawNative(address payable to, uint256 value) external onlyOwner {\\n\\t\\tbool success = to.send(value);\\n\\t\\trequire(success, 'Payment: withdraw native token failed');\\n\\t\\temit NativeWithdrawal(to, value);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x2c58fdda195f39e37ac9b9b76574b89b08f6cee4c5c22d9ae31f7b0f423353d4\",\"license\":\"UNLICENSE\"},\"contracts/access/Pauser.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev make contract pausable\\nabstract contract Pauser is OwnableUpgradeable, PausableUpgradeable {\\n\\n\\t/// @dev all pausers\\n\\tmapping(address => bool) public pausers;\\n\\n\\t/// @dev emit when pauser is added\\n\\t/// @param account pauser address\\n\\tevent PauserAdded(address account);\\n\\n\\t/// @dev emit when pauser is removed\\n\\t/// @param account pauser address\\n\\tevent PauserRemoved(address account);\\n\\n\\tfunction __Init_Pauser(address account) internal onlyInitializing {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\tmodifier onlyPauser() {\\n\\t\\trequire(isPauser(msg.sender), 'Pauser: caller is not the pauser');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev pause the contract\\n\\tfunction pause() public onlyPauser {\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/// @dev unpause the contract\\n\\tfunction unpause() public onlyPauser {\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/// @dev whether the account is the contract pauser\\n\\t/// @param account address\\n\\t/// @return whether account is a pauser\\n\\tfunction isPauser(address account) public view returns (bool) {\\n\\t\\treturn pausers[account];\\n\\t}\\n\\n\\t/// @dev add a pauser for the contract\\n\\t/// @param account address\\n\\tfunction addPauser(address account) public onlyOwner {\\n\\t\\t_addPauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\t/// @param account address\\n\\tfunction removePauser(address account) public onlyOwner {\\n\\t\\t_removePauser(account);\\n\\t}\\n\\n\\t/// @dev remove a pauser for the contract\\n\\tfunction renouncePauser() public {\\n\\t\\t_removePauser(msg.sender);\\n\\t}\\n\\n\\tfunction _addPauser(address account) private {\\n\\t\\trequire(!isPauser(account), 'Pauser: account is already pauser');\\n\\t\\tpausers[account] = true;\\n\\t\\temit PauserAdded(account);\\n\\t}\\n\\n\\tfunction _removePauser(address account) private {\\n\\t\\trequire(isPauser(account), 'Pauser: account is not pauser');\\n\\t\\tdelete pausers[account];\\n\\t\\temit PauserRemoved(account);\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9e734fe6605e51968384fafaa0effc9c10b0cf4deda1ac735f96410eeb2cbe8\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IDstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/interfaces/IERC20Upgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev DstChainPayment interface\\ninterface IDstChainPayment {\\n\\n\\tstruct PaymentPayload {\\n\\t\\taddress provider;\\n\\t\\tuint64 nonce;\\n\\t\\tbytes32 account;\\n\\t\\tResourceData.Payload[] payloads;\\n\\t}\\n\\n\\t/// @dev emit when pay token updated\\n\\t/// @param token token address\\n\\tevent TokenUpdated(IERC20Upgradeable token);\\n\\n\\t/// @dev emit when a user paid\\n\\t/// @param payer payer\\n\\t/// @param token token address\\n\\t/// @param payload payment payload\\n\\tevent Paid(address payer, IERC20Upgradeable token, PaymentPayload payload);\\n\\n\\t/// @dev pay from the source chain\\n\\t/// @param token token address\\n\\t/// @param amount token amount\\n\\t/// @param message payment payload message\\n\\t/// @return value token used\\n\\tfunction payFromSourceChain(\\n\\t\\tIERC20Upgradeable token,\\n\\t\\tuint256 amount,\\n\\t\\tbytes calldata message\\n\\t) external returns (uint256 value);\\n\\n\\t/// @dev pay on the dst chain\\n\\t/// @param payload payment payload\\n\\t/// @return value token used\\n\\tfunction pay(PaymentPayload memory payload) external returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0xa144252e4b91b564d9fab196b7aa83f1a4e04bc9cc79d6b031439d6275aeb381\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProviders.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\n/// @author Alexandas\\n/// @dev providers interface\\ninterface IProviders {\\n\\n\\t/// @dev emit when provider is added\\n\\t/// @param provider provider address\\n\\tevent AddProvider(address provider);\\n\\n\\t/// @dev emit when provider removed\\n\\t/// @param provider provider address\\n\\tevent RemoveProvider(address provider);\\n\\n\\t/// @dev return whether address is a provider\\n\\t/// @param provider address\\n\\tfunction isProvider(address provider) external view returns (bool);\\n\\n\\t/// @dev return whether a valid signature\\n\\t/// @param provider address\\n\\t/// @param hash message hash\\n\\t/// @param signature provider signature for message hash\\n\\t/// @return is valid signature\\n\\tfunction isValidSignature(\\n\\t\\taddress provider,\\n\\t\\tbytes32 hash,\\n\\t\\tbytes memory signature\\n\\t) external returns (bool);\\n}\\n\",\"keccak256\":\"0x1e17872087bbe3412a8fe94b5ef9845f28203a3e5dc023d1d77f45cfb19c45c4\",\"license\":\"UNLICENSE\"},\"contracts/interfaces/IProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IProviders.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper interface\\ninterface IProvidersWrapper {\\n\\n\\t/// @dev emit when providers contract updated\\n\\t/// @param providers providers contract\\n\\tevent ProvidersUpdated(IProviders providers);\\n\\n\\t/// @dev return providers contract address\\n\\tfunction providers() external view returns (IProviders);\\n}\\n\",\"keccak256\":\"0x5a9e87e7a31a20d951edcca6e94afcf07f83c866ebdb48fcf96817d24b5b75b2\",\"license\":\"UNLICENSE\"},\"contracts/libraries/ResourceData.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n//// @title A title that should describe the contract/interface\\n/// @author Alexandas\\n/// @dev resource data library\\nlibrary ResourceData {\\n\\n\\tenum ResourceType {\\n\\t\\tNull,\\n\\t\\tBuildingTime,\\n\\t\\tBandwidth,\\n\\t\\tARStorage,\\n\\t\\tIPFSStorage\\n\\t}\\n\\n\\tstruct Payload {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256[] values;\\n\\t}\\n\\n}\",\"keccak256\":\"0x5b86dc0b7ea5977bce51cc42289f2dfef3d63ba3f9ea538d82e0c2d1e6e31a16\",\"license\":\"UNLICENSE\"},\"contracts/messages/MessageReceiverWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\n\\n/// @author Alexandas\\n/// @dev dst chain message receiver wrapper\\nabstract contract MessageReceiverWrapper is OwnableUpgradeable {\\n\\t/// @dev message receiver contract address\\n\\taddress public messageReceiver;\\n\\n\\t/// @dev emit when message receiver updated\\n\\t/// @param messageReceiver message receiver contract address\\n\\tevent MessageReceiverUpdated(address messageReceiver);\\n\\n\\tmodifier onlyMessageReceiver() {\\n\\t\\trequire(msg.sender == messageReceiver, 'MessageReceiverWrapper: caller is not message receiver');\\n\\t\\t_;\\n\\t}\\n\\n\\t/// @dev initialize messageReceiver contract address\\n\\t/// @param _messageReceiver message receiver contract address\\n\\tfunction __Init_Message_Receiver(address _messageReceiver) internal onlyInitializing {\\n\\t\\t_setMessageReceiver(_messageReceiver);\\n\\t}\\n\\n\\t/// @dev set messageReceiver contract address\\n\\t/// @param _messageReceiver message receiver contract address\\n\\tfunction setMessageReceiver(address _messageReceiver) external onlyOwner {\\n\\t\\t_setMessageReceiver(_messageReceiver);\\n\\t}\\n\\n\\tfunction _setMessageReceiver(address _messageReceiver) internal {\\n\\t\\tmessageReceiver = _messageReceiver;\\n\\t\\temit MessageReceiverUpdated(_messageReceiver);\\n\\t}\\n\\n}\",\"keccak256\":\"0xc941fe36fa378159becd9edab096fd7e4d0785da608c74493ddffe26efce68c5\",\"license\":\"GPL-3.0-only\"},\"contracts/payment/DstChainPayment.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol';\\nimport '../resources/ControllersWrapper.sol';\\nimport '../interfaces/IDstChainPayment.sol';\\nimport '../providers/ProvidersWrapper.sol';\\nimport '../messages/MessageReceiverWrapper.sol';\\nimport '../access/OwnerWithdrawable.sol';\\nimport '../access/Pauser.sol';\\nimport './ResourPayloadTool.sol';\\n\\n/// @author Alexandas\\n/// @dev Celer SGN source chain sender contract\\ncontract DstChainPayment is\\n\\tIDstChainPayment,\\n\\tResourPayloadTool,\\n\\tMessageReceiverWrapper,\\n\\tReentrancyGuardUpgradeable,\\n\\tProvidersWrapper,\\n\\tControllersWrapper,\\n\\tOwnerWithdrawable,\\n\\tPauser\\n{\\n\\tusing SafeMathUpgradeable for uint256;\\n\\tusing SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n\\t/// @dev token address\\n\\tIERC20Upgradeable public token;\\n\\n\\tconstructor() initializer {}\\n\\n\\t/// @dev proxy initialize function\\n\\t/// @param owner contract owner\\n\\t/// @param pauser contract pauser\\n\\t/// @param providers providers contract\\n\\t/// @param messageReceiver message receiver contract address\\n\\t/// @param token token address\\n\\tfunction initialize(\\n\\t\\taddress owner,\\n\\t\\taddress pauser,\\n\\t\\tIProviders providers,\\n\\t\\taddress messageReceiver,\\n\\t\\tIERC20Upgradeable token\\n\\t) external initializer {\\n\\t\\t_transferOwnership(owner);\\n\\t\\t__Init_Pauser(pauser);\\n\\t\\t__Init_Providers(providers);\\n\\t\\t__Init_Message_Receiver(messageReceiver);\\n\\t\\t__Init_Token(token);\\n\\t}\\n\\n\\t/// @dev initialize token\\n\\t/// @param _token token address\\n\\tfunction __Init_Token(IERC20Upgradeable _token) internal onlyInitializing {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\t/// @dev pay from source chain only called by message receiver\\n\\t/// @param _token token address\\n\\t/// @param dstAmount token amount\\n\\t/// @param message payment payload message bytes\\n\\t/// @return value payment value\\n\\tfunction payFromSourceChain(\\n\\t\\tIERC20Upgradeable _token,\\n\\t\\tuint256 dstAmount,\\n\\t\\tbytes calldata message\\n\\t) external override onlyMessageReceiver whenNotPaused nonReentrant returns (uint256 value) {\\n\\t\\trequire(token == _token, 'DstChainPayment: invalid token');\\n\\t\\t(address provider, uint64 nonce, bytes32 account, ResourceData.Payload[] memory payloads) = decodeSourceChainMessage(message);\\n\\t\\tPaymentPayload memory payload = PaymentPayload(provider, nonce, account, _convertSourceChainPayloads(matchResourceDecimals(dstAmount), payloads));\\n\\t\\t_processPayloads(payload.account, payload.payloads, false);\\n\\t\\t_pay(payload.provider, dstAmount);\\n\\n\\t\\temit Paid(msg.sender, token, payload);\\n\\t}\\n\\n\\t/// @dev pay on dst chain\\n\\t/// @param payload payment payload\\n\\t/// @return value payment value\\n\\tfunction pay(PaymentPayload memory payload) public override whenNotPaused nonReentrant returns (uint256 value) {\\n\\t\\tvalue = _processPayloads(payload.account, payload.payloads, true);\\n\\t\\tvalue = matchTokenDecimals(value);\\n\\t\\t_pay(payload.provider, value);\\n\\n\\t\\temit Paid(msg.sender, token, payload);\\n\\t}\\n\\n\\tfunction _pay(address provider, uint256 amount) internal returns (uint256 value) {\\n\\t\\trequire(providers.isProvider(provider), 'DstChainPayment: nonexistent provider');\\n\\t\\ttoken.safeTransferFrom(msg.sender, address(this), amount);\\n\\t}\\n\\n\\tfunction _processPayloads(\\n\\t\\tbytes32 account,\\n\\t\\tResourceData.Payload[] memory payloads,\\n\\t\\tbool withValue\\n\\t) internal returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'DstChainPayment: invalid payloads');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tResourceData.Payload memory payload = payloads[i];\\n\\t\\t\\tif (payload.resourceType == ResourceData.ResourceType.BuildingTime) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for BuildingTime');\\n\\t\\t\\t\\tbuildingTimeController.expand(account, payload.values[0]);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.ARStorage) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for ARStorage');\\n\\t\\t\\t\\tarStorageController.expand(account, payload.values[0]);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.Bandwidth) {\\n\\t\\t\\t\\trequire(payload.values.length == 1, 'DstChainPayment: invalid value length for Bandwidth');\\n\\t\\t\\t\\tbandwidthController.expand(account, payload.values[0]);\\n\\t\\t\\t} else if (payload.resourceType == ResourceData.ResourceType.IPFSStorage) {\\n\\t\\t\\t\\trequire(payload.values.length == 2, 'DstChainPayment: invalid value length for IPFSStorage');\\n\\t\\t\\t\\tipfsStorageController.expand(account, payload.values[0], payload.values[1]);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\trevert('DstChainPayment: unknown resource type');\\n\\t\\t\\t}\\n\\t\\t\\tif (withValue) {\\n\\t\\t\\t\\tfor (uint256 j = 0; j < payload.values.length; j++) {\\n\\t\\t\\t\\t\\tvalue = value.add(payload.values[0]);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/// @dev match token(decimals 6) amount to resource(decimals 18) decimals\\n\\t/// @param amount token amount with resource decimals\\n\\tfunction matchResourceDecimals(uint256 amount) internal view returns (uint256 value) {\\n\\t\\treturn amount.mul(10**12);\\n\\t}\\n\\n\\t/// @dev match resource(decimals 18) decimals to token(decimals 18) decimals\\n\\t/// @param amount token amount\\n\\tfunction matchTokenDecimals(uint256 amount) internal view returns (uint256 value) {\\n\\t\\treturn amount.div(10**12);\\n\\t}\\n\\n\\t/// @dev set token address\\n\\t/// @param _token token address\\n\\tfunction setToken(IERC20Upgradeable _token) external onlyOwner {\\n\\t\\t_setToken(_token);\\n\\t}\\n\\n\\tfunction _setToken(IERC20Upgradeable _token) internal {\\n\\t\\ttoken = _token;\\n\\t\\temit TokenUpdated(_token);\\n\\t}\\n\\n\\t/// @dev convert source chain payloads\\n\\t/// @param amount amount tokens\\n\\t/// @param payloads payment payloads\\n\\t/// @return converted payment payloads\\n\\tfunction convertSourceChainPayloads(uint256 amount, ResourceData.Payload[] memory payloads) public view returns (ResourceData.Payload[] memory) {\\n\\t\\treturn _convertSourceChainPayloads(amount, payloads);\\n\\t}\\n\\n\\t/// @dev decode source chain message\\n\\t/// @param message message bytes\\n\\t/// @return provider provider address\\n\\t/// @return nonce nonce\\n\\t/// @return account user account\\n\\t/// @return payloads payment payloads\\n\\tfunction decodeSourceChainMessage(bytes memory message)\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\taddress provider,\\n\\t\\t\\tuint64 nonce,\\n\\t\\t\\tbytes32 account,\\n\\t\\t\\tResourceData.Payload[] memory payloads\\n\\t\\t)\\n\\t{\\n\\t\\t(provider, nonce, account, payloads) = abi.decode(message, (address, uint64, bytes32, ResourceData.Payload[]));\\n\\t}\\n}\\n\",\"keccak256\":\"0xf9b8d028b2d71ebe1dd9444403db4216265c27680ecb7642e666f09b71c56c8b\",\"license\":\"GPL-3.0-only\"},\"contracts/payment/ResourPayloadTool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport '../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource payload tool contract\\nabstract contract ResourPayloadTool {\\n\\tusing SafeMathUpgradeable for uint256;\\n\\n\\t/// @dev convert source chain payment payload into dst chain payment payload\\n\\t/// @param dstAmount token amount\\n\\t/// @param payloads source chain payment payload\\n\\t/// @return newPayloads dst chain payment payload\\n\\tfunction _convertSourceChainPayloads(uint256 dstAmount, ResourceData.Payload[] memory payloads) internal pure returns (ResourceData.Payload[] memory newPayloads) {\\n\\t\\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payload length');\\n\\t\\tuint256 total = totalValue(payloads);\\n\\t\\trequire(total > 0, 'ResourPayloadTool: zero total value');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\trequire(payloads[i].values.length > 0, 'ResourPayloadTool: invalid value length');\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tpayloads[i].values[j] = payloads[i].values[j].mul(dstAmount).div(total);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn payloads;\\n\\t}\\n\\n\\t/// @dev payment payload total value\\n\\t/// @param payloads payment payloads\\n\\t/// @return value total value\\n\\tfunction totalValue(ResourceData.Payload[] memory payloads) public pure returns (uint256 value) {\\n\\t\\trequire(payloads.length > 0, 'ResourPayloadTool: invalid payloads length');\\n\\t\\tfor (uint256 i = 0; i < payloads.length; i++) {\\n\\t\\t\\tfor (uint256 j = 0; j < payloads[i].values.length; j++) {\\n\\t\\t\\t\\tvalue = value.add(payloads[i].values[j]);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x5052599fca714551c8755c0f9d34ed512b176b289922741240bcead4141d11ce\",\"license\":\"GPL-3.0-only\"},\"contracts/providers/ProvidersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '../interfaces/IProvidersWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev providers wrapper contract\\nabstract contract ProvidersWrapper is IProvidersWrapper, Initializable {\\n\\t/// @dev providers contract address\\n\\tIProviders public override providers;\\n\\n\\t/// @dev initialize providers contract\\n\\t/// @param _providers providers contract address\\n\\tfunction __Init_Providers(IProviders _providers) internal onlyInitializing {\\n\\t\\t_setProviders(_providers);\\n\\t}\\n\\n\\tfunction _setProviders(IProviders _providers) internal {\\n\\t\\tproviders = _providers;\\n\\t\\temit ProvidersUpdated(_providers);\\n\\t}\\n}\\n\",\"keccak256\":\"0xcb18f1276cfa2c7d9eaf9764fabacdc39df2823de77342acfec0aa8732062863\",\"license\":\"UNLICENSE\"},\"contracts/resources/ControllersWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\n\\npragma solidity >=0.8.0;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport '../resources/interfaces/INormalResourceController.sol';\\nimport '../resources/interfaces/IIPFSStorageController.sol';\\n\\n/// @author Alexandas\\n/// @dev all resource controller wrapper contract\\nabstract contract ControllersWrapper is OwnableUpgradeable {\\n\\t/// @dev return building time controller\\n\\tINormalResourceController public buildingTimeController;\\n\\n\\t/// @dev return bandwidth controller\\n\\tINormalResourceController public bandwidthController;\\n\\n\\t/// @dev return AR storage controller\\n\\tINormalResourceController public arStorageController;\\n\\n\\t/// @dev return ipfs storage controller\\n\\tIIPFSStorageController public ipfsStorageController;\\n\\n\\t/// @dev emit when building time controller updated\\n\\t/// @param _buildingTimeController building time controller contract\\n\\tevent BuildingTimeControllerUpdated(INormalResourceController _buildingTimeController);\\n\\n\\t/// @dev emit when bandwidth controller updated\\n\\t/// @param _bandwidthController bandwidth controller contract\\n\\tevent BandwidthControllerUpdated(INormalResourceController _bandwidthController);\\n\\n\\t/// @dev emit when AR storage controller updated\\n\\t/// @param _arStorageController AR storage controller contract\\n\\tevent ARStorageControllerUpdated(INormalResourceController _arStorageController);\\n\\n\\t/// @dev emit when ipfs storage controller updated\\n\\t/// @param _ipfsStorageController IPFS storage controller contract\\n\\tevent IPFSStorageControllerUpdated(IIPFSStorageController _ipfsStorageController);\\n\\n\\t/// @dev update building time controller contract\\n\\t/// @param _buildingTimeController building time controller contract\\n\\tfunction setBuildingTimeController(INormalResourceController _buildingTimeController) external onlyOwner {\\n\\t\\t_setBuildingTimeController(_buildingTimeController);\\n\\t}\\n\\n\\t/// @dev update bandwidth controller contract\\n\\t/// @param _bandwidthController bandwidth controller contract\\n\\tfunction setBandwidthController(INormalResourceController _bandwidthController) external onlyOwner {\\n\\t\\t_setBandwidthController(_bandwidthController);\\n\\t}\\n\\n\\t/// @dev update AR storage controller contract\\n\\t/// @param _arStorageController AR storage controller contract\\n\\tfunction setARStorageController(INormalResourceController _arStorageController) external onlyOwner {\\n\\t\\t_setARStorageController(_arStorageController);\\n\\t}\\n\\n\\t/// @dev update ipfs storage controller contract\\n\\t/// @param _ipfsStorageController IPFS storage controller contract\\n\\tfunction setIPFSStorageController(IIPFSStorageController _ipfsStorageController) external onlyOwner {\\n\\t\\t_setIPFSStorageController(_ipfsStorageController);\\n\\t}\\n\\n\\tfunction _setBuildingTimeController(INormalResourceController _buildingTimeController) internal {\\n\\t\\tbuildingTimeController = _buildingTimeController;\\n\\t\\temit BuildingTimeControllerUpdated(_buildingTimeController);\\n\\t}\\n\\n\\tfunction _setBandwidthController(INormalResourceController _bandwidthController) internal {\\n\\t\\tbandwidthController = _bandwidthController;\\n\\t\\temit BandwidthControllerUpdated(_bandwidthController);\\n\\t}\\n\\n\\tfunction _setARStorageController(INormalResourceController _arStorageController) internal {\\n\\t\\tarStorageController = _arStorageController;\\n\\t\\temit ARStorageControllerUpdated(_arStorageController);\\n\\t}\\n\\n\\tfunction _setIPFSStorageController(IIPFSStorageController _ipfsStorageController) internal {\\n\\t\\tipfsStorageController = _ipfsStorageController;\\n\\t\\temit IPFSStorageControllerUpdated(_ipfsStorageController);\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x5b25055efddd5f2a0a65b0455a1378a8b8d89a8d9aec7ebb531fcc847e8f534c\",\"license\":\"GPL-3.0-only\"},\"contracts/resources/interfaces/IAdaptorWrapper.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../interfaces/IResourceAdaptor.sol';\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adaptor interface\\ninterface IAdaptorWrapper {\\n\\n\\t/// @dev emit when resource adaptor updated\\n\\t/// @param adaptor resource adaptor contract address\\n\\tevent ResourceAdaptorUpdated(IResourceAdaptor adaptor);\\n\\n\\t/// @dev emit when resource type updated\\n\\t/// @param resourceType resource type\\n\\tevent ResourceTypeUpdated(ResourceData.ResourceType resourceType);\\n\\n\\t/// @dev return resource adaptor contract address\\n\\tfunction adaptor() external view returns (IResourceAdaptor);\\n\\n\\t/// @dev return resource type\\n\\tfunction resourceType() external view returns (ResourceData.ResourceType);\\n\\n\\t/// @dev return resource price\\n\\tfunction price() external view returns (uint256);\\n\\n\\t/// @dev calculate resource value for amount\\n\\tfunction getValueOf(uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev calculate resource amount for value\\n\\tfunction getAmountOf(uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe88ffa3b628ea9920d0c375aeb12a0cd315254213e23e438987a016b1e13f407\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IIPFSStorageController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\nimport '@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol';\\nimport './IAdaptorWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev IPFS storage controller interface\\ninterface IIPFSStorageController is IAdaptorWrapper {\\n\\tstruct IPFSStorage {\\n\\t\\tuint256 startTime;\\n\\t\\tuint256 expiration;\\n\\t\\tuint256 amount;\\n\\t}\\n\\n\\t/// @dev emit when ipfs resource expanded\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\tevent Expanded(bytes32 account, uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\t/// @dev expand ipfs resource\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\tfunction expand(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external;\\n\\n\\t/// @dev return whether the account is expired\\n\\t/// @param account user account\\n\\t/// @return whether the account is expired\\n\\tfunction isExpired(bytes32 account) external view returns (bool);\\n\\n\\t/// @dev ipfs resource start time\\n\\t/// @param account user account\\n\\t/// @return start time for ipfs resource\\n\\tfunction startTime(bytes32 account) external view returns (uint256);\\n\\t\\n\\t/// @dev return available expiration time for the account\\n\\t/// @param account user account\\n\\t/// @return available expiration time for the account\\n\\tfunction availableExpiration(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return total expiration time for the account\\n\\t/// @param account user account\\n\\t/// @return total expiration time for the account\\n\\tfunction expiration(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return when the account will expire\\n\\t/// @param account user account\\n\\t/// @return when the account will expire\\n\\tfunction expiredAt(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev return ipfs storage amount for the account\\n\\t/// @param account user account\\n\\t/// @return ipfs storage amount for the account\\n\\tfunction balanceOf(bytes32 account) external view returns (uint256);\\n\\n\\t/// @dev calculate fee for storage and expiration\\n\\t/// @param account user account\\n\\t/// @param expandedStorage storage amount\\n\\t/// @param expandedExpiration  expiration(in seconds)\\n\\t/// @return expandedStorageFee storage fee\\n\\t/// @return expandedExpirationFee expiration fee\\n\\tfunction expandedFee(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorage,\\n\\t\\tuint256 expandedExpiration\\n\\t) external view returns (uint256 expandedStorageFee, uint256 expandedExpirationFee);\\n\\n\\t/// @dev calculate fee for storage and expiration\\n\\t/// @param account user account\\n\\t/// @param expandedStorageFee storage fee\\n\\t/// @param expandedExpirationFee expiration fee\\n\\t/// @return expandedStorage storage amount\\n\\t/// @return expandedExpiration expiration(in seconds)\\n\\tfunction expansions(\\n\\t\\tbytes32 account,\\n\\t\\tuint256 expandedStorageFee,\\n\\t\\tuint256 expandedExpirationFee\\n\\t) external view returns (uint256 expandedStorage, uint256 expandedExpiration);\\n}\\n\",\"keccak256\":\"0xf63eb6181debf5fa3aaf46674a5a23568419b17f3ab1b15f2a14851a931e8201\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/INormalResourceController.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport './IAdaptorWrapper.sol';\\n\\n/// @author Alexandas\\n/// @dev normal resource controller interface\\ninterface INormalResourceController is IAdaptorWrapper {\\n\\n\\t/// @dev emit when resource expanded\\n\\t/// @param account user account\\n\\t/// @param value token value for resource decimals\\n\\tevent Expanded(bytes32 account, uint256 value);\\n\\n\\t/// @dev expand user's normal resource balance\\n\\t/// @param account user account\\n\\t/// @param value token value in resource decimals(18)\\n\\tfunction expand(bytes32 account, uint256 value) external;\\n\\n\\t/// @dev resource balance\\n\\t/// @param account user account\\n\\t/// @return balance of the account\\n\\tfunction balanceOf(bytes32 account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb9021a6843274a08d016413166c8b9b83f2f60833cfb5b6400c719ab3d9299e3\",\"license\":\"UNLICENSE\"},\"contracts/resources/interfaces/IResourceAdaptor.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSE\\n\\npragma solidity >=0.8.0;\\n\\nimport '../../libraries/ResourceData.sol';\\n\\n/// @author Alexandas\\n/// @dev resource adpator interface\\ninterface IResourceAdaptor {\\n\\n\\tstruct PriceAdaptor {\\n\\t\\tResourceData.ResourceType resourceType;\\n\\t\\tuint256 price;\\n\\t}\\n\\n\\t/// @dev emit when price updated\\n\\t/// @param adaptors price adaptors\\n\\tevent PriceAdaptorsUpdated(PriceAdaptor[] adaptors);\\n\\n\\t/// @dev get price for resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param _indexBlock block number\\n\\t/// @return price for resource at a specific block\\n\\tfunction priceAt(ResourceData.ResourceType resourceType, uint256 _indexBlock) external view returns (uint256);\\n\\n\\t/// @dev get value for `amount` resource at a specific block\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @param _indexBlock block number\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev get amount resource with value at a specific block \\n\\t/// @param resourceType resource type\\n\\t/// @param value token value\\n\\t/// @param _indexBlock block numer\\n\\t/// @return resource amount\\n\\tfunction getAmountAt(\\n\\t\\tResourceData.ResourceType resourceType,\\n\\t\\tuint256 value,\\n\\t\\tuint256 _indexBlock\\n\\t) external view returns (uint256);\\n\\n\\t/// @dev return resource price\\n\\t/// @param resourceType resource type\\n\\t/// @return resource price\\n\\tfunction priceOf(ResourceData.ResourceType resourceType) external view returns (uint256);\\n\\n\\t/// @dev return value of amount resource\\n\\t/// @param resourceType resource type\\n\\t/// @param amount resource amount\\n\\t/// @return token value in resource decimals(18)\\n\\tfunction getValueOf(ResourceData.ResourceType resourceType, uint256 amount) external view returns (uint256);\\n\\n\\t/// @dev return resource amount with value \\n\\t/// @param resourceType resource type\\n\\t/// @param value token value in resource decimals(18)\\n\\t/// @return resource amount\\n\\tfunction getAmountOf(ResourceData.ResourceType resourceType, uint256 value) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd75f211a1619376bec9c9cf94113b9b22e083734d6ddf85346b13bedc7528666\",\"license\":\"UNLICENSE\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50600054610100900460ff166200002f5760005460ff161562000039565b620000396200009e565b620000615760405162461bcd60e51b81526004016200005890620000cb565b60405180910390fd5b600054610100900460ff1615801562000084576000805461ffff19166101011790555b801562000097576000805461ff00191690555b5062000124565b6000620000b630620000bc60201b62000ca61760201c565b15905090565b6001600160a01b03163b151590565b602080825281016200011e81602e81527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160208201526d191e481a5b9a5d1a585b1a5e995960921b604082015260600190565b92915050565b612f9b80620001346000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637a7fa7531161010f578063bb371111116100a2578063f2fde38b11610071578063f2fde38b14610442578063f8401fe614610455578063f8f071fa14610468578063fc0c546a1461047b57600080fd5b8063bb371111146103e6578063bd169975146103f9578063e2cae9f51461041c578063e84372491461042f57600080fd5b80638da5cb5b116100de5780638da5cb5b14610393578063914fd2c3146103ad57806393563a95146103c0578063b05f87a8146103d357600080fd5b80637a7fa7531461034257806380f51c121461035557806382dc1ec4146103785780638456cb591461038b57600080fd5b8063490e4fa2116101875780636b2c0f55116101565780636b2c0f551461030c5780636ef8d66d1461031f578063715018a61461032757806377ef533c1461032f57600080fd5b8063490e4fa2146102a75780635618ce2d146102c75780635c975abb146102e7578063699256f4146102f957600080fd5b80633b8ccfb1116101c35780633b8ccfb1146102595780633f4ba83a1461026c5780634540a85b1461027457806346fbf68e1461028757600080fd5b8063144fa6d7146101f55780631459457a1461020a57806315e077691461021d57806329dbfc7514610246575b600080fd5b6102086102033660046119a4565b61048e565b005b6102086102183660046119d9565b6104cd565b609b54610230906001600160a01b031681565b60405161023d9190611a6b565b60405180910390f35b609954610230906001600160a01b031681565b610208610267366004611a79565b610571565b6102086105a4565b6102086102823660046119a4565b6105d3565b61029a610295366004611a79565b610606565b60405161023d9190611aa2565b6102ba6102b5366004611d79565b610624565b60405161023d9190611db9565b6102da6102d5366004611dc7565b6106fc565b60405161023d9190611f66565b609c54600160a01b900460ff1661029a565b610208610307366004611f77565b610711565b61020861031a366004611a79565b6107bf565b6102086107f2565b6102086107fb565b6102ba61033d366004611ffb565b61082f565b6102086103503660046119a4565b6109ec565b61029a610363366004611a79565b60ce6020526000908152604090205460ff1681565b610208610386366004611a79565b610a1f565b610208610a52565b6033546001600160a01b03165b60405161023d9190612071565b6102086103bb3660046119a4565b610a7f565b6102086103ce36600461207f565b610ab2565b609c54610230906001600160a01b031681565b6102ba6103f43660046120cf565b610b23565b61040c610407366004612197565b610bf0565b60405161023d94939291906121e0565b6065546103a0906001600160a01b031681565b61020861043d3660046119a4565b610c1a565b610208610450366004611a79565b610c4d565b609854610230906001600160a01b031681565b609a54610230906001600160a01b031681565b60cf54610230906001600160a01b031681565b6033546001600160a01b031633146104c15760405162461bcd60e51b81526004016104b890612259565b60405180910390fd5b6104ca81610cb5565b50565b600054610100900460ff166104e85760005460ff16156104ec565b303b155b6105085760405162461bcd60e51b81526004016104b8906122b7565b600054610100900460ff1615801561052a576000805461ffff19166101011790555b61053386610d0b565b61053c85610d5d565b61054584610d84565b61054e83610db4565b61055782610ddb565b8015610569576000805461ff00191690555b505050505050565b6033546001600160a01b0316331461059b5760405162461bcd60e51b81526004016104b890612259565b6104ca81610e02565b6105ad33610606565b6105c95760405162461bcd60e51b81526004016104b8906122f9565b6105d1610e4d565b565b6033546001600160a01b031633146105fd5760405162461bcd60e51b81526004016104b890612259565b6104ca81610ebd565b6001600160a01b0316600090815260ce602052604090205460ff1690565b609c54600090600160a01b900460ff16156106515760405162461bcd60e51b81526004016104b890612330565b600260665414156106745760405162461bcd60e51b81526004016104b890612374565b60026066556040820151606083015161068f91906001610f08565b905061069a8161124a565b90506106aa82600001518261125b565b5060cf546040517f699b2f7653a6bfb60eabd345a469cd1a72cf9733ed0179acb41b3d0b8d6b8583916106ea9133916001600160a01b031690869061242f565b60405180910390a16001606655919050565b60606107088383611310565b90505b92915050565b6033546001600160a01b0316331461073b5760405162461bcd60e51b81526004016104b890612259565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f193505050509050806107815760405162461bcd60e51b81526004016104b89061249e565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e482783836040516107b29291906124ae565b60405180910390a1505050565b6033546001600160a01b031633146107e95760405162461bcd60e51b81526004016104b890612259565b6104ca8161148e565b6105d13361148e565b6033546001600160a01b031633146108255760405162461bcd60e51b81526004016104b890612259565b6105d16000610d0b565b6065546000906001600160a01b0316331461085c5760405162461bcd60e51b81526004016104b89061251c565b609c54600160a01b900460ff16156108865760405162461bcd60e51b81526004016104b890612330565b600260665414156108a95760405162461bcd60e51b81526004016104b890612374565b600260665560cf546001600160a01b038681169116146108db5760405162461bcd60e51b81526004016104b890612560565b60008060008061092087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bf092505050565b935093509350935060006040518060800160405280866001600160a01b03168152602001856001600160401b0316815260200184815260200161096b6109658c611503565b85611310565b8152509050610984816040015182606001516000610f08565b508051610991908a61125b565b5060cf546040517f699b2f7653a6bfb60eabd345a469cd1a72cf9733ed0179acb41b3d0b8d6b8583916109d19133916001600160a01b031690859061242f565b60405180910390a15050600160665550919695505050505050565b6033546001600160a01b03163314610a165760405162461bcd60e51b81526004016104b890612259565b6104ca81611514565b6033546001600160a01b03163314610a495760405162461bcd60e51b81526004016104b890612259565b6104ca8161155f565b610a5b33610606565b610a775760405162461bcd60e51b81526004016104b8906122f9565b6105d16115d8565b6033546001600160a01b03163314610aa95760405162461bcd60e51b81526004016104b890612259565b6104ca8161163d565b6033546001600160a01b03163314610adc5760405162461bcd60e51b81526004016104b890612259565b610af06001600160a01b0384168383611688565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63988383836040516107b293929190612570565b600080825111610b455760405162461bcd60e51b81526004016104b8906125df565b60005b8251811015610bea5760005b838281518110610b6657610b666125ef565b60200260200101516020015151811015610bd757610bc3848381518110610b8f57610b8f6125ef565b6020026020010151602001518281518110610bac57610bac6125ef565b6020026020010151846116e390919063ffffffff16565b925080610bcf8161261b565b915050610b54565b5080610be28161261b565b915050610b48565b50919050565b6000806000606084806020019051810190610c0b91906127c0565b92989197509550909350915050565b6033546001600160a01b03163314610c445760405162461bcd60e51b81526004016104b890612259565b6104ca816116ef565b6033546001600160a01b03163314610c775760405162461bcd60e51b81526004016104b890612259565b6001600160a01b038116610c9d5760405162461bcd60e51b81526004016104b890612881565b6104ca81610d0b565b6001600160a01b03163b151590565b60cf80546001600160a01b0319166001600160a01b0383161790556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e3090610d00908390611a6b565b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610a495760405162461bcd60e51b81526004016104b8906128d9565b600054610100900460ff16610dab5760405162461bcd60e51b81526004016104b8906128d9565b6104ca8161173a565b600054610100900460ff1661059b5760405162461bcd60e51b81526004016104b8906128d9565b600054610100900460ff166104c15760405162461bcd60e51b81526004016104b8906128d9565b606580546001600160a01b0319166001600160a01b0383161790556040517fafe9b28ca24a54df8c44769c685f7b92824aae021cdfcaa4719d493571a23c4c90610d00908390612071565b609c54600160a01b900460ff16610e765760405162461bcd60e51b81526004016104b890612914565b609c805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610eb39190612071565b60405180910390a1565b609c80546001600160a01b0319166001600160a01b0383161790556040517f7b091d9397a2f75213edeec1728b27a9d863f0f8aafb62fce0f1154f48f110f890610d00908390611a6b565b600080835111610f2a5760405162461bcd60e51b81526004016104b890612962565b60005b8351811015611242576000848281518110610f4a57610f4a6125ef565b6020026020010151905060016004811115610f6757610f67611e1e565b81516004811115610f7a57610f7a611e1e565b141561102e57806020015151600114610fa55760405162461bcd60e51b81526004016104b8906129b3565b609954602082015180516001600160a01b039092169163467aa8de918991600090610fd257610fd26125ef565b60200260200101516040518363ffffffff1660e01b8152600401610ff79291906129c3565b600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b505050506111d2565b60038151600481111561104357611043611e1e565b141561109b5780602001515160011461106e5760405162461bcd60e51b81526004016104b890612a0f565b609b54602082015180516001600160a01b039092169163467aa8de918991600090610fd257610fd26125ef565b6002815160048111156110b0576110b0611e1e565b1415611108578060200151516001146110db5760405162461bcd60e51b81526004016104b890612a5d565b609a54602082015180516001600160a01b039092169163467aa8de918991600090610fd257610fd26125ef565b60048151600481111561111d5761111d611e1e565b14156111ba578060200151516002146111485760405162461bcd60e51b81526004016104b890612aad565b609c54602082015180516001600160a01b0390921691634235fec0918991600090611175576111756125ef565b60200260200101518460200151600181518110611194576111946125ef565b60200260200101516040518463ffffffff1660e01b8152600401610ff793929190612abd565b60405162461bcd60e51b81526004016104b890612b1b565b831561122f5760005b81602001515181101561122d576112198260200151600081518110611202576112026125ef565b6020026020010151856116e390919063ffffffff16565b9350806112258161261b565b9150506111db565b505b508061123a8161261b565b915050610f2d565b509392505050565b600061070b8264e8d4a51000611785565b609854604051636b074a0760e01b81526000916001600160a01b031690636b074a079061128c908690600401612071565b60206040518083038186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190612b3e565b6112f85760405162461bcd60e51b81526004016104b890612ba1565b60cf5461070b906001600160a01b0316333085611791565b606060008251116113335760405162461bcd60e51b81526004016104b890612bf7565b600061133e83610b23565b9050600081116113605760405162461bcd60e51b81526004016104b890612c47565b60005b8351811015611485576000848281518110611380576113806125ef565b60200260200101516020015151116113aa5760405162461bcd60e51b81526004016104b890612c9b565b60005b8482815181106113bf576113bf6125ef565b602002602001015160200151518110156114725761142683611420888886815181106113ed576113ed6125ef565b602002602001015160200151858151811061140a5761140a6125ef565b60200260200101516117b890919063ffffffff16565b90611785565b858381518110611438576114386125ef565b6020026020010151602001518281518110611455576114556125ef565b60209081029190910101528061146a8161261b565b9150506113ad565b508061147d8161261b565b915050611363565b50919392505050565b61149781610606565b6114b35760405162461bcd60e51b81526004016104b890612cdf565b6001600160a01b038116600090815260ce602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90610d00908390612071565b600061070b8264e8d4a510006117b8565b609a80546001600160a01b0319166001600160a01b0383161790556040517f100702071f8eb4f459f5f9dcf12bba9b3aeafa0eca6a018364f645558d792c3790610d00908390611a6b565b61156881610606565b156115855760405162461bcd60e51b81526004016104b890612d2d565b6001600160a01b038116600090815260ce602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890610d00908390612071565b609c54600160a01b900460ff16156116025760405162461bcd60e51b81526004016104b890612330565b609c805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ea63390565b609b80546001600160a01b0319166001600160a01b0383161790556040517f6a7e09ebc58179cd1c17c89209474e58d29e43b1bf78dd57f896e7be983220eb90610d00908390611a6b565b6116de8363a9059cbb60e01b84846040516024016116a7929190612d3d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526117c4565b505050565b60006107088284612d4b565b609980546001600160a01b0319166001600160a01b0383161790556040517feb1b948f6c63784a1d91e42dd967c49aae87b1db36d3107e9b913963ae7cd03990610d00908390611a6b565b609880546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c528490610d00908390611a6b565b60006107088284612d79565b6117b2846323b872dd60e01b8585856040516024016116a793929190612d8d565b50505050565b60006107088284612d9b565b6000611819826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118539092919063ffffffff16565b8051909150156116de57808060200190518101906118379190612b3e565b6116de5760405162461bcd60e51b81526004016104b890612e01565b6060611862848460008561186c565b90505b9392505050565b60608247101561188e5760405162461bcd60e51b81526004016104b890612e54565b6001600160a01b0385163b6118b55760405162461bcd60e51b81526004016104b890612e98565b600080866001600160a01b031685876040516118d19190612ef6565b60006040518083038185875af1925050503d806000811461190e576040519150601f19603f3d011682016040523d82523d6000602084013e611913565b606091505b5091509150611923828286611930565b925050505b949350505050565b6060831561193f575081611865565b82511561194f5782518084602001fd5b8160405162461bcd60e51b81526004016104b89190612f34565b60006001600160a01b03821661070b565b600061070b82611969565b61198e8161197a565b81146104ca57600080fd5b803561070b81611985565b6000602082840312156119b9576119b9600080fd5b60006119288484611999565b61198e81611969565b803561070b816119c5565b600080600080600060a086880312156119f4576119f4600080fd5b6000611a0088886119ce565b9550506020611a11888289016119ce565b9450506040611a2288828901611999565b9350506060611a33888289016119ce565b9250506080611a4488828901611999565b9150509295509295909350565b600061070b8261197a565b611a6581611a51565b82525050565b6020810161070b8284611a5c565b600060208284031215611a8e57611a8e600080fd5b600061192884846119ce565b801515611a65565b6020810161070b8284611a9a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611aeb57611aeb611ab0565b6040525050565b6000611afd60405190565b9050611b098282611ac6565b919050565b6001600160401b03811661198e565b803561070b81611b0e565b8061198e565b803561070b81611b28565b60006001600160401b03821115611b5257611b52611ab0565b5060209081020190565b600581106104ca57600080fd5b803561070b81611b5c565b6000611b87611b8284611b39565b611af2565b83815290506020808201908402830185811115611ba657611ba6600080fd5b835b81811015611bca5780611bbb8882611b2e565b84525060209283019201611ba8565b5050509392505050565b600082601f830112611be857611be8600080fd5b8135611928848260208601611b74565b600060408284031215611c0d57611c0d600080fd5b611c176040611af2565b90506000611c258484611b69565b82525060208201356001600160401b03811115611c4457611c44600080fd5b611c5084828501611bd4565b60208301525092915050565b6000611c6a611b8284611b39565b83815290506020808201908402830185811115611c8957611c89600080fd5b835b81811015611bca5780356001600160401b03811115611cac57611cac600080fd5b808601611cb98982611bf8565b8552505060209283019201611c8b565b600082601f830112611cdd57611cdd600080fd5b8135611928848260208601611c5c565b600060808284031215611d0257611d02600080fd5b611d0c6080611af2565b90506000611d1a84846119ce565b8252506020611d2b84848301611b1d565b6020830152506040611d3f84828501611b2e565b60408301525060608201356001600160401b03811115611d6157611d61600080fd5b611d6d84828501611cc9565b60608301525092915050565b600060208284031215611d8e57611d8e600080fd5b81356001600160401b03811115611da757611da7600080fd5b61192884828501611ced565b80611a65565b6020810161070b8284611db3565b60008060408385031215611ddd57611ddd600080fd5b6000611de98585611b2e565b92505060208301356001600160401b03811115611e0857611e08600080fd5b611e1485828601611cc9565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600581106104ca576104ca611e1e565b80611b0981611e34565b600061070b82611e44565b611a6581611e4e565b6000611e6e8383611db3565b505060200190565b6000611e80825190565b80845260209384019383018060005b83811015611eb4578151611ea38882611e62565b975060208301925050600101611e8f565b509495945050505050565b80516000906040840190611ed38582611e59565b5060208301518482036020860152611eeb8282611e76565b95945050505050565b60006107088383611ebf565b6000611f0a825190565b80845260208401935083602082028501611f248560200190565b8060005b85811015611f595784840389528151611f418582611ef4565b94506020830160209a909a0199925050600101611f28565b5091979650505050505050565b602080825281016107088184611f00565b60008060408385031215611f8d57611f8d600080fd5b6000611f9985856119ce565b9250506020611e1485828601611b2e565b60008083601f840112611fbf57611fbf600080fd5b5081356001600160401b03811115611fd957611fd9600080fd5b602083019150836001820283011115611ff457611ff4600080fd5b9250929050565b6000806000806060858703121561201457612014600080fd5b60006120208787611999565b945050602061203187828801611b2e565b93505060408501356001600160401b0381111561205057612050600080fd5b61205c87828801611faa565b95989497509550505050565b611a6581611969565b6020810161070b8284612068565b60008060006060848603121561209757612097600080fd5b60006120a38686611999565b93505060206120b4868287016119ce565b92505060406120c586828701611b2e565b9150509250925092565b6000602082840312156120e4576120e4600080fd5b81356001600160401b038111156120fd576120fd600080fd5b61192884828501611cc9565b60006001600160401b0382111561212257612122611ab0565b601f19601f83011660200192915050565b82818337506000910152565b600061214d611b8284612109565b90508281526020810184848401111561216857612168600080fd5b611242848285612133565b600082601f83011261218757612187600080fd5b813561192884826020860161213f565b6000602082840312156121ac576121ac600080fd5b81356001600160401b038111156121c5576121c5600080fd5b61192884828501612173565b6001600160401b038116611a65565b608081016121ee8287612068565b6121fb60208301866121d1565b6122086040830185611db3565b818103606083015261221a8184611f00565b9695505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161070b81612224565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161070b81612269565b60208082527f5061757365723a2063616c6c6572206973206e6f74207468652070617573657291019081526000612252565b6020808252810161070b816122c7565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612252565b6020808252810161070b81612309565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612252565b6020808252810161070b81612340565b600061238e825190565b808452602084019350836020820285016123a88560200190565b8060005b85811015611f5957848403895281516123c58582611ef4565b94506020830160209a909a01999250506001016123ac565b805160009060808401906123f18582612068565b50602083015161240460208601826121d1565b5060408301516124176040860182611db3565b5060608301518482036060860152611eeb8282612384565b6060810161243d8286612068565b61244a6020830185611a5c565b8181036040830152611eeb81846123dd565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b602082015291506122b0565b6020808252810161070b8161245c565b604081016124bc8285611a5c565b6118656020830184611db3565b603681526000602082017f4d6573736167655265636569766572577261707065723a2063616c6c6572206981527539903737ba1036b2b9b9b0b3b2903932b1b2b4bb32b960511b602082015291506122b0565b6020808252810161070b816124c9565b601e81526000602082017f447374436861696e5061796d656e743a20696e76616c696420746f6b656e000081529150612252565b6020808252810161070b8161252c565b6060810161257e8286611a5c565b61258b6020830185612068565b6119286040830184611db3565b602a81526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c6964207061796c6f8152690c2c8e640d8cadccee8d60b31b602082015291506122b0565b6020808252810161070b81612598565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561262f5761262f612605565b5060010190565b805161070b816119c5565b805161070b81611b0e565b805161070b81611b28565b805161070b81611b5c565b6000612670611b8284611b39565b8381529050602080820190840283018581111561268f5761268f600080fd5b835b81811015611bca57806126a4888261264c565b84525060209283019201612691565b600082601f8301126126c7576126c7600080fd5b8151611928848260208601612662565b6000604082840312156126ec576126ec600080fd5b6126f66040611af2565b905060006127048484612657565b82525060208201516001600160401b0381111561272357612723600080fd5b611c50848285016126b3565b600061273d611b8284611b39565b8381529050602080820190840283018581111561275c5761275c600080fd5b835b81811015611bca5780516001600160401b0381111561277f5761277f600080fd5b80860161278c89826126d7565b855250506020928301920161275e565b600082601f8301126127b0576127b0600080fd5b815161192884826020860161272f565b600080600080608085870312156127d9576127d9600080fd5b60006127e58787612636565b94505060206127f687828801612641565b93505060406128078782880161264c565b92505060608501516001600160401b0381111561282657612826600080fd5b6128328782880161279c565b91505092959194509250565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506122b0565b6020808252810161070b8161283e565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506122b0565b6020808252810161070b81612891565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612252565b6020808252810161070b816128e9565b602181526000602082017f447374436861696e5061796d656e743a20696e76616c6964207061796c6f61648152607360f81b602082015291506122b0565b6020808252810161070b81612924565b60368152600060208201600080516020612f46833981519152815275656e67746820666f72204275696c64696e6754696d6560501b602082015291506122b0565b6020808252810161070b81612972565b604081016124bc8285611db3565b60338152600060208201600080516020612f46833981519152815272656e67746820666f7220415253746f7261676560681b602082015291506122b0565b6020808252810161070b816129d1565b60338152600060208201600080516020612f468339815191528152720cadccee8d040ccdee44084c2dcc8eed2c8e8d606b1b602082015291506122b0565b6020808252810161070b81612a1f565b60358152600060208201600080516020612f46833981519152815274656e67746820666f72204950465353746f7261676560581b602082015291506122b0565b6020808252810161070b81612a6d565b60608101612acb8286611db3565b61258b6020830185611db3565b602681526000602082017f447374436861696e5061796d656e743a20756e6b6e6f776e207265736f75726381526565207479706560d01b602082015291506122b0565b6020808252810161070b81612ad8565b80151561198e565b805161070b81612b2b565b600060208284031215612b5357612b53600080fd5b60006119288484612b33565b602581526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e742070726f8152643b34b232b960d91b602082015291506122b0565b6020808252810161070b81612b5f565b602981526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c6964207061796c6f8152680c2c840d8cadccee8d60bb1b602082015291506122b0565b6020808252810161070b81612bb1565b602381526000602082017f5265736f75725061796c6f6164546f6f6c3a207a65726f20746f74616c2076618152626c756560e81b602082015291506122b0565b6020808252810161070b81612c07565b602781526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c69642076616c7565815266040d8cadccee8d60cb1b602082015291506122b0565b6020808252810161070b81612c57565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f742070617573657200000081529150612252565b6020808252810161070b81612cab565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b602082015291506122b0565b6020808252810161070b81612cef565b604081016124bc8285612068565b60008219821115612d5e57612d5e612605565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612d8857612d88612d63565b500490565b6060810161257e8286612068565b6000816000190483118215151615612db557612db5612605565b500290565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506122b0565b6020808252810161070b81612dba565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015291506122b0565b6020808252810161070b81612e11565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612252565b6020808252810161070b81612e64565b60005b83811015612ec3578181015183820152602001612eab565b838111156117b25750506000910152565b6000612ede825190565b612eec818560208601612ea8565b9290920192915050565b60006118658284612ed4565b6000612f0c825190565b808452602084019350612f23818560208601612ea8565b601f01601f19169290920192915050565b602080825281016107088184612f0256fe447374436861696e5061796d656e743a20696e76616c69642076616c7565206ca26469706673582212206a0c2a7d30282de30ef0d81367764ee67c860a0b5bc406a748f0b4777cea221b64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80637a7fa7531161010f578063bb371111116100a2578063f2fde38b11610071578063f2fde38b14610442578063f8401fe614610455578063f8f071fa14610468578063fc0c546a1461047b57600080fd5b8063bb371111146103e6578063bd169975146103f9578063e2cae9f51461041c578063e84372491461042f57600080fd5b80638da5cb5b116100de5780638da5cb5b14610393578063914fd2c3146103ad57806393563a95146103c0578063b05f87a8146103d357600080fd5b80637a7fa7531461034257806380f51c121461035557806382dc1ec4146103785780638456cb591461038b57600080fd5b8063490e4fa2116101875780636b2c0f55116101565780636b2c0f551461030c5780636ef8d66d1461031f578063715018a61461032757806377ef533c1461032f57600080fd5b8063490e4fa2146102a75780635618ce2d146102c75780635c975abb146102e7578063699256f4146102f957600080fd5b80633b8ccfb1116101c35780633b8ccfb1146102595780633f4ba83a1461026c5780634540a85b1461027457806346fbf68e1461028757600080fd5b8063144fa6d7146101f55780631459457a1461020a57806315e077691461021d57806329dbfc7514610246575b600080fd5b6102086102033660046119a4565b61048e565b005b6102086102183660046119d9565b6104cd565b609b54610230906001600160a01b031681565b60405161023d9190611a6b565b60405180910390f35b609954610230906001600160a01b031681565b610208610267366004611a79565b610571565b6102086105a4565b6102086102823660046119a4565b6105d3565b61029a610295366004611a79565b610606565b60405161023d9190611aa2565b6102ba6102b5366004611d79565b610624565b60405161023d9190611db9565b6102da6102d5366004611dc7565b6106fc565b60405161023d9190611f66565b609c54600160a01b900460ff1661029a565b610208610307366004611f77565b610711565b61020861031a366004611a79565b6107bf565b6102086107f2565b6102086107fb565b6102ba61033d366004611ffb565b61082f565b6102086103503660046119a4565b6109ec565b61029a610363366004611a79565b60ce6020526000908152604090205460ff1681565b610208610386366004611a79565b610a1f565b610208610a52565b6033546001600160a01b03165b60405161023d9190612071565b6102086103bb3660046119a4565b610a7f565b6102086103ce36600461207f565b610ab2565b609c54610230906001600160a01b031681565b6102ba6103f43660046120cf565b610b23565b61040c610407366004612197565b610bf0565b60405161023d94939291906121e0565b6065546103a0906001600160a01b031681565b61020861043d3660046119a4565b610c1a565b610208610450366004611a79565b610c4d565b609854610230906001600160a01b031681565b609a54610230906001600160a01b031681565b60cf54610230906001600160a01b031681565b6033546001600160a01b031633146104c15760405162461bcd60e51b81526004016104b890612259565b60405180910390fd5b6104ca81610cb5565b50565b600054610100900460ff166104e85760005460ff16156104ec565b303b155b6105085760405162461bcd60e51b81526004016104b8906122b7565b600054610100900460ff1615801561052a576000805461ffff19166101011790555b61053386610d0b565b61053c85610d5d565b61054584610d84565b61054e83610db4565b61055782610ddb565b8015610569576000805461ff00191690555b505050505050565b6033546001600160a01b0316331461059b5760405162461bcd60e51b81526004016104b890612259565b6104ca81610e02565b6105ad33610606565b6105c95760405162461bcd60e51b81526004016104b8906122f9565b6105d1610e4d565b565b6033546001600160a01b031633146105fd5760405162461bcd60e51b81526004016104b890612259565b6104ca81610ebd565b6001600160a01b0316600090815260ce602052604090205460ff1690565b609c54600090600160a01b900460ff16156106515760405162461bcd60e51b81526004016104b890612330565b600260665414156106745760405162461bcd60e51b81526004016104b890612374565b60026066556040820151606083015161068f91906001610f08565b905061069a8161124a565b90506106aa82600001518261125b565b5060cf546040517f699b2f7653a6bfb60eabd345a469cd1a72cf9733ed0179acb41b3d0b8d6b8583916106ea9133916001600160a01b031690869061242f565b60405180910390a16001606655919050565b60606107088383611310565b90505b92915050565b6033546001600160a01b0316331461073b5760405162461bcd60e51b81526004016104b890612259565b6040516000906001600160a01b0384169083156108fc0290849084818181858888f193505050509050806107815760405162461bcd60e51b81526004016104b89061249e565b7f2c876ecb97b3c6854f2488d373403f903eacb800e51c159a5c0c7a9c857e482783836040516107b29291906124ae565b60405180910390a1505050565b6033546001600160a01b031633146107e95760405162461bcd60e51b81526004016104b890612259565b6104ca8161148e565b6105d13361148e565b6033546001600160a01b031633146108255760405162461bcd60e51b81526004016104b890612259565b6105d16000610d0b565b6065546000906001600160a01b0316331461085c5760405162461bcd60e51b81526004016104b89061251c565b609c54600160a01b900460ff16156108865760405162461bcd60e51b81526004016104b890612330565b600260665414156108a95760405162461bcd60e51b81526004016104b890612374565b600260665560cf546001600160a01b038681169116146108db5760405162461bcd60e51b81526004016104b890612560565b60008060008061092087878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610bf092505050565b935093509350935060006040518060800160405280866001600160a01b03168152602001856001600160401b0316815260200184815260200161096b6109658c611503565b85611310565b8152509050610984816040015182606001516000610f08565b508051610991908a61125b565b5060cf546040517f699b2f7653a6bfb60eabd345a469cd1a72cf9733ed0179acb41b3d0b8d6b8583916109d19133916001600160a01b031690859061242f565b60405180910390a15050600160665550919695505050505050565b6033546001600160a01b03163314610a165760405162461bcd60e51b81526004016104b890612259565b6104ca81611514565b6033546001600160a01b03163314610a495760405162461bcd60e51b81526004016104b890612259565b6104ca8161155f565b610a5b33610606565b610a775760405162461bcd60e51b81526004016104b8906122f9565b6105d16115d8565b6033546001600160a01b03163314610aa95760405162461bcd60e51b81526004016104b890612259565b6104ca8161163d565b6033546001600160a01b03163314610adc5760405162461bcd60e51b81526004016104b890612259565b610af06001600160a01b0384168383611688565b7f2717ead6b9200dd235aad468c9809ea400fe33ac69b5bfaa6d3e90fc922b63988383836040516107b293929190612570565b600080825111610b455760405162461bcd60e51b81526004016104b8906125df565b60005b8251811015610bea5760005b838281518110610b6657610b666125ef565b60200260200101516020015151811015610bd757610bc3848381518110610b8f57610b8f6125ef565b6020026020010151602001518281518110610bac57610bac6125ef565b6020026020010151846116e390919063ffffffff16565b925080610bcf8161261b565b915050610b54565b5080610be28161261b565b915050610b48565b50919050565b6000806000606084806020019051810190610c0b91906127c0565b92989197509550909350915050565b6033546001600160a01b03163314610c445760405162461bcd60e51b81526004016104b890612259565b6104ca816116ef565b6033546001600160a01b03163314610c775760405162461bcd60e51b81526004016104b890612259565b6001600160a01b038116610c9d5760405162461bcd60e51b81526004016104b890612881565b6104ca81610d0b565b6001600160a01b03163b151590565b60cf80546001600160a01b0319166001600160a01b0383161790556040517f5ba6b30cd4b2f9e9e67f4feb9b9df10d5da3b057598e6901b217b7d590345e3090610d00908390611a6b565b60405180910390a150565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610a495760405162461bcd60e51b81526004016104b8906128d9565b600054610100900460ff16610dab5760405162461bcd60e51b81526004016104b8906128d9565b6104ca8161173a565b600054610100900460ff1661059b5760405162461bcd60e51b81526004016104b8906128d9565b600054610100900460ff166104c15760405162461bcd60e51b81526004016104b8906128d9565b606580546001600160a01b0319166001600160a01b0383161790556040517fafe9b28ca24a54df8c44769c685f7b92824aae021cdfcaa4719d493571a23c4c90610d00908390612071565b609c54600160a01b900460ff16610e765760405162461bcd60e51b81526004016104b890612914565b609c805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b604051610eb39190612071565b60405180910390a1565b609c80546001600160a01b0319166001600160a01b0383161790556040517f7b091d9397a2f75213edeec1728b27a9d863f0f8aafb62fce0f1154f48f110f890610d00908390611a6b565b600080835111610f2a5760405162461bcd60e51b81526004016104b890612962565b60005b8351811015611242576000848281518110610f4a57610f4a6125ef565b6020026020010151905060016004811115610f6757610f67611e1e565b81516004811115610f7a57610f7a611e1e565b141561102e57806020015151600114610fa55760405162461bcd60e51b81526004016104b8906129b3565b609954602082015180516001600160a01b039092169163467aa8de918991600090610fd257610fd26125ef565b60200260200101516040518363ffffffff1660e01b8152600401610ff79291906129c3565b600060405180830381600087803b15801561101157600080fd5b505af1158015611025573d6000803e3d6000fd5b505050506111d2565b60038151600481111561104357611043611e1e565b141561109b5780602001515160011461106e5760405162461bcd60e51b81526004016104b890612a0f565b609b54602082015180516001600160a01b039092169163467aa8de918991600090610fd257610fd26125ef565b6002815160048111156110b0576110b0611e1e565b1415611108578060200151516001146110db5760405162461bcd60e51b81526004016104b890612a5d565b609a54602082015180516001600160a01b039092169163467aa8de918991600090610fd257610fd26125ef565b60048151600481111561111d5761111d611e1e565b14156111ba578060200151516002146111485760405162461bcd60e51b81526004016104b890612aad565b609c54602082015180516001600160a01b0390921691634235fec0918991600090611175576111756125ef565b60200260200101518460200151600181518110611194576111946125ef565b60200260200101516040518463ffffffff1660e01b8152600401610ff793929190612abd565b60405162461bcd60e51b81526004016104b890612b1b565b831561122f5760005b81602001515181101561122d576112198260200151600081518110611202576112026125ef565b6020026020010151856116e390919063ffffffff16565b9350806112258161261b565b9150506111db565b505b508061123a8161261b565b915050610f2d565b509392505050565b600061070b8264e8d4a51000611785565b609854604051636b074a0760e01b81526000916001600160a01b031690636b074a079061128c908690600401612071565b60206040518083038186803b1580156112a457600080fd5b505afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190612b3e565b6112f85760405162461bcd60e51b81526004016104b890612ba1565b60cf5461070b906001600160a01b0316333085611791565b606060008251116113335760405162461bcd60e51b81526004016104b890612bf7565b600061133e83610b23565b9050600081116113605760405162461bcd60e51b81526004016104b890612c47565b60005b8351811015611485576000848281518110611380576113806125ef565b60200260200101516020015151116113aa5760405162461bcd60e51b81526004016104b890612c9b565b60005b8482815181106113bf576113bf6125ef565b602002602001015160200151518110156114725761142683611420888886815181106113ed576113ed6125ef565b602002602001015160200151858151811061140a5761140a6125ef565b60200260200101516117b890919063ffffffff16565b90611785565b858381518110611438576114386125ef565b6020026020010151602001518281518110611455576114556125ef565b60209081029190910101528061146a8161261b565b9150506113ad565b508061147d8161261b565b915050611363565b50919392505050565b61149781610606565b6114b35760405162461bcd60e51b81526004016104b890612cdf565b6001600160a01b038116600090815260ce602052604090819020805460ff19169055517fcd265ebaf09df2871cc7bd4133404a235ba12eff2041bb89d9c714a2621c7c7e90610d00908390612071565b600061070b8264e8d4a510006117b8565b609a80546001600160a01b0319166001600160a01b0383161790556040517f100702071f8eb4f459f5f9dcf12bba9b3aeafa0eca6a018364f645558d792c3790610d00908390611a6b565b61156881610606565b156115855760405162461bcd60e51b81526004016104b890612d2d565b6001600160a01b038116600090815260ce602052604090819020805460ff19166001179055517f6719d08c1888103bea251a4ed56406bd0c3e69723c8a1686e017e7bbe159b6f890610d00908390612071565b609c54600160a01b900460ff16156116025760405162461bcd60e51b81526004016104b890612330565b609c805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610ea63390565b609b80546001600160a01b0319166001600160a01b0383161790556040517f6a7e09ebc58179cd1c17c89209474e58d29e43b1bf78dd57f896e7be983220eb90610d00908390611a6b565b6116de8363a9059cbb60e01b84846040516024016116a7929190612d3d565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526117c4565b505050565b60006107088284612d4b565b609980546001600160a01b0319166001600160a01b0383161790556040517feb1b948f6c63784a1d91e42dd967c49aae87b1db36d3107e9b913963ae7cd03990610d00908390611a6b565b609880546001600160a01b0319166001600160a01b0383161790556040517fe63288198842f0dacdcbdc3f22dcd4e473d1f3cee7e10603ae6ddc3e667c528490610d00908390611a6b565b60006107088284612d79565b6117b2846323b872dd60e01b8585856040516024016116a793929190612d8d565b50505050565b60006107088284612d9b565b6000611819826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166118539092919063ffffffff16565b8051909150156116de57808060200190518101906118379190612b3e565b6116de5760405162461bcd60e51b81526004016104b890612e01565b6060611862848460008561186c565b90505b9392505050565b60608247101561188e5760405162461bcd60e51b81526004016104b890612e54565b6001600160a01b0385163b6118b55760405162461bcd60e51b81526004016104b890612e98565b600080866001600160a01b031685876040516118d19190612ef6565b60006040518083038185875af1925050503d806000811461190e576040519150601f19603f3d011682016040523d82523d6000602084013e611913565b606091505b5091509150611923828286611930565b925050505b949350505050565b6060831561193f575081611865565b82511561194f5782518084602001fd5b8160405162461bcd60e51b81526004016104b89190612f34565b60006001600160a01b03821661070b565b600061070b82611969565b61198e8161197a565b81146104ca57600080fd5b803561070b81611985565b6000602082840312156119b9576119b9600080fd5b60006119288484611999565b61198e81611969565b803561070b816119c5565b600080600080600060a086880312156119f4576119f4600080fd5b6000611a0088886119ce565b9550506020611a11888289016119ce565b9450506040611a2288828901611999565b9350506060611a33888289016119ce565b9250506080611a4488828901611999565b9150509295509295909350565b600061070b8261197a565b611a6581611a51565b82525050565b6020810161070b8284611a5c565b600060208284031215611a8e57611a8e600080fd5b600061192884846119ce565b801515611a65565b6020810161070b8284611a9a565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b0382111715611aeb57611aeb611ab0565b6040525050565b6000611afd60405190565b9050611b098282611ac6565b919050565b6001600160401b03811661198e565b803561070b81611b0e565b8061198e565b803561070b81611b28565b60006001600160401b03821115611b5257611b52611ab0565b5060209081020190565b600581106104ca57600080fd5b803561070b81611b5c565b6000611b87611b8284611b39565b611af2565b83815290506020808201908402830185811115611ba657611ba6600080fd5b835b81811015611bca5780611bbb8882611b2e565b84525060209283019201611ba8565b5050509392505050565b600082601f830112611be857611be8600080fd5b8135611928848260208601611b74565b600060408284031215611c0d57611c0d600080fd5b611c176040611af2565b90506000611c258484611b69565b82525060208201356001600160401b03811115611c4457611c44600080fd5b611c5084828501611bd4565b60208301525092915050565b6000611c6a611b8284611b39565b83815290506020808201908402830185811115611c8957611c89600080fd5b835b81811015611bca5780356001600160401b03811115611cac57611cac600080fd5b808601611cb98982611bf8565b8552505060209283019201611c8b565b600082601f830112611cdd57611cdd600080fd5b8135611928848260208601611c5c565b600060808284031215611d0257611d02600080fd5b611d0c6080611af2565b90506000611d1a84846119ce565b8252506020611d2b84848301611b1d565b6020830152506040611d3f84828501611b2e565b60408301525060608201356001600160401b03811115611d6157611d61600080fd5b611d6d84828501611cc9565b60608301525092915050565b600060208284031215611d8e57611d8e600080fd5b81356001600160401b03811115611da757611da7600080fd5b61192884828501611ced565b80611a65565b6020810161070b8284611db3565b60008060408385031215611ddd57611ddd600080fd5b6000611de98585611b2e565b92505060208301356001600160401b03811115611e0857611e08600080fd5b611e1485828601611cc9565b9150509250929050565b634e487b7160e01b600052602160045260246000fd5b600581106104ca576104ca611e1e565b80611b0981611e34565b600061070b82611e44565b611a6581611e4e565b6000611e6e8383611db3565b505060200190565b6000611e80825190565b80845260209384019383018060005b83811015611eb4578151611ea38882611e62565b975060208301925050600101611e8f565b509495945050505050565b80516000906040840190611ed38582611e59565b5060208301518482036020860152611eeb8282611e76565b95945050505050565b60006107088383611ebf565b6000611f0a825190565b80845260208401935083602082028501611f248560200190565b8060005b85811015611f595784840389528151611f418582611ef4565b94506020830160209a909a0199925050600101611f28565b5091979650505050505050565b602080825281016107088184611f00565b60008060408385031215611f8d57611f8d600080fd5b6000611f9985856119ce565b9250506020611e1485828601611b2e565b60008083601f840112611fbf57611fbf600080fd5b5081356001600160401b03811115611fd957611fd9600080fd5b602083019150836001820283011115611ff457611ff4600080fd5b9250929050565b6000806000806060858703121561201457612014600080fd5b60006120208787611999565b945050602061203187828801611b2e565b93505060408501356001600160401b0381111561205057612050600080fd5b61205c87828801611faa565b95989497509550505050565b611a6581611969565b6020810161070b8284612068565b60008060006060848603121561209757612097600080fd5b60006120a38686611999565b93505060206120b4868287016119ce565b92505060406120c586828701611b2e565b9150509250925092565b6000602082840312156120e4576120e4600080fd5b81356001600160401b038111156120fd576120fd600080fd5b61192884828501611cc9565b60006001600160401b0382111561212257612122611ab0565b601f19601f83011660200192915050565b82818337506000910152565b600061214d611b8284612109565b90508281526020810184848401111561216857612168600080fd5b611242848285612133565b600082601f83011261218757612187600080fd5b813561192884826020860161213f565b6000602082840312156121ac576121ac600080fd5b81356001600160401b038111156121c5576121c5600080fd5b61192884828501612173565b6001600160401b038116611a65565b608081016121ee8287612068565b6121fb60208301866121d1565b6122086040830185611db3565b818103606083015261221a8184611f00565b9695505050505050565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572910190815260005b5060200190565b6020808252810161070b81612224565b602e81526000602082017f496e697469616c697a61626c653a20636f6e747261637420697320616c72656181526d191e481a5b9a5d1a585b1a5e995960921b602082015291505b5060400190565b6020808252810161070b81612269565b60208082527f5061757365723a2063616c6c6572206973206e6f74207468652070617573657291019081526000612252565b6020808252810161070b816122c7565b601081526000602082016f14185d5cd8589b194e881c185d5cd95960821b81529150612252565b6020808252810161070b81612309565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0081529150612252565b6020808252810161070b81612340565b600061238e825190565b808452602084019350836020820285016123a88560200190565b8060005b85811015611f5957848403895281516123c58582611ef4565b94506020830160209a909a01999250506001016123ac565b805160009060808401906123f18582612068565b50602083015161240460208601826121d1565b5060408301516124176040860182611db3565b5060608301518482036060860152611eeb8282612384565b6060810161243d8286612068565b61244a6020830185611a5c565b8181036040830152611eeb81846123dd565b602581526000602082017f5061796d656e743a207769746864726177206e617469766520746f6b656e2066815264185a5b195960da1b602082015291506122b0565b6020808252810161070b8161245c565b604081016124bc8285611a5c565b6118656020830184611db3565b603681526000602082017f4d6573736167655265636569766572577261707065723a2063616c6c6572206981527539903737ba1036b2b9b9b0b3b2903932b1b2b4bb32b960511b602082015291506122b0565b6020808252810161070b816124c9565b601e81526000602082017f447374436861696e5061796d656e743a20696e76616c696420746f6b656e000081529150612252565b6020808252810161070b8161252c565b6060810161257e8286611a5c565b61258b6020830185612068565b6119286040830184611db3565b602a81526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c6964207061796c6f8152690c2c8e640d8cadccee8d60b31b602082015291506122b0565b6020808252810161070b81612598565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561262f5761262f612605565b5060010190565b805161070b816119c5565b805161070b81611b0e565b805161070b81611b28565b805161070b81611b5c565b6000612670611b8284611b39565b8381529050602080820190840283018581111561268f5761268f600080fd5b835b81811015611bca57806126a4888261264c565b84525060209283019201612691565b600082601f8301126126c7576126c7600080fd5b8151611928848260208601612662565b6000604082840312156126ec576126ec600080fd5b6126f66040611af2565b905060006127048484612657565b82525060208201516001600160401b0381111561272357612723600080fd5b611c50848285016126b3565b600061273d611b8284611b39565b8381529050602080820190840283018581111561275c5761275c600080fd5b835b81811015611bca5780516001600160401b0381111561277f5761277f600080fd5b80860161278c89826126d7565b855250506020928301920161275e565b600082601f8301126127b0576127b0600080fd5b815161192884826020860161272f565b600080600080608085870312156127d9576127d9600080fd5b60006127e58787612636565b94505060206127f687828801612641565b93505060406128078782880161264c565b92505060608501516001600160401b0381111561282657612826600080fd5b6128328782880161279c565b91505092959194509250565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181526564647265737360d01b602082015291506122b0565b6020808252810161070b8161283e565b602b81526000602082017f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206981526a6e697469616c697a696e6760a81b602082015291506122b0565b6020808252810161070b81612891565b601481526000602082017314185d5cd8589b194e881b9bdd081c185d5cd95960621b81529150612252565b6020808252810161070b816128e9565b602181526000602082017f447374436861696e5061796d656e743a20696e76616c6964207061796c6f61648152607360f81b602082015291506122b0565b6020808252810161070b81612924565b60368152600060208201600080516020612f46833981519152815275656e67746820666f72204275696c64696e6754696d6560501b602082015291506122b0565b6020808252810161070b81612972565b604081016124bc8285611db3565b60338152600060208201600080516020612f46833981519152815272656e67746820666f7220415253746f7261676560681b602082015291506122b0565b6020808252810161070b816129d1565b60338152600060208201600080516020612f468339815191528152720cadccee8d040ccdee44084c2dcc8eed2c8e8d606b1b602082015291506122b0565b6020808252810161070b81612a1f565b60358152600060208201600080516020612f46833981519152815274656e67746820666f72204950465353746f7261676560581b602082015291506122b0565b6020808252810161070b81612a6d565b60608101612acb8286611db3565b61258b6020830185611db3565b602681526000602082017f447374436861696e5061796d656e743a20756e6b6e6f776e207265736f75726381526565207479706560d01b602082015291506122b0565b6020808252810161070b81612ad8565b80151561198e565b805161070b81612b2b565b600060208284031215612b5357612b53600080fd5b60006119288484612b33565b602581526000602082017f447374436861696e5061796d656e743a206e6f6e6578697374656e742070726f8152643b34b232b960d91b602082015291506122b0565b6020808252810161070b81612b5f565b602981526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c6964207061796c6f8152680c2c840d8cadccee8d60bb1b602082015291506122b0565b6020808252810161070b81612bb1565b602381526000602082017f5265736f75725061796c6f6164546f6f6c3a207a65726f20746f74616c2076618152626c756560e81b602082015291506122b0565b6020808252810161070b81612c07565b602781526000602082017f5265736f75725061796c6f6164546f6f6c3a20696e76616c69642076616c7565815266040d8cadccee8d60cb1b602082015291506122b0565b6020808252810161070b81612c57565b601d81526000602082017f5061757365723a206163636f756e74206973206e6f742070617573657200000081529150612252565b6020808252810161070b81612cab565b602181526000602082017f5061757365723a206163636f756e7420697320616c72656164792070617573658152603960f91b602082015291506122b0565b6020808252810161070b81612cef565b604081016124bc8285612068565b60008219821115612d5e57612d5e612605565b500190565b634e487b7160e01b600052601260045260246000fd5b600082612d8857612d88612d63565b500490565b6060810161257e8286612068565b6000816000190483118215151615612db557612db5612605565b500290565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506122b0565b6020808252810161070b81612dba565b602681526000602082017f416464726573733a20696e73756666696369656e742062616c616e636520666f8152651c8818d85b1b60d21b602082015291506122b0565b6020808252810161070b81612e11565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081529150612252565b6020808252810161070b81612e64565b60005b83811015612ec3578181015183820152602001612eab565b838111156117b25750506000910152565b6000612ede825190565b612eec818560208601612ea8565b9290920192915050565b60006118658284612ed4565b6000612f0c825190565b808452602084019350612f23818560208601612ea8565b601f01601f19169290920192915050565b602080825281016107088184612f0256fe447374436861696e5061796d656e743a20696e76616c69642076616c7565206ca26469706673582212206a0c2a7d30282de30ef0d81367764ee67c860a0b5bc406a748f0b4777cea221b64736f6c63430008090033",
  "devdoc": {
    "author": "Alexandas",
    "details": "Celer SGN source chain sender contract",
    "kind": "dev",
    "methods": {
      "addPauser(address)": {
        "details": "add a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "convertSourceChainPayloads(uint256,(uint8,uint256[])[])": {
        "details": "convert source chain payloads",
        "params": {
          "amount": "amount tokens",
          "payloads": "payment payloads"
        },
        "returns": {
          "_0": "converted payment payloads"
        }
      },
      "decodeSourceChainMessage(bytes)": {
        "details": "decode source chain message",
        "params": {
          "message": "message bytes"
        },
        "returns": {
          "account": "user account",
          "nonce": "nonce",
          "payloads": "payment payloads",
          "provider": "provider address"
        }
      },
      "initialize(address,address,address,address,address)": {
        "details": "proxy initialize function",
        "params": {
          "messageReceiver": "message receiver contract address",
          "owner": "contract owner",
          "pauser": "contract pauser",
          "providers": "providers contract",
          "token": "token address"
        }
      },
      "isPauser(address)": {
        "details": "whether the account is the contract pauser",
        "params": {
          "account": "address"
        },
        "returns": {
          "_0": "whether account is a pauser"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerWithdrawERC20(address,address,uint256)": {
        "details": "withdraw token ",
        "params": {
          "to": "receiver address",
          "token": "token address",
          "value": "token value"
        }
      },
      "ownerWithdrawNative(address,uint256)": {
        "details": "withdraw ETH ",
        "params": {
          "to": "receiver address",
          "value": "token value"
        }
      },
      "pause()": {
        "details": "pause the contract"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "pay((address,uint64,bytes32,(uint8,uint256[])[]))": {
        "details": "pay on dst chain",
        "params": {
          "payload": "payment payload"
        },
        "returns": {
          "value": "payment value"
        }
      },
      "payFromSourceChain(address,uint256,bytes)": {
        "details": "pay from source chain only called by message receiver",
        "params": {
          "_token": "token address",
          "dstAmount": "token amount",
          "message": "payment payload message bytes"
        },
        "returns": {
          "value": "payment value"
        }
      },
      "removePauser(address)": {
        "details": "remove a pauser for the contract",
        "params": {
          "account": "address"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renouncePauser()": {
        "details": "remove a pauser for the contract"
      },
      "setARStorageController(address)": {
        "details": "update AR storage controller contract",
        "params": {
          "_arStorageController": "AR storage controller contract"
        }
      },
      "setBandwidthController(address)": {
        "details": "update bandwidth controller contract",
        "params": {
          "_bandwidthController": "bandwidth controller contract"
        }
      },
      "setBuildingTimeController(address)": {
        "details": "update building time controller contract",
        "params": {
          "_buildingTimeController": "building time controller contract"
        }
      },
      "setIPFSStorageController(address)": {
        "details": "update ipfs storage controller contract",
        "params": {
          "_ipfsStorageController": "IPFS storage controller contract"
        }
      },
      "setMessageReceiver(address)": {
        "details": "set messageReceiver contract address",
        "params": {
          "_messageReceiver": "message receiver contract address"
        }
      },
      "setToken(address)": {
        "details": "set token address",
        "params": {
          "_token": "token address"
        }
      },
      "totalValue((uint8,uint256[])[])": {
        "details": "payment payload total value",
        "params": {
          "payloads": "payment payloads"
        },
        "returns": {
          "value": "total value"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "unpause the contract"
      }
    },
    "stateVariables": {
      "token": {
        "details": "token address"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 147,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 150,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 970,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5226,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "messageReceiver",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 339,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "_status",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6983,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "providers",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IProviders)4319"
      },
      {
        "astId": 7248,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "buildingTimeController",
        "offset": 0,
        "slot": "153",
        "type": "t_contract(INormalResourceController)8503"
      },
      {
        "astId": 7252,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "bandwidthController",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(INormalResourceController)8503"
      },
      {
        "astId": 7256,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "arStorageController",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(INormalResourceController)8503"
      },
      {
        "astId": 7260,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "ipfsStorageController",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IIPFSStorageController)8473"
      },
      {
        "astId": 235,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "_paused",
        "offset": 20,
        "slot": "156",
        "type": "t_bool"
      },
      {
        "astId": 324,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "__gap",
        "offset": 0,
        "slot": "157",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3749,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "pausers",
        "offset": 0,
        "slot": "206",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 5657,
        "contract": "contracts/payment/DstChainPayment.sol:DstChainPayment",
        "label": "token",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IERC20Upgradeable)462"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Upgradeable)462": {
        "encoding": "inplace",
        "label": "contract IERC20Upgradeable",
        "numberOfBytes": "20"
      },
      "t_contract(IIPFSStorageController)8473": {
        "encoding": "inplace",
        "label": "contract IIPFSStorageController",
        "numberOfBytes": "20"
      },
      "t_contract(INormalResourceController)8503": {
        "encoding": "inplace",
        "label": "contract INormalResourceController",
        "numberOfBytes": "20"
      },
      "t_contract(IProviders)4319": {
        "encoding": "inplace",
        "label": "contract IProviders",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}